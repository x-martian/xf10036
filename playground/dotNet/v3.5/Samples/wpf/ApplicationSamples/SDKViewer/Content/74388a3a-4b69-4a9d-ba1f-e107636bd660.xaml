<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_74388a3a_4b69_4a9d_ba1f_e107636bd660"
  Tag     ="Extend Glass Frame Into a WPF Application"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Extend Glass Frame Into a WPF Application</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic demonstrates how to extend the Windows Vista glass frame into the client area of a Windows Presentation Foundation (WPF) application. The following image illustrates the glass frame extended into the address bar of Internet Explorer 7.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Internet Explorer with extended glass frame behind address bar.</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>This example will only work on a Windows Vista machine running the Desktop Window Manager (DWM) with glass enabled. Windows Vista Home Basic edition does not support the transparent glass effect. Areas that would typically render with the transparent glass effect on other editions of Windows Vista are rendered opaque.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>To extend the glass frame on a WPF application, access to unmanaged API is needed. The following code example does a Platform Invoke (pinvoke) for the two API needed to extend the frame into the client area. Each of these API are declared in a class called <Run FontWeight="Bold">NonClientRegionAPI</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>[StructLayout(LayoutKind.Sequential)] public struct MARGINS { public int cxLeftWidth; 
// width of left border that retains its size public int cxRightWidth; 
// width of right border that retains its size public int cyTopHeight; 
// height of top border that retains its size public int cyBottomHeight; 
// height of bottom border that retains its size }; 
[DllImport("DwmApi.dll")] public static extern int DwmExtendFrameIntoClientArea( IntPtr hwnd, ref MARGINS pMarInset); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>DwmExtendFrameIntoClientArea is the DWM function that extends the frame into the client area. It takes two parameters; 
a window handle and a MARGINS structure. MARGINS is used to tell the DWM how much extra the frame should be extended into the client area.
    </Paragraph>

    <Paragraph>To use the DwmExtendFrameIntoClientArea function, a window handle must be obtained. In WPF, the window handle can be obtained from the Handle property of an HwndSource. In the following example, the frame is extended into the client area on the Loaded event of the window.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>void OnLoaded(object sender, RoutedEventArgs e) { //Obtain the window handle for WPF application HwndSource source = HwndSource.FromHwnd(new WindowInteropHelper(this).Handle); 
source.CompositionTarget.BackgroundColor = Color.FromArgb(0, 0, 0, 0); 
//Set Margins NonClientRegionAPI.MARGINS margins = new NonClientRegionAPI.MARGINS(); 
margins.cxLeftWidth = 5; 
margins.cxRightWidth = 5; 
margins.cyTopHeight = (int)topBar.ActualHeight + 5; 
margins.cyBottomHeight = 5; 
int hr = NonClientRegionAPI.DwmExtendFrameIntoClientArea(source.Handle, ref margins); 
// if (hr 
&lt; 
0) { //DwmExtendFrameIntoClientArea Failed } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows a simple window in which the frame is extended into the client area. The frame is extended behind the top border that contains the two TextBox objects.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Window x:Class="SDKSample.Window1" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="ExtendedVistaGlass" Height="300" Width="400" Loaded="OnLoaded" Background="Transparent" > 
&lt;Grid ShowGridLines="True"> 
&lt;DockPanel Name="mainDock"> 
&lt;!-- The border is used to compute the rendered height with margins. topBar contents will be displayed on the extended glass frame.--> 
&lt;Border Name="topBar" DockPanel.Dock="Top" > 
&lt;Grid Name="grid"> 
&lt;Grid.ColumnDefinitions> 
&lt;ColumnDefinition MinWidth="100" Width="*"/> 
&lt;ColumnDefinition Width="Auto"/> 
&lt;/Grid.ColumnDefinitions> 
&lt;TextBox Grid.Column="0" MinWidth="100" Margin="0,0,10,5">Path
&lt;/TextBox> 
&lt;TextBox Grid.Column="1" MinWidth="75" Margin="0,0,0,5">Search
&lt;/TextBox> 
&lt;/Grid> 
&lt;/Border> 
&lt;Grid DockPanel.Dock="Top" > 
&lt;Grid.ColumnDefinitions> 
&lt;ColumnDefinition/> 
&lt;/Grid.ColumnDefinitions> 
&lt;TextBox Grid.Column="0" AcceptsReturn="True"/> 
&lt;/Grid> 
&lt;/DockPanel> 
&lt;/Grid> 
&lt;/Window> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following image illustrates the glass frame extended into a WPF application.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Glass Frame Extended into a </Run>
 WPF <Run FontWeight="Bold">Application.</Run>

    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Desktop Window Manager Overview
      <LineBreak/>Desktop Window Manager Blur Overview
      <LineBreak/>DwmExtenFrameIntoClientArea
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Extend Glass Frame Into a WPF Application to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

