<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_9e8aa6b6_112c_4579_98d1_c974917df499"
  Tag     ="Supported Scenarios in Windows Presentation Foundation and Windows Forms Interoperation"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Supported Scenarios in Windows Presentation Foundation and Windows Forms Interoperation</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>WPF and Windows Forms present two different architectures for creating application interfaces. The System.Windows.Forms.Integration namespace provides classes that enable common interoperation scenarios. The two key classes that implement interoperation capabilities are WindowsFormsHost and ElementHost. This topic describes which interoperation scenarios are supported and which scenarios are not supported.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Special consideration is given to the <Run FontStyle="italic">hybrid control</Run>
 scenario. A hybrid control has a control from one technology nested in a control from the other technology. This is also called a <Run FontStyle="italic">nested interoperation</Run>
. A <Run FontStyle="italic">multilevel hybrid control</Run>
 has more than one level of hybrid control nesting. An example of a multilevel nested interoperation is a Windows Forms control that contains a WPF control, which contains another Windows Forms control. Multilevel hybrid controls are not supported. 
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="Windows_Presentation_Foundation_Application_Hosting">Windows Presentation Foundation-based Application Hosting Windows Forms Controls</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Windows_Forms_Application_Hosting_Windows">Windows Forms-based Application Hosting Windows Presentation Foundation Controls</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Windows Presentation Foundation-based Application Hosting Windows Forms Controls
    </Paragraph>

    <Paragraph>The following interoperation scenarios are supported when a WPF control hosts a Windows Forms control:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>The WPF control may host one or more Windows Forms controls using XAML.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host one or more Windows Forms controls using code.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host Windows Forms container controls that contain other Windows Forms controls.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host a master/detail form with a WPF master and Windows Forms details.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host a master/detail form with a Windows Forms master and WPF details.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host one or more ActiveX controls.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host one or more composite controls.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host hybrid controls using Extensible Application Markup Language (XAML).
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It may host hybrid controls using code.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Layout Support
    </Paragraph>

    <Paragraph>The following list describes the known limitations when the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element attempts to integrate its hosted Windows Forms control into the WPF layout system.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>In some cases, Windows Forms controls cannot be resized, or can be sized only to specific dimensions. For example, a Windows Forms ComboBox control supports only a single height, which is defined by the control's font size. In a WPF dynamic layout, which assumes that elements can stretch vertically, a hosted <Run FontWeight="Bold">ComboBox</Run>
 control will not stretch as expected. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Windows Forms controls cannot be rotated or skewed. For example, when you rotate your user interface by 90 degrees, hosted Windows Forms controls will maintain their upright position. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In most cases, Windows Forms controls do not support proportional scaling. Although the overall dimensions of the control will scale, child controls and component elements of the control may not resize as expected. This limitation depends on how well each Windows Forms control supports scaling.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In a WPF user interface, you can change the z-order of elements to control overlapping behavior. A hosted Windows Forms control is drawn in a separate HWND, so it is always drawn on top of WPF elements.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Windows Forms controls support autoscaling based on the font size. In a WPF user interface, changing the font size does not resize the entire layout, although individual elements may dynamically resize.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Ambient Properties
    </Paragraph>

    <Paragraph>Some of the ambient properties of WPF controls have Windows Forms equivalents. These ambient properties are propagated to the hosted Windows Forms controls and exposed as public properties on the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control. The <Run FontWeight="Bold">WindowsFormsHost</Run>
 control translates each WPF ambient property into its Windows Forms equivalent. 
    </Paragraph>

    <Paragraph>For more information, see <Hyperlink NavigateUri="999d8298-9c04-467d-a453-86e41002057d.xaml">Windows Forms and WPF Property Mapping</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="18">Behavior
    </Paragraph>

    <Paragraph>The following table describes interoperation behavior.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Behavior 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Supported 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not supported 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Transparency
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Windows Forms control rendering supports transparency. The background of the parent WPF control can become the background of hosted Windows Forms controls.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Some Windows Forms controls do not support transparency. For example, the TextBox and <Run FontWeight="Bold">ComboBox</Run>
 controls will not be transparent when hosted by WPF. 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Tabbing
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Tab order for hosted Windows Forms controls is the same as when those controls are hosted in a Windows Forms-based application. 
            </Paragraph>

            <Paragraph>Tabbing from a WPF control to a Windows Forms control with the TAB key and SHIFT+TAB keys works as usual. 
            </Paragraph>

            <Paragraph>Windows Forms controls that have a TabStop property value of <Run FontWeight="Bold">false</Run>
 do not receive focus when the user tabs through controls.
            </Paragraph>

            <List MarkerStyle="Disc">
              <ListItem>
                <Paragraph>Each <Run FontWeight="Bold">WindowsFormsHost</Run>
 control has a TabIndex value, which determines when that <Run FontWeight="Bold">WindowsFormsHost</Run>
 control will receive focus. 
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>Windows Forms controls that are contained inside a <Run FontWeight="Bold">WindowsFormsHost</Run>
 container follow the order specified by the TabIndex property. Tabbing from the last tab index puts focus on the next WPF control, if one exists. If no other focusable WPF control exists, tabbing returns to the first Windows Forms control in the tab order.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph><Run FontWeight="Bold">TabIndex</Run>
 values for controls inside the <Run FontWeight="Bold">WindowsFormsHost</Run>
 are relative to sibling Windows Forms controls that are contained in the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control. 
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>Tabbing honors control-specific behavior. For example, pressing the TAB key in a <Run FontWeight="Bold">TextBox</Run>
 control that has a AcceptsTab property value of <Run FontWeight="Bold">true</Run>
 enters a tab in the text box instead of moving the focus.
                </Paragraph>

              </ListItem>

            </List>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Navigation with arrow keys
            </Paragraph>

          </TableCell>

          <TableCell>
            <List MarkerStyle="Disc">
              <ListItem>
                <Paragraph>Navigation with arrow keys in the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control is the same as in an ordinary Windows Forms container control: The UP ARROW and LEFT ARROW keys select the previous control, and the DOWN ARROW and RIGHT ARROW keys select the next control.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>The UP ARROW and LEFT ARROW keys from the first control that is contained in the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control perform the same action as the SHIFT+TAB keyboard shortcut. If there is a focusable WPF control, focus moves outside the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control. This behavior differs from the standard ContainerControl behavior in that no wrapping to the last control occurs. If no other focusable WPF control exists, focus returns to the last Windows Forms control in the tab order.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>The DOWN ARROW and RIGHT ARROW keys from the last control that is contained in the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control perform the same action as the TAB key. If there is a focusable WPF control, focus moves outside the <Run FontWeight="Bold">WindowsFormsHost</Run>
 control. This behavior differs from the standard <Run FontWeight="Bold">ContainerControl</Run>
 behavior in that no wrapping to the first control occurs. If no other focusable WPF control exists, focus returns to the first Windows Forms control in the tab order.
                </Paragraph>

              </ListItem>

            </List>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Accelerators
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Accelerators work as usual, except where noted in the "Not supported" column.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Duplicate accelerators across technologies do not work like ordinary duplicate accelerators. When an accelerator is duplicated across technologies, with at least one on a Windows Forms control and the other on a WPF control, the Windows Forms control always receives the accelerator. Focus does not toggle between the controls when the duplicate accelerator is pressed.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Shortcut keys
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Shortcut keys work as usual, except where noted in the "Not supported" column.
            </Paragraph>

          </TableCell>

          <TableCell>
            <List MarkerStyle="Disc">
              <ListItem>
                <Paragraph>Windows Forms shortcut keys that are handled at the preprocessing stage always take precedence over WPF shortcut keys. For example, if you have a ToolStrip control with CTRL+S shortcut keys defined, and there is a WPF command bound to CTRL+S, the <Run FontWeight="Bold">ToolStrip</Run>
 control handler is always invoked first, regardless of focus.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>Windows Forms shortcut keys that are handled by the KeyDown event are processed last in WPF. You can prevent this behavior by overriding the Windows Forms control's IsInputKey method or handling the PreviewKeyDown event. Return <Run FontWeight="Bold">true</Run>
 from the <Run FontWeight="Bold">IsInputKey</Run>
 method, or set the value of the System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey property to <Run FontWeight="Bold">true</Run>
 in your <Run FontWeight="Bold">PreviewKeyDown</Run>
 event handler.
                </Paragraph>

              </ListItem>

            </List>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>AcceptsReturn, AcceptsTab, and other control-specific behavior
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Properties that change the default keyboard behavior work as usual, assuming that the Windows Forms control overrides the <Run FontWeight="Bold">IsInputKey</Run>
 method to return <Run FontWeight="Bold">true</Run>
. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Windows Forms controls that change default keyboard behavior by handling the <Run FontWeight="Bold">KeyDown</Run>
 event are processed last in the host WPF control. Because these controls are processed last, they can produce unexpected behavior.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Enter and Leave Events
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>When focus is not going to the containing <Run FontWeight="Bold">ElementHost</Run>
 control, the Enter and Leave events are raised as usual when focus changes in a single <Run FontWeight="Bold">WindowsFormsHost</Run>
 control.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Enter and Leave events are not raised when the following focus changes occur:
            </Paragraph>

            <List MarkerStyle="Disc">
              <ListItem>
                <Paragraph>From inside to outside a <Run FontWeight="Bold">WindowsFormsHost</Run>
 control.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>From outside to inside a <Run FontWeight="Bold">WindowsFormsHost</Run>
 control.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>Outside a <Run FontWeight="Bold">WindowsFormsHost</Run>
 control.
                </Paragraph>

              </ListItem>

              <ListItem>
                <Paragraph>From a Windows Forms control hosted in a <Run FontWeight="Bold">WindowsFormsHost</Run>
 control to an <Run FontWeight="Bold">ElementHost</Run>
 control hosted inside the same <Run FontWeight="Bold">WindowsFormsHost</Run>
.
                </Paragraph>

              </ListItem>

            </List>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Multithreading
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All varieties of multithreading are supported. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Both the Windows Forms and WPF technologies assume a single-threaded concurrency model. During debugging, calls to framework objects from other threads will raise an exception to enforce this requirement. 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Security
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All interoperation scenarios require full trust.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>No interoperation scenarios are allowed in partial trust.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Accessibility
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All accessibility scenarios are supported. Assistive technology products function correctly when they are used for hybrid applications that contain both Windows Forms and WPF controls. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Clipboard
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All Clipboard operations work as usual. This includes cutting and pasting between Windows Forms and WPF controls. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Drag-and-drop feature
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All drag-and-drop operations work as usual. This includes operations between Windows Forms and WPF controls.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Windows Forms-based Application Hosting Windows Presentation Foundation Controls
    </Paragraph>

    <Paragraph>The following interoperation scenarios are supported when a Windows Forms control hosts a WPF control:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Hosting one or more WPF controls using code.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Associating a property sheet with one or more hosted WPF controls.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hosting one or more WPF pages in a form.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Starting a WPF window.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hosting a master/detail form with a Windows Forms master and WPF details.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hosting a master/detail form with a WPF master and Windows Forms details.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hosting custom WPF controls.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hosting hybrid controls.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Ambient Properties
    </Paragraph>

    <Paragraph>Some of the ambient properties of Windows Forms controls have WPF equivalents. These ambient properties are propagated to the hosted WPF controls and exposed as public properties on the <Run FontWeight="Bold">ElementHost</Run>
 control. The <Run FontWeight="Bold">ElementHost</Run>
 control translates each Windows Forms ambient property to its WPF equivalent.
    </Paragraph>

    <Paragraph>For more information, see <Hyperlink NavigateUri="999d8298-9c04-467d-a453-86e41002057d.xaml">Windows Forms and WPF Property Mapping</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="18">Behavior
    </Paragraph>

    <Paragraph>The following table describes interoperation behavior.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Behavior 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Supported 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not supported 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Transparency
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>WPF control rendering supports transparency. The background of the parent Windows Forms control can become the background of hosted WPF controls.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Multithreading
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All varieties of multithreading are supported. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Both the Windows Forms and WPF technologies assume a single-threaded concurrency model. During debugging, calls to framework objects from other threads will raise an exception to enforce this requirement.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Security
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All interoperation scenarios require full trust.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>No interoperation scenarios are allowed in partial trust.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Accessibility
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All accessibility scenarios are supported. Assistive technology products function correctly when they are used for hybrid applications that contain both Windows Forms and WPF controls. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Clipboard
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All Clipboard operations work as usual. This includes cutting and pasting between Windows Forms and WPF controls. 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Drag-and-drop feature
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>All drag-and-drop operations work as usual. This includes operations between Windows Forms and WPF controls.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Not applicable.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>ElementHost
      <LineBreak/>WindowsFormsHost
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="0ac41286-4c1b-4b17-9196-d985cb844ce1.xaml">Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="999d8298-9c04-467d-a453-86e41002057d.xaml">Windows Forms and WPF Property Mapping</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Supported Scenarios in Windows Presentation Foundation and Windows Forms Interoperation to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

