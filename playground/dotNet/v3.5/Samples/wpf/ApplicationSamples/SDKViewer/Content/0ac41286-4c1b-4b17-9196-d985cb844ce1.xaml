<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_0ac41286_4c1b_4b17_9196_d985cb844ce1"
  Tag     ="Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Windows Presentation Foundation (WPF) provides a rich environment for creating applications. However, when you have a substantial investment in Windows Forms code, it can be more effective to extend your existing Windows Forms application with WPF rather than to rewrite it from scratch. A common scenario is when you want to embed one or more pages implemented with WPF within your Windows Forms application 
    </Paragraph>

    <Paragraph>This walkthrough steps you through an application that hosts a WPF page in a Windows Forms application. The page is a simple data-entry application that is packaged in a DLL. This example is designed to be nearly identical in appearance and functionality to Hosting a Windows Forms Control in a Windows Presentation Foundation Page. The primary difference is that the hosting scenario is reversed. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>The hosted page is not a WPF control in the strict sense of the term. Rather, it is an ordinary WPF page that is packaged in a DLL. However, the techniques for hosting a WPF control on a form are identical to those used to host an ordinary page. See <Hyperlink NavigateUri="a3d9930e-5597-470e-a636-dcf65eac500b.xaml">Control Customization</Hyperlink>
 for further discussion of WPF controls.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The walkthrough is divided into two sections. The first section briefly describes the implementation of the WPF page. The second section discusses in detail how to host the page in a Windows Forms application, receive events from the page, and access some of the page's properties.
    </Paragraph>

    <Paragraph>Tasks illustrated in this walkthrough include:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Implementing the Windows Presentation Foundation page.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Implementing the Windows Forms host application.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>For a complete code listing of the tasks illustrated in this walkthrough, see Hosting a Simple Windows Presentation Foundation Control in a Windows Form.
    </Paragraph>

    <Paragraph FontSize="22">Prerequisites
    </Paragraph>

    <Paragraph>To complete this walkthrough you will need:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Development Tools for .NET Framework 3.0, which enable you to create a WPF application project. For information on installing these tools, see Installation Instructions for the Windows SDK.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Implementing the Windows Presentation Foundation Page
    </Paragraph>

    <Paragraph>The WPF page used in this example is a simple data-entry form that takes the user's name and address. When the user clicks one of two buttons to indicate that the task is finished, the page raises a custom event to return that information to the host. This page is essentially identical in form and function to the Windows Forms control used in <Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>
. There is nothing special about the page to customize it for hosting on a Windows Forms form. You could just as easily load it into a Frame on a larger WPF page. The following illustration shows the rendered page. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Windows Presentation Foundation page</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="18">Creating the Project
    </Paragraph>

    <Paragraph>To start the project:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Launch Microsoft Visual Studio, and open the <Run FontWeight="Bold">New Project</Run>
 dialog box.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select the <Run FontWeight="Bold">Windows Application (WPF)</Run>
 template. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Name the new project <Run FontWeight="Bold">MyControls</Run>
, and place it in a conveniently named top-level folder, for example, <Run FontWeight="Bold">WfHostingWpf</Run>
. Later, you will put the host application in this folder as well. Click <Run FontWeight="Bold">OK</Run>
 to create the project. The default project contains a single page named <Run>Page1</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Right-click the project name in Solution Explorer, and select <Run FontWeight="Bold">Properties</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Set the <Run FontWeight="Bold">Output type</Run>
 to <Run FontWeight="Bold">Class Library</Run>
 to compile the page as a DLL.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Delete the application definition files, MyApp.xaml and MyApp.xaml.cs, from the project. You need those files only if you are implementing the page as an application.
        </Paragraph>

      </ListItem>

    </List>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>When you compile a WPF application as a class library, you cannot launch it to view the rendered page. For that reason, you may find it convenient to leave the output type as "Windows Application" until the application is completely implemented. That enables you to check the appearance of the pages by launching the application. When you are satisfied, delete the application definition files and change the output type to "Class Library" to compile it as a DLL.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Your project should have references to the following system DLLs. If any of these DLLs aren't included by default, add them to your project.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>System 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>PresentationCore 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>PresentationFramework 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>WindowsBase 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Implementing the Page's User Interface
    </Paragraph>

    <Paragraph>The WPF page's user interface (UI) is implemented with Extensible Application Markup Language (XAML). It is designed to be similar in appearance and functionality to the Windows Forms control discussed in <Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>
. The page's data-entry UI consists of five TextBox elements. Each <Run FontWeight="Bold">TextBox</Run>
 element has an associated TextBlock element that serves as a label. There are two Button elements at the bottom of the page, <Run FontWeight="Bold">OK</Run>
 and <Run FontWeight="Bold">Cancel</Run>
. When the user clicks either button, the page raises a custom event to return the information to the host.
    </Paragraph>

    <Paragraph FontSize="16pt">Basic Layout
    </Paragraph>

    <Paragraph>The various UI elements are contained in a Grid element. You can use <Run FontWeight="Bold">Grid</Run>
 to arrange the contents of the page in much the same way you would use a <Run FontWeight="Bold">Table</Run>
 element in HTML. WPF also has a Table element, but <Run FontWeight="Bold">Grid</Run>
 is more lightweight and better suited for simple layout tasks.
    </Paragraph>

    <Paragraph>The following example shows the basic layout code. This code defines the overall structure of the page by specifying the number of columns and rows in the <Run FontWeight="Bold">Grid</Run>
 element. Use it to replace the code in Page1.xaml.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="MyControls.Page1" Background="#DCDCDC" Width="375" Height="250" Name="rootElement" Loaded="Init"> <Run>... </Run>
 
&lt;Grid.ColumnDefinitions> 
&lt;ColumnDefinition Width="Auto" /> 
&lt;ColumnDefinition Width="Auto" /> 
&lt;ColumnDefinition Width="Auto"/> 
&lt;ColumnDefinition Width="Auto"/> 
&lt;/Grid.ColumnDefinitions> 
&lt;Grid.RowDefinitions> 
&lt;RowDefinition Height="Auto" /> 
&lt;RowDefinition Height="Auto" /> 
&lt;RowDefinition Height="Auto" /> 
&lt;RowDefinition Height="Auto" /> 
&lt;RowDefinition Height="Auto" /> 
&lt;RowDefinition Height="Auto" /> 
&lt;/Grid.RowDefinitions> </Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Adding TextBlock and TextBox Elements to the Grid
    </Paragraph>

    <Paragraph>You place a UI element in the grid by setting the element's RowProperty and ColumnProperty attributes to the appropriate row and column number. Remember that row and column numbering are zero-based. You can have an element span multiple columns by setting its ColumnSpanProperty attribute. See Table vs. Grid Overview for more information on <Run FontWeight="Bold">Grid</Run>
 elements.
    </Paragraph>

    <Paragraph>The following example shows the page's <Run FontWeight="Bold">TextBox</Run>
 and <Run FontWeight="Bold">TextBlock</Run>
 elements with their <Run FontWeight="Bold">RowProperty</Run>
 and <Run FontWeight="Bold">ColumnProperty</Run>
 attributes, which are set to place the elements properly in the grid. Add this code to Page1.xaml, just below the <Run FontWeight="Bold">Grid</Run>
 element.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4" Margin="10,5,10,0" HorizontalAlignment="Center" Style="{StaticResource titleText}">Simple WPF Control
&lt;/TextBlock> 
&lt;TextBlock Grid.Column="0" Grid.Row="1" Style="{StaticResource inlineText}" Name="nameLabel">Name
&lt;/TextBlock> 
&lt;TextBox Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="3" Name="txtName"/> 
&lt;TextBlock Grid.Column="0" Grid.Row="2" Style="{StaticResource inlineText}" Name="addressLabel">Street Address
&lt;/TextBlock> 
&lt;TextBox Grid.Column="1" Grid.Row="2" Grid.ColumnSpan="3" Name="txtAddress"/> 
&lt;TextBlock Grid.Column="0" Grid.Row="3" Style="{StaticResource inlineText}" Name="cityLabel">City
&lt;/TextBlock> 
&lt;TextBox Grid.Column="1" Grid.Row="3" Width="100" Name="txtCity"/> 
&lt;TextBlock Grid.Column="2" Grid.Row="3" Style="{StaticResource inlineText}" Name="stateLabel">State
&lt;/TextBlock> 
&lt;TextBox Grid.Column="3" Grid.Row="3" Width="50" Name="txtState"/> 
&lt;TextBlock Grid.Column="0" Grid.Row="4" Style="{StaticResource inlineText}" Name="zipLabel">Zip
&lt;/TextBlock> 
&lt;TextBox Grid.Column="1" Grid.Row="4" Width="100" Name="txtZip"/> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Styling the UI Elements
    </Paragraph>

    <Paragraph>Many of the elements on the data-entry form have a similar appearance, which means that they have identical settings for several of their properties. Rather than setting each element's attributes separately, the example code uses Style elements to define standard property settings for classes of elements. This approach reduces the complexity of the page and enables you to change the appearance of multiple elements through a single style attribute. 
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">Style</Run>
 elements are contained in the <Run FontWeight="Bold">Grid</Run>
 element's Resources property, so they can be used by all elements on the page. If a style is named, you apply it to an element by adding a <Run FontWeight="Bold">Style</Run>
 element set to the style's name. Styles that aren't named become the default style for the element. See <Hyperlink NavigateUri="481765e5-5467-4a75-9f7b-e10e2ac410d9.xaml">Styling and Templating</Hyperlink>
 for additional information on WPF styles.
    </Paragraph>

    <Paragraph>The following example shows the <Run FontWeight="Bold">Style</Run>
 elements for the WPF page. Add the code to Page1.xaml, just below the <Run FontWeight="Bold">Grid</Run>
 element. To see how the styles are applied to elements, see the previous code example. For example, the last <Run FontWeight="Bold">TextBlock</Run>
 element has the <Run>inlineText</Run>
 style, and the last <Run FontWeight="Bold">TextBox</Run>
 element uses the default style.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Grid.Resources> 
&lt;Style x:Key="inlineText" TargetType="{x:Type TextBlock}"> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;Setter Property="FontWeight" Value="Normal"/> 
&lt;Setter Property="FontSize" Value="12"/> 
&lt;/Style> 
&lt;Style x:Key="titleText" TargetType="{x:Type TextBlock}"> 
&lt;Setter Property="DockPanel.Dock" Value="Top"/> 
&lt;Setter Property="FontWeight" Value="Bold"/> 
&lt;Setter Property="FontSize" Value="14"/> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;/Style> 
&lt;Style TargetType="{x:Type Button}"> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;Setter Property="Width" Value="60"/> 
&lt;/Style> 
&lt;Style TargetType="{x:Type TextBox}"> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;/Style> 
&lt;/Grid.Resources> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Adding the OK and Cancel Buttons
    </Paragraph>

    <Paragraph>The final elements on the page are the <Run FontWeight="Bold">OK</Run>
 and <Run FontWeight="Bold">Cancel</Run>
<Run FontWeight="Bold">Button</Run>
 elements, which occupy the first two columns of the last row of the <Run FontWeight="Bold">Grid</Run>
. These elements use a common event handler, <Run>ButtonClicked</Run>
, and the default <Run FontWeight="Bold">Button</Run>
 style defined in the previous code example. Add the following code to Page1.xaml, just below the final <Run FontWeight="Bold">TextBox</Run>
 element. The XAML part of the page is now complete.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Button Grid.Row="5" Grid.Column="0" Name="btnOK" Click="ButtonClicked">OK
&lt;/Button> 
&lt;Button Grid.Row="5" Grid.Column="1" Name="btnCancel" Click="ButtonClicked">Cancel
&lt;/Button> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Implementing the Page's Code-Behind File
    </Paragraph>

    <Paragraph>The WPF page's code-behind file, Page1.xaml.cs, implements four essential tasks:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Registers the page's DLL name with the Application object, so that it knows where to load the page from.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Handles the event that occurs when the user clicks one of the buttons.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Retrieves the data from the <Run FontWeight="Bold">TextBox</Run>
 elements, and packages it in a custom event argument object.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Raises the custom <Run>OnButtonClick</Run>
 event, which notifies the host that the user is finished and passes the data back to the host.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The page also exposes a number of color and font properties that enable you to control the page's appearance. Unlike the WindowsFormsHost class, which is used to host a Windows Forms control, the ElementHost class exposes the page's Background property only. To maintain the similarity between this code example and the example discussed in <Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>
, the page exposes the remaining properties directly.
    </Paragraph>

    <Paragraph FontSize="16pt">The Basic Structure of the Code-Behind File
    </Paragraph>

    <Paragraph>The code-behind file consists of a single namespace, <Run>MyControls</Run>
, which contains two classes, <Run>Page1</Run>
 and <Run>MyControlEventArgs</Run>
. Replace the code in Page1.xaml.cs with the following.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Navigation; 
using System.Windows.Controls; 
using System.Windows.Media; 
namespace MyControls { public partial class Page1 : Grid { //... } public class MyControlEventArgs : EventArgs { //... } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The first class, <Run>Page1</Run>
, is a partial class containing the code that implements the functionality of the UI defined in Page1.xaml. When Page1.xaml is parsed, the XAML is converted to the same partial class, and the two partial classes are merged to form the compiled page. For this reason, the class name in the code-behind file must match the class name assigned to Page1.xaml, and it must inherit from the root element of the page. The second class, <Run>MyControlEventArgs</Run>
, is an event arguments class that is used to send the data back to the host.
    </Paragraph>

    <Paragraph FontSize="16pt">Initializing the Page1 Class
    </Paragraph>

    <Paragraph>The following code example implements several basic tasks:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Declares a private event, <Run>OnButtonClick</Run>
, and its associated delegate, <Run>MyControlEventHandler</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Creates several private global variables that store the user's data. This data is exposed through corresponding properties.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Implements a handler, <Run>Init</Run>
, for the page's Loaded event. This handler initializes the global variables by assigning them the values defined in Page1.xaml. To do this, it uses the Name assigned to a typical <Run FontWeight="Bold">TextBlock</Run>
 element, <Run>nameLabel</Run>
, to access that element's property settings.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Add the following code to your Page1 class.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public partial class Page1 : Grid { public delegate void MyControlEventHandler(object sender, MyControlEventArgs args); 
public event MyControlEventHandler OnButtonClick; 
private FontWeight _fontWeight; 
private double _fontSize; 
private FontFamily _fontFamily; 
private FontStyle _fontStyle; 
private SolidColorBrush _foreground; 
private SolidColorBrush _background; 
public void Init(object sender, EventArgs e) { //They all have the same style, so use nameLabel to set initial values. _fontWeight = nameLabel.FontWeight; 
_fontSize = nameLabel.FontSize; 
_fontFamily = nameLabel.FontFamily; 
_fontStyle = nameLabel.FontStyle; 
_foreground = (SolidColorBrush)nameLabel.Foreground; 
_background = (SolidColorBrush)rootElement.Background; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Handling the Buttons' Click Events
    </Paragraph>

    <Paragraph>The user indicates that the data-entry task is finished by clicking either the <Run FontWeight="Bold">OK</Run>
 button or the <Run FontWeight="Bold">Cancel</Run>
 button at the bottom of the page. Both buttons use the same Click event handler, <Run>ButtonClicked</Run>
. Both buttons have a name, <Run>btnOK</Run>
 or <Run>btnFalse</Run>
, that enables the handler to determine which button was clicked by examining the value of the <Run>sender</Run>
 argument. The handler does the following:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Creates a <Run>MyControlEventArgs</Run>
 object that contains the data from the page's <Run FontWeight="Bold">TextBox</Run>
 elements.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>If the user clicked the <Run FontWeight="Bold">Cancel</Run>
 button, sets the <Run>MyControlEventArgs</Run>
 object's <Run>IsOK</Run>
 property to <Run FontWeight="Bold">false</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Raises the <Run>OnButtonClick</Run>
 event to indicate to the host that the user is finished, and passes back the collected data.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Add the following code to your Page1 class, below the <Run>Init</Run>
 method.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private void ButtonClicked(object sender, RoutedEventArgs e) { MyControlEventArgs retvals = new MyControlEventArgs(true, txtName.Text, txtAddress.Text, txtCity.Text, txtState.Text, txtZip.Text); 
if (sender == btnCancel) { retvals.IsOK = false; 
} if (OnButtonClick != null) OnButtonClick(this, retvals); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Creating Properties
    </Paragraph>

    <Paragraph>The remainder of the class simply exposes properties that correspond to the global variables discussed above. When a property changes, the set accessor modifies the appearance of the page by changing the corresponding element properties and updating the underlying global variables.
    </Paragraph>

    <Paragraph>Add the following code to your <Run>Page1</Run>
 class.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public FontWeight MyControl_FontWeight { get { return _fontWeight; 
} set { _fontWeight = value; 
nameLabel.FontWeight = value; 
addressLabel.FontWeight = value; 
cityLabel.FontWeight = value; 
stateLabel.FontWeight = value; 
zipLabel.FontWeight = value; 
} } public double MyControl_FontSize { get { return _fontSize; 
} set { _fontSize = value; 
nameLabel.FontSize = value; 
addressLabel.FontSize = value; 
cityLabel.FontSize = value; 
stateLabel.FontSize = value; 
zipLabel.FontSize = value; 
} } public FontStyle MyControl_FontStyle { get { return _fontStyle; 
} set { _fontStyle = value; 
nameLabel.FontStyle = value; 
addressLabel.FontStyle = value; 
cityLabel.FontStyle = value; 
stateLabel.FontStyle = value; 
zipLabel.FontStyle = value; 
} } public FontFamily MyControl_FontFamily { get { return _fontFamily; 
} set { _fontFamily = value; 
nameLabel.FontFamily = value; 
addressLabel.FontFamily = value; 
cityLabel.FontFamily = value; 
stateLabel.FontFamily = value; 
zipLabel.FontFamily = value; 
} } public SolidColorBrush MyControl_Background { get { return _background; 
} set { _background = value; 
rootElement.Background = value; 
} } public SolidColorBrush MyControl_Foreground { get { return _foreground; 
} set { _foreground = value; 
nameLabel.Foreground = value; 
addressLabel.Foreground = value; 
cityLabel.Foreground = value; 
stateLabel.Foreground = value; 
zipLabel.Foreground = value; 
} } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="16pt">Sending the Data Back to the Host
    </Paragraph>

    <Paragraph>The final component in the file is the <Run>MyControlEventArgs</Run>
 class, which is used to send the collected data back to the host. Add the following code to your <Run>MyControls</Run>
 namespace. The implementation is straightforward, and is not discussed further.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public class MyControlEventArgs : EventArgs { private string _Name; 
private string _StreetAddress; 
private string _City; 
private string _State; 
private string _Zip; 
private bool _IsOK; 
public MyControlEventArgs(bool result, string name, string address, string city, string state, string zip) { _IsOK = result; 
_Name = name; 
_StreetAddress = address; 
_City = city; 
_State = state; 
_Zip = zip; 
} public string MyName { get { return _Name; 
} set { _Name = value; 
} } public string MyStreetAddress { get { return _StreetAddress; 
} set { _StreetAddress = value; 
} } public string MyCity { get { return _City; 
} set { _City = value; 
} } public string MyState { get { return _State; 
} set { _State = value; 
} } public string MyZip { get { return _Zip; 
} set { _Zip = value; 
} } public bool IsOK { get { return _IsOK; 
} set { _IsOK = value; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Implementing the Windows Forms Host Application
    </Paragraph>

    <Paragraph>The Windows Forms host application uses an <Run FontWeight="Bold">ElementHost</Run>
 object to host the WPF page on the form. The application handles the page's <Run>OnButtonClick</Run>
 event to receive the data from the form. The application also has a set of option buttons that you can use to modify the page's appearance. The following screen shot shows the rendered form. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Windows Presentation Foundation page hosted in a Windows Forms application</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="18">Creating the Project
    </Paragraph>

    <Paragraph>To start the project:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Launch Visual Studio, and open the <Run FontWeight="Bold">New Project</Run>
 dialog box.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select <Run FontWeight="Bold">C# Projects</Run>
 with the <Run FontWeight="Bold">Windows Application</Run>
 template. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Name the new project <Run FontWeight="Bold">WFHost</Run>
, and place it in the same top-level folder that contains the MyControls project. Click <Run FontWeight="Bold">OK</Run>
 to create the project.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>You also need to add a reference to the DLL that contains the WPF page:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Click the project name in Solution Explorer, and select <Run FontWeight="Bold">Add Reference</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Click the <Run FontWeight="Bold">Browse</Run>
 tab, and navigate to the folder that contains MyControls.dll.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select MyControls.dll, and click <Run FontWeight="Bold">OK</Run>
 to add the DLL to the list of references.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In Solution Explorer, add a reference to the WindowsFormsIntegration assembly, which is named WindowsFormsIntegration.dll. 
        </Paragraph>

        <Paragraph>The default location for this file is %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Implementing the Form's User Interface Design
    </Paragraph>

    <Paragraph>Open the Windows Forms Designer, and lay out the form as it appears in the illustration shown in the <Hyperlink TargetName="winforms_host">Implementing the Windows Forms Host Application</Hyperlink>
 section:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Expand the default form to accommodate the controls and the WPF page.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add a System.Windows.Forms.Panel control to the upper-right corner of the form to hold the WPF page. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add six sets of System.Windows.Forms.RadioButton controls, as shown in the illustration.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add five System.Windows.Forms.Label controls to the lower-right corner of the form, as shown in the illustration. These controls act as labels for the data returned by the WPF control.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add a <Run FontWeight="Bold">Label</Run>
 control to the right of each <Run FontWeight="Bold">Label</Run>
 control added in the previous step. Set the Text property of each control to <Run FontWeight="Bold">""</Run>
. These controls display the data returned by the WPF control.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add another <Run FontWeight="Bold">Label</Run>
 control to serve as a title for the group of controls from the last two steps. Because this <Run FontWeight="Bold">Label</Run>
 is intended to serve as the title for the group, make the font size two points larger than the controls in the group.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Initializing the Form
    </Paragraph>

    <Paragraph>You generally implement the hosting code in the form's Load event handler. In the Windows Forms Designer, double-click the form to create a <Run FontWeight="Bold">Load</Run>
 event handler method. The following code example includes the sample's <Run FontWeight="Bold">Load</Run>
 event handler, a handler for the WPF page's <Run FontWeight="Bold">Loaded</Run>
 event, and declarations for several global variables that are used later. Replace the code in Form1.cs with the following.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>partial class Form1 : Form { private ElementHost ctrlHost; 
private MyControls.Page1 wpfAddressCtrl; 
System.Windows.FontWeight initFontWeight; 
double initFontSize; 
System.Windows.FontStyle initFontStyle; 
System.Windows.Media.SolidColorBrush initBackBrush; 
System.Windows.Media.SolidColorBrush initForeBrush; 
FontFamily initFontFamily; 
public Form1() { InitializeComponent(); 
} private void Form1_Load(object sender, EventArgs e) { ctrlHost = new ElementHost(); 
ctrlHost.Dock = DockStyle.Fill; 
panel1.Controls.Add(ctrlHost); 
wpfAddressCtrl = new MyControls.Page1(); 
wpfAddressCtrl.InitializeComponent(); 
ctrlHost.Child = wpfAddressCtrl; 
wpfAddressCtrl.OnButtonClick += new MyControls.Page1.MyControlEventHandler( avAddressCtrl_OnButtonClick); 
wpfAddressCtrl.Loaded += new RoutedEventHandler( avAddressCtrl_Loaded); 
} void avAddressCtrl_Loaded(object sender, EventArgs e) { initBackBrush = (SolidColorBrush)wpfAddressCtrl.MyControl_Background; 
initForeBrush = wpfAddressCtrl.MyControl_Foreground; 
initFontFamily = wpfAddressCtrl.MyControl_FontFamily; 
initFontSize = wpfAddressCtrl.MyControl_FontSize; 
initFontWeight = wpfAddressCtrl.MyControl_FontWeight; 
initFontStyle = wpfAddressCtrl.MyControl_FontStyle; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run>Form1_Load</Run>
 method in the preceding code example shows the general procedure for hosting a WPF control:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Create a new <Run FontWeight="Bold">ElementHost</Run>
 object.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Set the control's Dock property to System.Windows.Forms.DockStyle.Fill.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Add the <Run FontWeight="Bold">ElementHost</Run>
 control to the <Run FontWeight="Bold">Panel</Run>
 control's Controls collection.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Create an instance of the WPF page.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Host the page on the form by assigning the page to the <Run FontWeight="Bold">ElementHost</Run>
 control's Child property.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The remaining two lines in the <Run>Form1_Load</Run>
 method attach handlers to two page events:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run>OnButtonClick</Run>
 is a custom event that is fired by the page when the user clicks the <Run FontWeight="Bold">OK</Run>
 or <Run FontWeight="Bold">Cancel</Run>
 button. You handle the event to get the user's response and to collect any data that the user filled in.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Loaded</Run>
 is a standard event that is raised by a WPF page when it is fully loaded. The event is used here because the sample needs to initialize several global variables using properties from the page. At the time of the form's <Run FontWeight="Bold">Load</Run>
 event, the page is not fully loaded and those values are still set to <Run FontWeight="Bold">null</Run>
. You need to wait until the page's <Run FontWeight="Bold">Loaded</Run>
 event occurs before you can access those properties.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The <Run FontWeight="Bold">Loaded</Run>
 event handler is shown in the preceding code example. The <Run>OnButtonClick</Run>
 handler is discussed in the next section.
    </Paragraph>

    <Paragraph FontSize="18">Handling OnButtonClick
    </Paragraph>

    <Paragraph>The <Run>OnButtonClick</Run>
 event occurs when the user clicks the <Run FontWeight="Bold">OK</Run>
 or <Run FontWeight="Bold">Cancel</Run>
 button. 
    </Paragraph>

    <Paragraph>The event handler checks the event argument's <Run>IsOK</Run>
 field to determine which button was clicked. The <Run>lbl</Run>
<Run FontStyle="italic">data</Run>
 variables correspond to the invisible <Run FontWeight="Bold">Label</Run>
 controls that were discussed earlier. If the user clicked the <Run FontWeight="Bold">OK</Run>
 button, the data from the page's <Run FontWeight="Bold">TextBox</Run>
 controls is assigned to the corresponding <Run FontWeight="Bold">Label</Run>
 control. If the user clicked <Run FontWeight="Bold">Cancel</Run>
, the Text values are set to <Run FontWeight="Bold">null</Run>
.
    </Paragraph>

    <Paragraph>Add the following code to Form1.cs. You can now compile and run the application.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>void avAddressCtrl_OnButtonClick( object sender, MyControls.MyControlEventArgs args) { if (args.IsOK) { lblAddress.Text = "Street Address: " + args.MyStreetAddress; 
lblCity.Text = "City: " + args.MyCity; 
lblName.Text = "Name: " + args.MyName; 
lblState.Text = "State: " + args.MyState; 
lblZip.Text = "Zip: " + args.MyZip; 
} else { lblAddress.Text = "Street Address: "; 
lblCity.Text = "City: "; 
lblName.Text = "Name: "; 
lblState.Text = "State: "; 
lblZip.Text = "Zip: "; 
} } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Modifying the Windows Presentation Foundation Page's Appearance
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">RadioButton</Run>
 controls on the left side of the form enable the user to change the WPF page's foreground and background colors as well as several font properties. The background color is exposed by the <Run FontWeight="Bold">ElementHost</Run>
 object. The remaining properties are exposed as custom properties of the page.
    </Paragraph>

    <Paragraph>Double-click the <Run FontWeight="Bold">RadioButton</Run>
 controls on the form to create templates for the corresponding CheckedChanged event handlers. Extract the code from the following handlers, and add it to the corresponding handlers in Form1.cs.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private void radioBackgroundOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Background = initBackBrush; 
} private void radioBackgroundLightGreen_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Background = new SolidColorBrush(Colors.LightGreen); 
} private void radioBackgroundLightSalmon_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Background = new SolidColorBrush(Colors.LightSalmon); 
} private void radioForegroundOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Foreground = initForeBrush; 
} private void radioForegroundRed_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Foreground = new System.Windows.Media.SolidColorBrush(Colors.Red); 
} private void radioForegroundYellow_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_Foreground = new System.Windows.Media.SolidColorBrush(Colors.Yellow); 
} private void radioFamilyOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontFamily = initFontFamily; 
} private void radioFamilyTimes_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontFamily = new FontFamily("Times New Roman"); 
} private void radioFamilyWingDings_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontFamily = new FontFamily("WingDings"); 
} private void radioSizeOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontSize = initFontSize; 
} private void radioSizeTen_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontSize = 10; 
} private void radioSizeTwelve_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontSize = 12; 
} private void radioStyleOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontStyle = initFontStyle; 
} private void radioStyleItalic_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontStyle = System.Windows.FontStyles.Italic; 
} private void radioWeightOriginal_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontWeight = initFontWeight; 
} private void radioWeightBold_CheckedChanged(object sender, EventArgs e) { wpfAddressCtrl.MyControl_FontWeight = FontWeights.Bold; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="486369a9-606a-4a3b-b086-a06f2119c7b0.xaml">Walkthrough: Hosting a Windows Presentation Foundation Composite Control in Windows Forms</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>ElementHost
      <LineBreak/>WindowsFormsHost
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

