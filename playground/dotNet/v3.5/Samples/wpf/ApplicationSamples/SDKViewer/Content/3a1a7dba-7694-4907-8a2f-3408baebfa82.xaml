<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_3a1a7dba_7694_4907_8a2f_3408baebfa82"
  Tag     ="Animate a Double by Using Key Frames"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Animate a Double by Using Key Frames</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to animate the value of a Double property by using key frames. 
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following example moves a rectangle across a screen. The example uses the DoubleAnimationUsingKeyFrames class to animate the X property of a TranslateTransform applied to a Rectangle. This animation, which repeats indefinitely, uses three key frames in the following manner:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>During the first three seconds, uses an instance of the LinearDoubleKeyFrame class to move the rectangle along a path at a steady rate from its starting position to the 500 position. Linear key frames like <Run FontWeight="Bold">LinearDoubleKeyFrame</Run>
 create a smooth linear transition between values.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>At the end of the fourth second, uses an instance of the DiscreteDoubleKeyFrame class to suddenly move the rectangle to the next position. Discrete key frames like <Run FontWeight="Bold">DiscreteDoubleKeyFrame</Run>
 create sudden jumps between values. In this example, the rectangle is at the starting position and then suddenly appears at the 500 position.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In the final two seconds, uses an instance of the SplineDoubleKeyFrame class to move the rectangle back to its starting position. <Run>Spline</Run>
 key frames like <Run FontWeight="Bold">SplineDoubleKeyFrame</Run>
 create a variable transition between values according to the value of the KeySpline property. In this example, the rectangle begins by moving slowly and then speeds up exponentially toward the end of the time segment.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph/>
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Shapes; 
using System.Windows.Media.Animation; 
using System.Windows.Media; 
namespace Microsoft.Samples.KeyFrameExamples { /// 
&lt;summary> /// This example shows how to use the DoubleAnimationUsingKeyFrames class to /// animate the position of an object. /// Key frame animations enable you to create complex animations /// by specifying multiple destination values /// and controlling the animation's interpolation method. /// 
&lt;/summary> public class AltDoubleAnimationUsingKeyFramesExample : Page { public AltDoubleAnimationUsingKeyFramesExample() { Title = "DoubleAnimationUsingKeyFrames Example"; 
Background = Brushes.White; 
Margin = new Thickness(20); 
// Create a NameScope for this page so that // Storyboards can be used. NameScope.SetNameScope(this, new NameScope()); 
// Create a rectangle. Rectangle aRectangle = new Rectangle(); 
aRectangle.Width = 100; 
aRectangle.Height = 100; 
aRectangle.Stroke = Brushes.Black; 
aRectangle.StrokeThickness = 5; 
// Create a Canvas to contain and // position the rectangle. Canvas containerCanvas = new Canvas(); 
containerCanvas.Width = 610; 
containerCanvas.Height = 300; 
containerCanvas.Children.Add(aRectangle); 
Canvas.SetTop(aRectangle, 100); 
Canvas.SetLeft(aRectangle, 10); 
// Create a TranslateTransform to // move the rectangle. TranslateTransform animatedTranslateTransform = new TranslateTransform(); 
aRectangle.RenderTransform = animatedTranslateTransform; 
// Assign the TranslateTransform a name so that // it can be targeted by a Storyboard. this.RegisterName( "AnimatedTranslateTransform", animatedTranslateTransform); 
// Create a DoubleAnimationUsingKeyFrames to // animate the TranslateTransform. DoubleAnimationUsingKeyFrames translationAnimation = new DoubleAnimationUsingKeyFrames(); 
translationAnimation.Duration = TimeSpan.FromSeconds(6); 
// Animate from the starting position to 500 // over the first second using linear // interpolation. translationAnimation.KeyFrames.Add( new LinearDoubleKeyFrame( 500, // Target value (KeyValue) KeyTime.FromTimeSpan(TimeSpan.FromSeconds(3))) // KeyTime ); 
// Animate from 500 (the value of the previous key frame) // to 400 at 4 seconds using discrete interpolation. // Because the interpolation is discrete, the rectangle will appear // to "jump" from 500 to 400. translationAnimation.KeyFrames.Add( new DiscreteDoubleKeyFrame( 400, // Target value (KeyValue) KeyTime.FromTimeSpan(TimeSpan.FromSeconds(4))) // KeyTime ); 
// Animate from 400 (the value of the previous key frame) to 0 // over two seconds, starting at 4 seconds (the key time of the // last key frame) and ending at 6 seconds. translationAnimation.KeyFrames.Add( new SplineDoubleKeyFrame( 0, // Target value (KeyValue) KeyTime.FromTimeSpan(TimeSpan.FromSeconds(6)), // KeyTime new KeySpline(0.6,0.0,0.9,0.0) // KeySpline ) ); 
// Set the animation to repeat forever. translationAnimation.RepeatBehavior = RepeatBehavior.Forever; 
// Set the animation to target the X property // of the object named "AnimatedTranslateTransform." Storyboard.SetTargetName(translationAnimation, "AnimatedTranslateTransform"); 
Storyboard.SetTargetProperty( translationAnimation, new PropertyPath(TranslateTransform.XProperty)); 
// Create a storyboard to apply the animation. Storyboard translationStoryboard = new Storyboard(); 
translationStoryboard.Children.Add(translationAnimation); 
// Start the storyboard after the rectangle loads. aRectangle.Loaded += delegate(object sender, RoutedEventArgs e) { translationStoryboard.Begin(this); 
}; 
Content = containerCanvas; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_3a1a7dba_7694_4907_8a2f_3408baebfa82_0">
                <cc:SnippetViewer.SnippetText>
&lt;!-- This example shows how to use the DoubleAnimationUsingKeyFrames to animate the position of an object. Key frame animations enable you to create complex animations by specifying multiple destination values and controlling the animation's interpolation method. --> 
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="DoubleAnimationUsingKeyFrames Example" Background="White" Margin="20"> 
&lt;Canvas Width="610" Height="300"> 
&lt;!-- The position of this rectangle is animated using a key frame animation. --> 
&lt;Rectangle Canvas.Top="100" Canvas.Left="10" Height="100" Width="100" Stroke="Black" StrokeThickness="5"> 
&lt;Rectangle.RenderTransform> 
&lt;TranslateTransform x:Name="AnimatedTranslateTransform" /> 
&lt;/Rectangle.RenderTransform> 
&lt;Rectangle.Triggers> 
&lt;EventTrigger RoutedEvent="Rectangle.Loaded"> 
&lt;BeginStoryboard> 
&lt;Storyboard> 
&lt;!-- Animate the TranslateTransform.X property using 3 KeyFrames which animates the rectangle along a straight line. This animation repeats indefinitely. --> 
&lt;DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimatedTranslateTransform" Storyboard.TargetProperty="X" Duration="0:0:6" RepeatBehavior="Forever"> 
&lt;!-- Using a LinearDoubleKeyFrame, the rectangle moves steadily from its starting position to 500 over the first 3 seconds. --> 
&lt;LinearDoubleKeyFrame Value="500" KeyTime="0:0:3" /> 
&lt;!-- Using a DiscreteDoubleKeyFrame, the rectangle suddenly appears at 400 after the fourth second of the animation. --> 
&lt;DiscreteDoubleKeyFrame Value="400" KeyTime="0:0:4" /> 
&lt;!-- Using a SplineDoubleKeyFrame, the rectangle moves back to its starting point. The animation starts out slowly at first and then speeds up. This KeyFrame ends after the 6th second. --> 
&lt;SplineDoubleKeyFrame KeySpline="0.6,0.0 0.9,0.00" Value="0" KeyTime="0:0:6" /> 
&lt;/DoubleAnimationUsingKeyFrames> 
&lt;/Storyboard> 
&lt;/BeginStoryboard> 
&lt;/EventTrigger> 
&lt;/Rectangle.Triggers> 
&lt;/Rectangle> 
&lt;/Canvas> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample, see KeyFrame Animation Sample.
    </Paragraph>

    <Paragraph/>
    <Paragraph>For consistency with other animation examples, the code versions of this example use a Storyboard object to apply the <Run FontWeight="Bold">DoubleAnimationUsingKeyFrames</Run>
. Alternatively, when applying a single animation in code, it's simpler to use the BeginAnimation method instead of using a <Run FontWeight="Bold">Storyboard</Run>
. For an example, see <Hyperlink NavigateUri="d411db70-4df7-487d-82bc-95a7c1b2e7f8.xaml">How to: Apply a Local (Non-Storyboard) Animation to a Property</Hyperlink>
.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>DoubleAnimationUsingKeyFrames
      <LineBreak/>Rectangle
      <LineBreak/>LinearDoubleKeyFrame
      <LineBreak/>DiscreteDoubleKeyFrame
      <LineBreak/>SplineDoubleKeyFrame
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="10028f97-bb63-41fc-b8ad-663dac7ea203.xaml">Key-Frame Animations Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="a5f9ab1a-d14c-4816-8540-3c5b8c8143d5.xaml">Key-Frame Animation How-to Topics</Hyperlink>

      <LineBreak/>KeyFrame Animation Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Animate a Double by Using Key Frames to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

