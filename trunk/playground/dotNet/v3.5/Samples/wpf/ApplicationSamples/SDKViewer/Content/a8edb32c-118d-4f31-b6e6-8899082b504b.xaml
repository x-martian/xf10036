<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_a8edb32c_118d_4f31_b6e6_8899082b504b"
  Tag     ="ToolBar Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>ToolBar Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>ToolBar controls are containers for a group of commands or controls which are typically related in their function. A <Run FontWeight="Bold">ToolBar</Run>
 usually contains buttons which invoke commands. This topic introduces the <Run FontWeight="Bold">ToolBar</Run>
 class and provides examples of how to use it in both Extensible Application Markup Language (XAML) and C#.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="ToolBarControl">ToolBar Control</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Creating_ToolBars">Creating ToolBars</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="ToolBars_with_Overflow_Items">ToolBars with Overflow Items</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="ToolBar_Styling">ToolBar Styling</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">ToolBar Control
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">ToolBar</Run>
 control takes its name from the bar-like arrangement of buttons or other controls into a single row or column. WPF <Run FontWeight="Bold">ToolBar</Run>
 controls provide an overflow mechanism which places any items that do not fit naturally within a size-constrained <Run FontWeight="Bold">ToolBar</Run>
 into a special overflow area. Also, WPF <Run FontWeight="Bold">ToolBar</Run>
 controls are usually used with the related ToolBarTray control. <Run FontWeight="Bold">ToolBar</Run>
 trays provide special layout behavior as well as support for user-initiated sizing and arranging of toolbars. The following graphics depict horizontal and vertical <Run FontWeight="Bold">ToolBar</Run>
 controls.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Horizontal Toolbar</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Vertical Toolbar</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="22">Creating ToolBars
    </Paragraph>

    <Paragraph>The following example shows how to create <Run FontWeight="Bold">ToolBar</Run>
 controls in Extensible Application Markup Language (XAML). Notice that the <Run FontWeight="Bold">ToolBar</Run>
 is inside a <Run FontWeight="Bold">ToolBarTray</Run>
. The Band and BandIndex properties are used to position the <Run FontWeight="Bold">ToolBar</Run>
 in the <Run FontWeight="Bold">ToolBarTray</Run>
. <Run FontWeight="Bold">Band</Run>
 indicates the position in which the <Run FontWeight="Bold">ToolBar</Run>
 is placed within its parent <Run FontWeight="Bold">ToolBarTray</Run>
. <Run FontWeight="Bold">BandIndex</Run>
 indicates the order in which the <Run FontWeight="Bold">ToolBar</Run>
 is placed within its band.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;ToolBarTray Background="White"> 
&lt;ToolBar Band="1" BandIndex="1"> 
&lt;Button>
&lt;Image Source="toolbargraphics\new.bmp" />
&lt;/Button> 
&lt;Button>
&lt;Image Source="toolbargraphics\open.bmp" />
&lt;/Button> 
&lt;Button>
&lt;Image Source="toolbargraphics\save.bmp" />
&lt;/Button> 
&lt;Separator/> 
&lt;Button>
&lt;Image Source="toolbargraphics\cut.bmp" />
&lt;/Button> 
&lt;Button>
&lt;Image Source="toolbargraphics\copy.bmp" />
&lt;/Button> 
&lt;Button>
&lt;Image Source="toolbargraphics\paste.bmp" />
&lt;/Button> 
&lt;Separator/> 
&lt;Button>
&lt;Image Source="toolbargraphics\print.bmp" />
&lt;/Button> 
&lt;Button>
&lt;Image Source="toolbargraphics\preview.bmp" />
&lt;/Button> 
&lt;/ToolBar> 
&lt;/ToolBarTray> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample see Toolbar Sample.
    </Paragraph>

    <Paragraph>The following example shows how to generate a <Run FontWeight="Bold">ToolBar</Run>
 with C#.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>tbartray = new ToolBarTray(); 
tbar = new ToolBar(); 
btn = new Button(); 
btn.Content = "File"; 
tbar.Items.Add(btn); 
btn1 = new Button(); 
btn1.Content = "Edit"; 
tbar.Items.Add(btn1); 
tbar1 = new ToolBar(); 
btn2 = new Button(); 
btn2.Content = "Format"; 
tbar1.Items.Add(btn2); 
btn3 = new Button(); 
btn3.Content = "View"; 
tbar1.Items.Add(btn3); 
btn4 = new Button(); 
btn4.Content = "Help"; 
tbar1.Items.Add(btn4); 
tbartray.ToolBars.Add(tbar); 
tbartray.ToolBars.Add(tbar1); 
spanel2.Children.Add(tbartray); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample see Creating Controls Sample.
    </Paragraph>

    <Paragraph FontSize="22">ToolBars with Overflow Items
    </Paragraph>

    <Paragraph>Often <Run FontWeight="Bold">ToolBar</Run>
 controls contain more items than can fit into the toolbar's size, when this happens the <Run FontWeight="Bold">ToolBar</Run>
 displays an overflow button. To see the overflow items a user clicks the overflow button and the items are shown in a pop-up window below the <Run FontWeight="Bold">ToolBar</Run>
. The following graphic shows a <Run FontWeight="Bold">ToolBar</Run>
 with overflow items. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Toolbar with Overflow Items</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="22">ToolBar Styling
    </Paragraph>

    <Paragraph>Control styling enables you to dramatically change the appearance and behavior of <Run FontWeight="Bold">ToolBar</Run>
 controls without having to write a custom control. In addition to setting visual properties, you can also apply styles to individual parts of a control, change the behavior of parts of the control through properties, add additional parts, or change the layout of a control. The following examples demonstrate several ways to add styles to <Run FontWeight="Bold">ToolBar</Run>
 controls.
    </Paragraph>

    <Paragraph>The first code example defines a style called <Run FontStyle="italic">TBButton</Run>
 that shows how to style buttons that are contained in the <Run FontWeight="Bold">ToolBar</Run>
. The code assigns a height and width to the buttons and makes the background blue.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Style x:Key="TBButton" TargetType="{x:Type Button}"> 
&lt;Setter Property = "Width" Value= "30"/> 
&lt;Setter Property = "Height" Value= "30"/> 
&lt;Setter Property = "Background" Value= "LightBlue"/> 
&lt;/Style> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example uses triggers to change the appearance of a <Run FontWeight="Bold">ToolBar</Run>
 in response to events raised on the <Run FontWeight="Bold">ToolBar</Run>
. When you move the mouse over the <Run FontWeight="Bold">ToolBar</Run>
 its appearance changes.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Style x:Key="Triggers" TargetType="{x:Type ToolBar}"> 
&lt;Style.Triggers> 
&lt;Trigger Property="Button.IsMouseOver" Value="true"> 
&lt;Setter Property = "Background" Value="Red"/> 
&lt;Setter Property = "BorderBrush" Value="Green"/> 
&lt;/Trigger> 
&lt;/Style.Triggers> 
&lt;/Style> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample see ToolBar Styles Sample.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="3f66336e-e34e-4e60-9915-439a0b30e2e1.xaml">How to: Create a ToolBar</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>WPF Controls Gallery Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about ToolBar Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

