<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Interpolation Methods" Name="myRootElement" x:Class="InterpolationMethods.Page1" Loaded="OnLoaded">
    <Page.Resources>
        <Style x:Key="itemHeaderStyler">
            <Setter Property="ListBoxItem.Margin" Value="0,2,0,5" />
            <Setter Property="ListBoxItem.Padding" Value="2" />
            <Setter Property="ListBoxItem.FontFamily" Value="Verdana" />
            <Setter Property="ListBoxItem.FontWeight" Value="Bold" />
            <Setter Property="ListBoxItem.FontSize" Value="12" />
        </Style>
        <Style x:Key="imageStyler">
            <Setter Property="TextBlock.Margin" Value="15" />
        </Style>
        <Style x:Key="HeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="TabStyle">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabStyle2">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="TabItem.Foreground" Value="Black" />
        </Style>
        <Style x:Key="SubHeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="16" />
            <Setter Property="TextBlock.Foreground" Value="DarkSlateBlue" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="DisStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="8" />
            <Setter Property="TextBlock.Foreground" Value="Gray" />
            <Setter Property="TextBlock.Margin" Value="5,0,5,0" />
        </Style>
        <Style x:Key="mainContentStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="5,10,5,10" />
        </Style>
        <Style x:Key="tocStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.Margin" Value="0" />
        </Style>
        <Style x:Key="CodeSnippetParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Courier New" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10,0,10,0" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="noteParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="TCStyle">
            <Setter Property="TabControl.Margin" Value="10" />
        </Style>
    </Page.Resources>
    <TabControl MinHeight="500" MaxHeight="700" MinWidth="400" Style="{StaticResource TCStyle}">
        <TabItem Style="{StaticResource TabStyle}" Header="Interpolation Methods Sample" IsSelected="true">
            <StackPanel>
                <TextBlock Style="{StaticResource HeaderStyle}">Interpolation Methods Sample</TextBlock>
                <TextBlock Style="{StaticResource mainContentStyle}">This example demonstrates different methods of moving between two keyframes in an animation.</TextBlock>
            </StackPanel>
        </TabItem>
        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
            <ScrollViewer>
                <TextBlock Name="xamlCheck" Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
<![CDATA[<StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" Margin="20">
    <Canvas Width="600" Height="300">
    
      <!-- Mark the key frame points for illustrative purposes. -->
      <Rectangle
        Style="{StaticResource MyMarkerRectangleStyle}"
        Canvas.Left="10" Canvas.Top="50" />
      <TextBlock Canvas.Left="10">Starting Value</TextBlock>
      
      <Rectangle
        Style="{StaticResource MyMarkerRectangleStyle}"
        Canvas.Left="500" Canvas.Top="50" />
        
      <TextBlock Canvas.Left="500">1. Value = 500 <LineBreak /> KeyTime = 0:0:7</TextBlock>
      <Rectangle Style="{StaticResource MyMarkerRectangleStyle}"
        Canvas.Left="200" Canvas.Top="50"/>
      <TextBlock Canvas.Left="200">2. Value = 200 <LineBreak /> KeyTime = 0:0:10</TextBlock>
      <Rectangle Style="{StaticResource MyMarkerRectangleStyle}"
        Canvas.Left="350" Canvas.Top="50" />
      <TextBlock Canvas.Left="350">3. Value = 350 <LineBreak /> KeyTime = 0:0:15</TextBlock>


      <!-- This rectangle is animated using a key frame animation
           with linear interpolation. -->
      <Rectangle Name="linearKeyFrameRectangle"
        Canvas.Top="50"
        Canvas.Left="10"
        Height="50"
        Width="50"
        Stroke="Black"
        StrokeThickness="5">
        <Rectangle.Fill>
          <SolidColorBrush Color="Blue" Opacity="0.4" />
        </Rectangle.Fill>    
      </Rectangle>

      <!-- This rectangle is animated using a key frame animation
           with splined interpolation. -->
      <Rectangle Name="splineKeyFrameRectangle"
        Canvas.Top="110"
        Canvas.Left="10"
        Height="50"
        Width="50"
        Stroke="Black"
        StrokeThickness="5">
        <Rectangle.Fill>
          <SolidColorBrush Color="Purple" Opacity="0.4" />
          </Rectangle.Fill>
      </Rectangle>

      <!-- This rectangle is animated using a key frame animation
           with discrete interpolation. -->
      <Rectangle Name="discreteKeyFrameRectangle"
        Canvas.Top="170"
        Canvas.Left="10"
        Height="50"
        Width="50"
        Stroke="Black"
        StrokeThickness="5">
        <Rectangle.Fill>
          <SolidColorBrush Color="Lime" Opacity="0.4" />
        </Rectangle.Fill>
      </Rectangle>

      <!-- This rectangle is animated using a key frame animation
           with a combination of interpolation methods. -->
      <Rectangle Name="combinationKeyFrameRectangle"
        Canvas.Top="230"
        Canvas.Left="10"
        Height="50"
        Width="50"
        Stroke="Black"
        StrokeThickness="5">
        <Rectangle.Fill>
          <SolidColorBrush Color="Orange" Opacity="0.4" />
        </Rectangle.Fill>
      </Rectangle>
      
      
      
      
    </Canvas>
    


    <!-- These buttons are used to restart, pause, resume, and stop the animations. -->
    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
      <StackPanel.Triggers>
        <EventTrigger SourceName="restartButton"
          RoutedEvent="Button.Click">
          <BeginStoryboard Name="myBeginStoryboard">
            <Storyboard>
              <!-- Animates the position of a Rectangle from a base value of 10
                  to 500, 200, and then 350 using linear interpolation. -->
              <DoubleAnimationUsingKeyFrames 
                Storyboard.TargetName="linearKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)"
                Duration="0:0:15" FillBehavior="HoldEnd">
                <DoubleAnimationUsingKeyFrames.KeyFrames>
                  <LinearDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                  <LinearDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                  <LinearDoubleKeyFrame Value="350" KeyTime="0:0:15" />
                </DoubleAnimationUsingKeyFrames.KeyFrames>
              </DoubleAnimationUsingKeyFrames>
    
              <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using splined interpolation. -->
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="splineKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" 
                Duration="0:0:15" FillBehavior="HoldEnd">
                <DoubleAnimationUsingKeyFrames.KeyFrames>
                  <SplineDoubleKeyFrame Value="500" KeyTime="0:0:7" KeySpline="0.25,0.5 0.75,1" /><!--IB: was 7.5-->
                  <SplineDoubleKeyFrame Value="200" KeyTime="0:0:10"  KeySpline="0.25,0.5 0.75,1" />
                  <SplineDoubleKeyFrame Value="350" KeyTime="0:0:15"  KeySpline="0.25,0.5 0.75,1" />
                </DoubleAnimationUsingKeyFrames.KeyFrames>
              </DoubleAnimationUsingKeyFrames>
    
              <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using discrete interpolation. -->
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="discreteKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                <DoubleAnimationUsingKeyFrames.KeyFrames>
                  <DiscreteDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                  <DiscreteDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                  <DiscreteDoubleKeyFrame Value="350" KeyTime="0:0:15" />
                </DoubleAnimationUsingKeyFrames.KeyFrames>
              </DoubleAnimationUsingKeyFrames>

              <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using a variety of interpolation methods. -->
              <DoubleAnimationUsingKeyFrames 
                Storyboard.TargetName="combinationKeyFrameRectangle" 
                Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                <DoubleAnimationUsingKeyFrames.KeyFrames>
                  <DiscreteDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                  <LinearDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                  <SplineDoubleKeyFrame Value="350" KeyTime="0:0:15"  KeySpline="0.25,0.5 0.75,1" />
                </DoubleAnimationUsingKeyFrames.KeyFrames>
              </DoubleAnimationUsingKeyFrames>    

            </Storyboard>                             
          </BeginStoryboard>
        </EventTrigger>
                  
        <EventTrigger 
          SourceName="pauseButton"
          RoutedEvent="Button.Click">
          <PauseStoryboard BeginStoryboardName="myBeginStoryboard"  />
        </EventTrigger>   
        <EventTrigger 
          SourceName="resumeButton"
          RoutedEvent="Button.Click">
          <ResumeStoryboard BeginStoryboardName="myBeginStoryboard"  />
        </EventTrigger>    
        <EventTrigger 
          SourceName="skipToEndButton"
          RoutedEvent="Button.Click">
          <SkipStoryboardToFill BeginStoryboardName="myBeginStoryboard"  />
        </EventTrigger>         
        <EventTrigger 
          SourceName="stopButton"
          RoutedEvent="Button.Click">
          <StopStoryboard BeginStoryboardName="myBeginStoryboard"  />
        </EventTrigger>           
      </StackPanel.Triggers>
      
      <Button Name="restartButton">Restart</Button>
      <Button Name="pauseButton">Pause</Button>
      <Button Name="resumeButton">Resume</Button>
      <Button Name="skipToEndButton">Skip To End</Button>
      <Button Name="stopButton">Stop</Button>
    </StackPanel>
</StackPanel>]]>          
          
          </TextBlock>
            </ScrollViewer>
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="C#">
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET">
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#">
        </TabItem>
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET">
        </TabItem>
        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++">
        </TabItem>
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">
            <!-- Demonstrates the DoubleAnimationUsingKeyFrames class. DoubleAnimationUsingKeyFrames objects are
     used to animate the position of rectangles across a canvas. -->
            <Canvas>
                <Canvas.Resources>
                    <Style x:Key="MyMarkerRectangleStyle">
                        <Setter Property="Rectangle.Height" Value="230" />
                        <Setter Property="Rectangle.Width" Value="50" />
                        <Setter Property="Rectangle.Fill">
                            <Setter.Value>
                                <SolidColorBrush Color="Gray" Opacity="0.25" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Canvas.Resources>
                <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" Margin="20">
                    <Canvas Width="600" Height="300">
                        <!-- Mark the key frame points for illustrative purposes. -->
                        <Rectangle Style="{StaticResource MyMarkerRectangleStyle}" Canvas.Left="10" Canvas.Top="50" />
                        <TextBlock Canvas.Left="10">Starting Value</TextBlock>
                        <Rectangle Style="{StaticResource MyMarkerRectangleStyle}" Canvas.Left="500" Canvas.Top="50" />
                        <TextBlock Canvas.Left="500">1. Value = 500 <LineBreak /> KeyTime = 0:0:7</TextBlock>
                        <Rectangle Style="{StaticResource MyMarkerRectangleStyle}" Canvas.Left="200" Canvas.Top="50" />
                        <TextBlock Canvas.Left="200">2. Value = 200 <LineBreak /> KeyTime = 0:0:10</TextBlock>
                        <Rectangle Style="{StaticResource MyMarkerRectangleStyle}" Canvas.Left="350" Canvas.Top="50" />
                        <TextBlock Canvas.Left="350">3. Value = 350 <LineBreak /> KeyTime = 0:0:15</TextBlock>
                        <!-- This rectangle is animated using a key frame animation
           with linear interpolation. -->
                        <Rectangle Name="linearKeyFrameRectangle" Canvas.Top="50" Canvas.Left="10" Height="50" Width="50" Stroke="Black" StrokeThickness="5">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="Blue" Opacity="0.4" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <!-- This rectangle is animated using a key frame animation
           with splined interpolation. -->
                        <Rectangle Name="splineKeyFrameRectangle" Canvas.Top="110" Canvas.Left="10" Height="50" Width="50" Stroke="Black" StrokeThickness="5">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="Purple" Opacity="0.4" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <!-- This rectangle is animated using a key frame animation
           with discrete interpolation. -->
                        <Rectangle Name="discreteKeyFrameRectangle" Canvas.Top="170" Canvas.Left="10" Height="50" Width="50" Stroke="Black" StrokeThickness="5">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="Lime" Opacity="0.4" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <!-- This rectangle is animated using a key frame animation
           with a combination of interpolation methods. -->
                        <Rectangle Name="combinationKeyFrameRectangle" Canvas.Top="230" Canvas.Left="10" Height="50" Width="50" Stroke="Black" StrokeThickness="5">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="Orange" Opacity="0.4" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Canvas>
                    <!-- These buttons are used to restart, pause, resume, and stop the animations. -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <StackPanel.Triggers>
                            <EventTrigger SourceName="restartButton" RoutedEvent="Button.Click">
                                <BeginStoryboard Name="myBeginStoryboard">
                                    <Storyboard>
                                        <!-- Animates the position of a Rectangle from a base value of 10
                  to 500, 200, and then 350 using linear interpolation. -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="linearKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames.KeyFrames>
                                                <LinearDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                                                <LinearDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                                                <LinearDoubleKeyFrame Value="350" KeyTime="0:0:15" />
                                            </DoubleAnimationUsingKeyFrames.KeyFrames>
                                        </DoubleAnimationUsingKeyFrames>
                                        <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using splined interpolation. -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="splineKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames.KeyFrames>
                                                <SplineDoubleKeyFrame Value="500" KeyTime="0:0:7" KeySpline="0.25,0.5 0.75,1" />
                                                <SplineDoubleKeyFrame Value="200" KeyTime="0:0:10" KeySpline="0.25,0.5 0.75,1" />
                                                <SplineDoubleKeyFrame Value="350" KeyTime="0:0:15" KeySpline="0.25,0.5 0.75,1" />
                                            </DoubleAnimationUsingKeyFrames.KeyFrames>
                                        </DoubleAnimationUsingKeyFrames>
                                        <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using discrete interpolation. -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="discreteKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                                                <DiscreteDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                                                <DiscreteDoubleKeyFrame Value="350" KeyTime="0:0:15" />
                                            </DoubleAnimationUsingKeyFrames.KeyFrames>
                                        </DoubleAnimationUsingKeyFrames>
                                        <!-- Animates the position of a Rectangle from a base value of 10
                   to 500, 200, and then 350 using a variety of interpolation methods. -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="combinationKeyFrameRectangle" Storyboard.TargetProperty="(Canvas.Left)" Duration="0:0:15" FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteDoubleKeyFrame Value="500" KeyTime="0:0:7" />
                                                <LinearDoubleKeyFrame Value="200" KeyTime="0:0:10" />
                                                <SplineDoubleKeyFrame Value="350" KeyTime="0:0:15" KeySpline="0.25,0.5 0.75,1" />
                                            </DoubleAnimationUsingKeyFrames.KeyFrames>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger SourceName="pauseButton" RoutedEvent="Button.Click">
                                <PauseStoryboard BeginStoryboardName="myBeginStoryboard" />
                            </EventTrigger>
                            <EventTrigger SourceName="resumeButton" RoutedEvent="Button.Click">
                                <ResumeStoryboard BeginStoryboardName="myBeginStoryboard" />
                            </EventTrigger>
                            <EventTrigger SourceName="skipToEndButton" RoutedEvent="Button.Click">
                                <SkipStoryboardToFill BeginStoryboardName="myBeginStoryboard" />
                            </EventTrigger>
                            <EventTrigger SourceName="stopButton" RoutedEvent="Button.Click">
                                <StopStoryboard BeginStoryboardName="myBeginStoryboard" />
                            </EventTrigger>
                        </StackPanel.Triggers>
                        <Button Name="restartButton">Restart</Button>
                        <Button Name="pauseButton">Pause</Button>
                        <Button Name="resumeButton">Resume</Button>
                        <Button Name="skipToEndButton">Skip To End</Button>
                        <Button Name="stopButton">Stop</Button>
                    </StackPanel>
                </StackPanel>
            </Canvas>
        </TabItem>
    </TabControl>
</Page>