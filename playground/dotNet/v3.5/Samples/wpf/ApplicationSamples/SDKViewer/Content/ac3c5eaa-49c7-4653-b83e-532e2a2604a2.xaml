<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_ac3c5eaa_49c7_4653_b83e_532e2a2604a2"
  Tag     ="Expose the Content of a Table Using UI Automation"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Expose the Content of a Table Using UI Automation</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic shows how Microsoft UI Automation can be used to expose the content and intrinsic properties of each cell within a tabular control.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following code example demonstrates how to obtain an automation element that represents the content of a table cell; 
cell properties such as row and column indices, row and column spans, and row and column header information are also obtained. This particular example uses a focus change event handler to simulate keyboard traversal of a tabular control that implements UI Automation. Information for each table item is exposed on a focus change event.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Since focus changes are global desktop events, focus change events outside the table should be filtered. See the TrackFocus Sample for a related implementation.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>''' ------------------------------------------------------------------- ''' 
&lt;summary> ''' Starts the target application and returns the automation element ''' obtained from the targets window handle. ''' 
&lt;/summary> ''' 
&lt;param name="exe"> ''' The target application. ''' 
&lt;/param> ''' 
&lt;param name="filename"> ''' The text file to be opened in the target application ''' 
&lt;/param> ''' 
&lt;returns> ''' An automation element representing the target application. ''' 
&lt;/returns> ''' ------------------------------------------------------------------- Private Function StartTarget(ByVal exe As String, ByVal filename As String) As AutomationElement ' Start text editor and load with a text file. Dim p As Process = Process.Start(exe, filename) ' targetApp --> the root automation element Dim targetApp As AutomationElement = _ AutomationElement.FromHandle(p.MainWindowHandle) Return targetApp End Function ... ''' ------------------------------------------------------------------- ''' 
&lt;summary> ''' Obtain the table control of interest from the target application. ''' 
&lt;/summary> ''' 
&lt;param name="targetApp"> ''' The target application. ''' 
&lt;/param> ''' 
&lt;returns> ''' An automation element representing a table control. ''' 
&lt;/returns> ''' ------------------------------------------------------------------- Private Function GetTableElement(ByVal targetApp As AutomationElement) As AutomationElement ' The control type we're looking for; 
in this case 'Document' Dim cond1 As PropertyCondition = _ New PropertyCondition( _ AutomationElement.ControlTypeProperty, _ ControlType.Table) ' The control pattern of interest; 
in this case 'TextPattern'. Dim cond2 As PropertyCondition = _ New PropertyCondition( _ AutomationElement.IsTablePatternAvailableProperty, _ True) Dim tableCondition As AndCondition = New AndCondition(cond1, cond2) Dim targetTableElement As AutomationElement = _ targetApp.FindFirst(TreeScope.Descendants, tableCondition) ' If targetTableElement is null then a suitable table control ' was not found. Return targetTableElement End Function ... '''-------------------------------------------------------------------- ''' 
&lt;summary> ''' Obtains a TableItemPattern control pattern from an ''' automation element. ''' 
&lt;/summary> ''' 
&lt;param name="targetControl"> ''' The automation element of interest. ''' 
&lt;/param> ''' 
&lt;returns> ''' A TableItemPattern object. ''' 
&lt;/returns> '''-------------------------------------------------------------------- Private Function GetTableItemPattern( _ ByVal targetControl As AutomationElement) As TableItemPattern Dim tableItemPattern As TableItemPattern = Nothing Try tableItemPattern = DirectCast( _ targetControl.GetCurrentPattern(tableItemPattern.Pattern), TableItemPattern) Catch exc As InvalidOperationException ' Object doesn't support the ' GridPattern control pattern Return Nothing End Try Return tableItemPattern End Function 'GetTableItemPattern ... '''-------------------------------------------------------------------- ''' 
&lt;summary> ''' Obtains a TablePattern control pattern from an ''' automation element. ''' 
&lt;/summary> ''' 
&lt;param name="targetControl"> ''' The automation element of interest. ''' 
&lt;/param> ''' 
&lt;returns> ''' A TablePattern object. ''' 
&lt;/returns> '''-------------------------------------------------------------------- Private Function GetTablePattern( _ ByVal targetControl As AutomationElement) As TablePattern Dim tablePattern As TablePattern = Nothing Try tablePattern = DirectCast( _ targetControl.GetCurrentPattern(tablePattern.Pattern), _ TablePattern) Catch exc As InvalidOperationException ' Object doesn't support the ' TablePattern control pattern Return Nothing End Try Return tablePattern End Function 'GetTablePattern ... '''-------------------------------------------------------------------- ''' 
&lt;summary> ''' Set up table item event listeners. ''' 
&lt;/summary> ''' 
&lt;remarks> ''' The event listener is essentially a focus change listener. ''' Since this is a global desktop listener, a filter would be required ''' to ignore focus change events outside the table. ''' 
&lt;/remarks> '''-------------------------------------------------------------------- Private Sub SetTableItemEventListeners( _ ByVal targetControl As AutomationElement) Dim tableItemFocusChangedListener As AutomationFocusChangedEventHandler = _ AddressOf OnTableItemFocusChange Automation.AddAutomationFocusChangedEventHandler( _ tableItemFocusChangedListener) End Sub 'SetTableItemEventListeners ... '''-------------------------------------------------------------------- ''' 
&lt;summary> ''' Event handler for table item focus change. ''' Can be used to track traversal of individual table items ''' within a table. ''' 
&lt;/summary> ''' 
&lt;param name="src">Object that raised the event.
&lt;/param> ''' 
&lt;param name="e">Event arguments.
&lt;/param> '''-------------------------------------------------------------------- Private Sub OnTableItemFocusChange( _ ByVal src As Object, ByVal e As AutomationFocusChangedEventArgs) ' Make sure the element still exists. Elements such as tooltips ' can disappear before the event is processed. Dim sourceElement As AutomationElement Try sourceElement = DirectCast(src, AutomationElement) Catch exc As ElementNotAvailableException Return End Try Dim tableItemPattern As TableItemPattern = _ GetTableItemPattern(sourceElement) If tableItemPattern Is Nothing Then Return End If Dim tablePattern As TablePattern = _ GetTablePattern(tableItemPattern.Current.ContainingGrid) If tablePattern Is Nothing Then Return End If Dim tableItem As AutomationElement = Nothing Try tableItem = tablePattern.GetItem( _ tableItemPattern.Current.Row, tableItemPattern.Current.Column) Catch exc As ArgumentOutOfRangeException ' If the requested row coordinate is larger than the RowCount ' or the column coordinate is larger than the ColumnCount. ' -- OR -- ' If either of the requested row or column coordinates ' are less than zero. ' TO DO: error handling. End Try ' Further event processing can be done at this point. ' For the purposes of this sample we can just record item properties. Dim controlType As String = _ tableItem.Current.ControlType.LocalizedControlType Dim columnHeaders As AutomationElement() = _ tableItemPattern.Current.GetColumnHeaderItems() Dim rowHeaders As AutomationElement() = _ tableItemPattern.Current.GetRowHeaderItems() Dim itemRow As Integer = tableItemPattern.Current.Row Dim itemColumn As Integer = tableItemPattern.Current.Column Dim itemRowSpan As Integer = tableItemPattern.Current.RowSpan Dim itemColumnSpan As Integer = tableItemPattern.Current.ColumnSpan End Sub 'OnTableItemFocusChange '''-------------------------------------------------------------------- ''' 
&lt;summary> ''' Handles our application shutdown. ''' 
&lt;/summary> ''' 
&lt;param name="args">Event arguments.
&lt;/param> '''-------------------------------------------------------------------- Protected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) Automation.RemoveAllEventHandlers() MyBase.OnExit(args) End Sub 'OnExit </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>/// ------------------------------------------------------------------- /// 
&lt;summary> /// Starts the target application and returns the automation element /// obtained from the targets window handle. /// 
&lt;/summary> /// 
&lt;param name="exe"> /// The target application. /// 
&lt;/param> /// 
&lt;param name="filename"> /// The text file to be opened in the target application /// 
&lt;/param> /// 
&lt;returns> /// An automation element representing the target application. /// 
&lt;/returns> /// ------------------------------------------------------------------- private AutomationElement StartTarget(string exe, string filename) { // Start text editor and load with a text file. Process p = Process.Start(exe, filename); 
// targetApp --> the root automation element AutomationElement targetApp = AutomationElement.FromHandle(p.MainWindowHandle); 
return targetApp; 
} ... /// ------------------------------------------------------------------- /// 
&lt;summary> /// Obtain the table control of interest from the target application. /// 
&lt;/summary> /// 
&lt;param name="targetApp"> /// The target application. /// 
&lt;/param> /// 
&lt;returns> /// An automation element representing a table control. /// 
&lt;/returns> /// ------------------------------------------------------------------- private AutomationElement GetTableElement(AutomationElement targetApp) { // The control type we're looking for; 
in this case 'Document' PropertyCondition cond1 = new PropertyCondition( AutomationElement.ControlTypeProperty, ControlType.Table); 
// The control pattern of interest; 
in this case 'TextPattern'. PropertyCondition cond2 = new PropertyCondition( AutomationElement.IsTablePatternAvailableProperty, true); 
AndCondition tableCondition = new AndCondition(cond1, cond2); 
AutomationElement targetTableElement = targetApp.FindFirst(TreeScope.Descendants, tableCondition); 
// If targetTableElement is null then a suitable table control // was not found. return targetTableElement; 
} ... ///-------------------------------------------------------------------- /// 
&lt;summary> /// Obtains a TableItemPattern control pattern from an /// automation element. /// 
&lt;/summary> /// 
&lt;param name="targetControl"> /// The automation element of interest. /// 
&lt;/param> /// 
&lt;returns> /// A TableItemPattern object. /// 
&lt;/returns> ///-------------------------------------------------------------------- private TableItemPattern GetTableItemPattern( AutomationElement targetControl) { TableItemPattern tableItemPattern = null; 
try { tableItemPattern = targetControl.GetCurrentPattern( TableItemPattern.Pattern) as TableItemPattern; 
} // Object doesn't support the // TableItemPattern control pattern catch (InvalidOperationException) { return null; 
} return tableItemPattern; 
} ... ///-------------------------------------------------------------------- /// 
&lt;summary> /// Obtains a TablePattern control pattern from an /// automation element. /// 
&lt;/summary> /// 
&lt;param name="targetControl"> /// The automation element of interest. /// 
&lt;/param> /// 
&lt;returns> /// A TablePattern object. /// 
&lt;/returns> ///-------------------------------------------------------------------- private TablePattern GetTablePattern( AutomationElement targetControl) { TablePattern tablePattern = null; 
try { tablePattern = targetControl.GetCurrentPattern( TablePattern.Pattern) as TablePattern; 
} // Object doesn't support the // TablePattern control pattern catch (InvalidOperationException) { return null; 
} return tablePattern; 
} ... ///-------------------------------------------------------------------- /// 
&lt;summary> /// Set up table item event listeners. /// 
&lt;/summary> /// 
&lt;remarks> /// The event listener is essentially a focus change listener. /// Since this is a global desktop listener, a filter would be required /// to ignore focus change events outside the table. /// 
&lt;/remarks> ///-------------------------------------------------------------------- private void SetTableItemEventListeners() { AutomationFocusChangedEventHandler tableItemFocusChangedListener = new AutomationFocusChangedEventHandler(OnTableItemFocusChange); 
Automation.AddAutomationFocusChangedEventHandler( tableItemFocusChangedListener); 
} ... ///-------------------------------------------------------------------- /// 
&lt;summary> /// Event handler for table item focus change. /// Can be used to track traversal of individual table items /// within a table. /// 
&lt;/summary> /// 
&lt;param name="src">Object that raised the event.
&lt;/param> /// 
&lt;param name="e">Event arguments.
&lt;/param> ///-------------------------------------------------------------------- private void OnTableItemFocusChange( object src, AutomationFocusChangedEventArgs e) { // Make sure the element still exists. Elements such as tooltips // can disappear before the event is processed. AutomationElement sourceElement; 
try { sourceElement = src as AutomationElement; 
} catch (ElementNotAvailableException) { return; 
} TableItemPattern tableItemPattern = GetTableItemPattern(sourceElement); 
if (tableItemPattern == null) { return; 
} TablePattern tablePattern = GetTablePattern(tableItemPattern.Current.ContainingGrid); 
if (tablePattern == null) { return; 
} AutomationElement tableItem = null; 
try { tableItem = tablePattern.GetItem( tableItemPattern.Current.Row, tableItemPattern.Current.Column); 
} catch (ArgumentOutOfRangeException) { // If the requested row coordinate is larger than the RowCount // or the column coordinate is larger than the ColumnCount. // -- OR -- // If either of the requested row or column coordinates // are less than zero. // TO DO: error handling. } // Further event processing can be done at this point. // For the purposes of this sample we can just record item properties. string controlType = tableItem.Current.ControlType.LocalizedControlType; 
AutomationElement[] columnHeaders = tableItemPattern.Current.GetColumnHeaderItems(); 
AutomationElement[] rowHeaders = tableItemPattern.Current.GetRowHeaderItems(); 
int itemRow = tableItemPattern.Current.Row; 
int itemColumn = tableItemPattern.Current.Column; 
int itemRowSpan = tableItemPattern.Current.RowSpan; 
int itemColumnSpan = tableItemPattern.Current.ColumnSpan; 
} ///-------------------------------------------------------------------- /// 
&lt;summary> /// Handles our application shutdown. /// 
&lt;/summary> /// 
&lt;param name="args">Event arguments.
&lt;/param> ///-------------------------------------------------------------------- protected override void OnExit(System.Windows.ExitEventArgs args) { Automation.RemoveAllEventHandlers(); 
base.OnExit(args); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="cc229b33-234b-469b-ad60-f0254f32d45d.xaml">UI Automation Control Patterns Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="571561d8-5f49-43a9-a054-87735194e013.xaml">UI Automation Control Patterns for Clients</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="880cd85c-aa8c-4fb5-9369-45491d34bb78.xaml">Implementing the UI Automation Table Control Pattern</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="ac178408-1485-436f-8d3e-eee3bf80cb24.xaml">Implementing the UI Automation TableItem Control Pattern</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="234d11a0-7ce7-4309-8989-2f4720e02f78.xaml">Implementing the UI Automation Grid Control Pattern</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="bffbae08-fe2a-42fd-ab84-f37187518916.xaml">Implementing the UI Automation GridItem Control Pattern</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Expose the Content of a Table Using UI Automation to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

