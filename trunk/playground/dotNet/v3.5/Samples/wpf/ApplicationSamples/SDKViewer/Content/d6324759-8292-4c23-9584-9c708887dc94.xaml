<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_d6324759_8292_4c23_9584_9c708887dc94"
  Tag     ="Remotely Survey the Status of Printers"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Remotely Survey the Status of Printers</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>At any given time at medium and large companies there may be multiple printers that are not working due to a paper jam or being out of paper or some other problematic situation. The rich set of printer properties exposed in the APIs of Microsoft .NET Framework version 3.0 provide a means for performing a rapid survey of the states of printers. 
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The major steps for creating this kind of utility are as follows.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Obtain a list of all print servers.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Loop through the servers to query their print queues. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Within each pass of the server loop, loop through all the server's queues and read each property that might indicate that the queue is not currently working.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The code below is a series of snippets. For the complete sample, see Survey Status of Printers Sample.
    </Paragraph>

    <Paragraph>For simplicity, this example assumes that there is a CRLF-delimited list of print servers. The variable <Run>fileOfPrintServers</Run>
 is a StreamReader object for this file. Since each server name is on its own line, any call of ReadLine gets the name of the next server and moves the <Run FontWeight="Bold">StreamReader</Run>
's cursor to the beginning of the next line. 
    </Paragraph>

    <Paragraph>Within the outer loop, the code creates a PrintServer object for the latest print server and specifies that the application is to have administrative rights to the server. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>If there are a lot of servers, you can improve performance by using the PrintServer constructors that only initialize the properties you are going to need. 
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The example then uses GetPrintQueues to create a collection of all of the server's queues and begins to loop through them. This inner loop contains a branching structure corresponding to the two ways of checking a printer's status:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>You can read the flags of the QueueStatus property which is of type PrintQueueStatus. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can read each relevant property such as IsOutOfPaper, and IsPaperJammed.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>This example demonstrates both methods, so the user was previously prompted as to which method to use and responded with "y" if he or she wanted to use the flags of the <Run FontWeight="Bold">QueueStatus</Run>
 property. See below for the details of the two methods.
    </Paragraph>

    <Paragraph>Finally, the results are presented to the user. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C++ </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Survey queue status for every queue on every print server System::String^ line; 
System::String^ statusReport = "\n\nAny problem states are indicated below:\n\n"; 
while ((line = fileOfPrintServers->ReadLine()) != nullptr) { System::Printing::PrintServer^ myPS = gcnew System::Printing::PrintServer(line, PrintSystemDesiredAccess::AdministrateServer); 
System::Printing::PrintQueueCollection^ myPrintQueues = myPS->GetPrintQueues(); 
statusReport = statusReport + "\n" + line; 
for each (System::Printing::PrintQueue^ pq in myPrintQueues) { pq->Refresh(); 
statusReport = statusReport + "\n\t" + pq->Name + ":"; 
if (useAttributesResponse == "y") { TroubleSpotter::SpotTroubleUsingQueueAttributes(statusReport, pq); 
// TroubleSpotter class is defined in the complete example. } else { TroubleSpotter::SpotTroubleUsingProperties(statusReport, pq); 
} } } fileOfPrintServers->Close(); 
Console::WriteLine(statusReport); 
Console::WriteLine("\nPress Return to continue."); 
Console::ReadLine(); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Survey queue status for every queue on every print server String line; 
String statusReport = "\n\nAny problem states are indicated below:\n\n"; 
while ((line = fileOfPrintServers.ReadLine()) != null) { PrintServer myPS = new PrintServer(line, PrintSystemDesiredAccess.AdministrateServer); 
PrintQueueCollection myPrintQueues = myPS.GetPrintQueues(); 
statusReport = statusReport + "\n" + line; 
foreach (PrintQueue pq in myPrintQueues) { pq.Refresh(); 
statusReport = statusReport + "\n\t" + pq.Name + ":"; 
if (useAttributesResponse == "y") { TroubleSpotter.SpotTroubleUsingQueueAttributes(ref statusReport, pq); 
// TroubleSpotter class is defined in the complete example. } else { TroubleSpotter.SpotTroubleUsingProperties(ref statusReport, pq); 
} }// end for each print queue }// end while list of print servers is not yet exhausted fileOfPrintServers.Close(); 
Console.WriteLine(statusReport); 
Console.WriteLine("\nPress Return to continue."); 
Console.ReadLine(); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To check printer status using the flags of the <Run FontWeight="Bold">QueueStatus</Run>
 property, you check each relevant flag to see if it is set. The standard way to see if one bit is set in a set of bit flags is to perform a logical AND operation with the set of flags as one operand and the flag itself as the other. Since the flag itself has only one bit set, the result of the logical AND is that, at most, that same bit is set. To find out whether it is or not, just compare the result of the logical AND with the flag itself. For more information, see <Run FontWeight="Bold">PrintQueueStatus</Run>
, the &amp; 
operator reference, and FlagsAttribute. 
    </Paragraph>

    <Paragraph>For each attribute whose bit is set, the code adds a notice to the final report that will be presented to the user. (The <Run FontWeight="Bold">ReportAvailabilityAtThisTime</Run>
 method that is called at the end of the code is discussed below.)
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C++ </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>internal: // Check for possible trouble states of a printer using the flags of the QueueStatus property static void SpotTroubleUsingQueueAttributes (System::String^% statusReport, System::Printing::PrintQueue^ pq) { if ((pq->QueueStatus &amp; 
PrintQueueStatus::PaperProblem) == PrintQueueStatus::PaperProblem) { statusReport = statusReport + "Has a paper problem. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::NoToner) == PrintQueueStatus::NoToner) { statusReport = statusReport + "Is out of toner. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::DoorOpen) == PrintQueueStatus::DoorOpen) { statusReport = statusReport + "Has an open door. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::Error) == PrintQueueStatus::Error) { statusReport = statusReport + "Is in an error state. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::NotAvailable) == PrintQueueStatus::NotAvailable) { statusReport = statusReport + "Is not available. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::Offline) == PrintQueueStatus::Offline) { statusReport = statusReport + "Is off line. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::OutOfMemory) == PrintQueueStatus::OutOfMemory) { statusReport = statusReport + "Is out of memory. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::PaperOut) == PrintQueueStatus::PaperOut) { statusReport = statusReport + "Is out of paper. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::OutputBinFull) == PrintQueueStatus::OutputBinFull) { statusReport = statusReport + "Has a full output bin. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::PaperJam) == PrintQueueStatus::PaperJam) { statusReport = statusReport + "Has a paper jam. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::Paused) == PrintQueueStatus::Paused) { statusReport = statusReport + "Is paused. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::TonerLow) == PrintQueueStatus::TonerLow) { statusReport = statusReport + "Is low on toner. "; 
} if ((pq->QueueStatus &amp; 
PrintQueueStatus::UserIntervention) == PrintQueueStatus::UserIntervention) { statusReport = statusReport + "Needs user intervention. "; 
} // Check if queue is even available at this time of day // The method below is defined in the complete example. ReportAvailabilityAtThisTime(statusReport, pq); 
}; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Check for possible trouble states of a printer using the flags of the QueueStatus property internal static void SpotTroubleUsingQueueAttributes(ref String statusReport, PrintQueue pq) { if ((pq.QueueStatus &amp; 
PrintQueueStatus.PaperProblem) == PrintQueueStatus.PaperProblem) { statusReport = statusReport + "Has a paper problem. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.NoToner) == PrintQueueStatus.NoToner) { statusReport = statusReport + "Is out of toner. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.DoorOpen) == PrintQueueStatus.DoorOpen) { statusReport = statusReport + "Has an open door. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.Error) == PrintQueueStatus.Error) { statusReport = statusReport + "Is in an error state. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.NotAvailable) == PrintQueueStatus.NotAvailable) { statusReport = statusReport + "Is not available. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.Offline) == PrintQueueStatus.Offline) { statusReport = statusReport + "Is off line. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.OutOfMemory) == PrintQueueStatus.OutOfMemory) { statusReport = statusReport + "Is out of memory. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.PaperOut) == PrintQueueStatus.PaperOut) { statusReport = statusReport + "Is out of paper. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.OutputBinFull) == PrintQueueStatus.OutputBinFull) { statusReport = statusReport + "Has a full output bin. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.PaperJam) == PrintQueueStatus.PaperJam) { statusReport = statusReport + "Has a paper jam. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.Paused) == PrintQueueStatus.Paused) { statusReport = statusReport + "Is paused. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.TonerLow) == PrintQueueStatus.TonerLow) { statusReport = statusReport + "Is low on toner. "; 
} if ((pq.QueueStatus &amp; 
PrintQueueStatus.UserIntervention) == PrintQueueStatus.UserIntervention) { statusReport = statusReport + "Needs user intervention. "; 
} // Check if queue is even available at this time of day // The method below is defined in the complete example. ReportAvailabilityAtThisTime(ref statusReport, pq); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To check printer status using each property, you simply read each property and add a note to the final report that will be presented to the user if the property is <Run FontWeight="Bold">true</Run>
. (The <Run FontWeight="Bold">ReportAvailabilityAtThisTime</Run>
 method that is called at the end of the code is discussed below.)
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C++ </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>internal: // Check for possible trouble states of a printer using its properties static void SpotTroubleUsingProperties (System::String^% statusReport, System::Printing::PrintQueue^ pq) { if (pq->HasPaperProblem) { statusReport = statusReport + "Has a paper problem. "; 
} if (!(pq->HasToner)) { statusReport = statusReport + "Is out of toner. "; 
} if (pq->IsDoorOpened) { statusReport = statusReport + "Has an open door. "; 
} if (pq->IsInError) { statusReport = statusReport + "Is in an error state. "; 
} if (pq->IsNotAvailable) { statusReport = statusReport + "Is not available. "; 
} if (pq->IsOffline) { statusReport = statusReport + "Is off line. "; 
} if (pq->IsOutOfMemory) { statusReport = statusReport + "Is out of memory. "; 
} if (pq->IsOutOfPaper) { statusReport = statusReport + "Is out of paper. "; 
} if (pq->IsOutputBinFull) { statusReport = statusReport + "Has a full output bin. "; 
} if (pq->IsPaperJammed) { statusReport = statusReport + "Has a paper jam. "; 
} if (pq->IsPaused) { statusReport = statusReport + "Is paused. "; 
} if (pq->IsTonerLow) { statusReport = statusReport + "Is low on toner. "; 
} if (pq->NeedUserIntervention) { statusReport = statusReport + "Needs user intervention. "; 
} // Check if queue is even available at this time of day // The following method is defined in the complete example. ReportAvailabilityAtThisTime(statusReport, pq); 
}; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Check for possible trouble states of a printer using its properties internal static void SpotTroubleUsingProperties(ref String statusReport, PrintQueue pq) { if (pq.HasPaperProblem) { statusReport = statusReport + "Has a paper problem. "; 
} if (!(pq.HasToner)) { statusReport = statusReport + "Is out of toner. "; 
} if (pq.IsDoorOpened) { statusReport = statusReport + "Has an open door. "; 
} if (pq.IsInError) { statusReport = statusReport + "Is in an error state. "; 
} if (pq.IsNotAvailable) { statusReport = statusReport + "Is not available. "; 
} if (pq.IsOffline) { statusReport = statusReport + "Is off line. "; 
} if (pq.IsOutOfMemory) { statusReport = statusReport + "Is out of memory. "; 
} if (pq.IsOutOfPaper) { statusReport = statusReport + "Is out of paper. "; 
} if (pq.IsOutputBinFull) { statusReport = statusReport + "Has a full output bin. "; 
} if (pq.IsPaperJammed) { statusReport = statusReport + "Has a paper jam. "; 
} if (pq.IsPaused) { statusReport = statusReport + "Is paused. "; 
} if (pq.IsTonerLow) { statusReport = statusReport + "Is low on toner. "; 
} if (pq.NeedUserIntervention) { statusReport = statusReport + "Needs user intervention. "; 
} // Check if queue is even available at this time of day // The following method is defined in the complete example. ReportAvailabilityAtThisTime(ref statusReport, pq); 
}//end SpotTroubleUsingProperties </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run FontWeight="Bold">ReportAvailabilityAtThisTime</Run>
 method was created in case you need to determine if the queue is available at the current time of day. 
    </Paragraph>

    <Paragraph>The method will do nothing if the StartTimeOfDay and UntilTimeOfDay properties are equal; 
because in that case the printer is available at all times. If they are different, the method gets the current time which then has to be converted into total minutes past midnight because the <Run FontWeight="Bold">StartTimeOfDay</Run>
 and <Run FontWeight="Bold">UntilTimeOfDay</Run>
 properties are Int32s representing minutes-after-midnight, not DateTime objects. Finally, the method checks to see if the current time is between the start and "until" times.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C++ </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private: static void ReportAvailabilityAtThisTime (System::String^% statusReport, System::Printing::PrintQueue^ pq) { if (pq->StartTimeOfDay != pq->UntilTimeOfDay) { System::DateTime utcNow = DateTime::UtcNow; 
System::Int32 utcNowAsMinutesAfterMidnight = (utcNow.TimeOfDay.Hours * 60) + utcNow.TimeOfDay.Minutes; 
// If now is not within the range of available times . . . if (!((pq->StartTimeOfDay 
&lt; 
utcNowAsMinutesAfterMidnight) &amp;&amp; 
(utcNowAsMinutesAfterMidnight 
&lt; 
pq->UntilTimeOfDay))) { statusReport = statusReport + " Is not available at this time of day. "; 
} } }; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private static void ReportAvailabilityAtThisTime(ref String statusReport, PrintQueue pq) { if (pq.StartTimeOfDay != pq.UntilTimeOfDay) // If the printer is not available 24 hours a day { DateTime utcNow = DateTime.UtcNow; 
Int32 utcNowAsMinutesAfterMidnight = (utcNow.TimeOfDay.Hours * 60) + utcNow.TimeOfDay.Minutes; 
// If now is not within the range of available times . . . if (!((pq.StartTimeOfDay 
&lt; 
utcNowAsMinutesAfterMidnight) &amp;&amp; 
(utcNowAsMinutesAfterMidnight 
&lt; 
pq.UntilTimeOfDay))) { statusReport = statusReport + " Is not available at this time of day. "; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>StartTimeOfDay
      <LineBreak/>UntilTimeOfDay
      <LineBreak/>DateTime
      <LineBreak/>PrintQueueStatus
      <LineBreak/>FlagsAttribute
      <LineBreak/>GetPrintQueues
      <LineBreak/>PrintServer
      <LineBreak/>LocalPrintServer
      <LineBreak/>EnumeratedPrintQueueTypes
      <LineBreak/>PrintQueue
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="6e8db7bc-050a-4070-aa72-bb8c46e87ff8.xaml">Documents in Windows Presentation Foundation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="0de8ac41-9aa6-413d-a121-7aa6f41539b1.xaml">Printing Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>&amp; 
operator reference
      <LineBreak/>Printing Samples
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Remotely Survey the Status of Printers to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

