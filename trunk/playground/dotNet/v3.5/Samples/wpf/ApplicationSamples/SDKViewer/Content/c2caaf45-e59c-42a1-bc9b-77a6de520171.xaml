<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_c2caaf45_e59c_42a1_bc9b_77a6de520171"
  Tag     ="Obtaining UI Automation Elements"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Obtaining UI Automation Elements</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic describes the various ways of obtaining AutomationElement objects for user interface (UI) elements.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Caution: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>If your client application might attempt to find elements in its own user interface, you must make all UI Automation calls on a separate thread. For more information, see <Hyperlink NavigateUri="0ab8d42c-5b8b-481b-b788-2caecc2f0191.xaml">UI Automation Threading Issues</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="The_Root_Element">Root Element</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Using_Conditions">Conditions</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Search_Scope">Search Scope</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Finding_a_Known_Element">Finding a Known Element</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Finding_Elements_in_a_Subtree">Finding Elements in a Subtree</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Walking_a_Subtree">Walking a Subtree</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Other_Ways_to_Retrieve_an_Element">Other Ways to Retrieve an Element</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Root Element
    </Paragraph>

    <Paragraph>All searches for <Run FontWeight="Bold">AutomationElement</Run>
 objects must have a starting-place. This can be any element, including the desktop, an application window, or a control.
    </Paragraph>

    <Paragraph>The root element for the desktop, from which all elements are descended, is obtained from the static System.Windows.Automation.AutomationElement.RootElement property. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Caution: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>In general, you should try to obtain only direct children of the <Run FontWeight="Bold">RootElement</Run>
. A search for descendants may iterate through hundreds or even thousands of elements, possibly resulting in a stack overflow. If you are attempting to obtain a specific element at a lower level, you should start your search from the application window or from a container at a lower level.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Conditions
    </Paragraph>

    <Paragraph>For most techniques you can use to retrieve Microsoft UI Automation elements, you must specify a Condition, which is a set of criteria defining what elements you want to retrieve.
    </Paragraph>

    <Paragraph>The simplest condition is TrueCondition, a predefined object specifying that all elements within the search scope are to be returned. FalseCondition, the converse of <Run FontWeight="Bold">TrueCondition</Run>
, is less useful, as it would prevent any elements from being found.
    </Paragraph>

    <Paragraph>Three other predefined conditions can be used alone or in combination with other conditions: ContentViewCondition, ControlViewCondition, and RawViewCondition. <Run FontWeight="Bold">RawViewCondition</Run>
, used by itself, is equivalent to <Run FontWeight="Bold">TrueCondition</Run>
, because it does not filter elements by their IsControlElement or IsContentElement properties.
    </Paragraph>

    <Paragraph>Other conditions are built up from one or more PropertyCondition objects, each of which specifies a property value. For example, a <Run FontWeight="Bold">PropertyCondition</Run>
 might specify that the element is enabled, or that it supports a certain <Run>control pattern</Run>
.
    </Paragraph>

    <Paragraph>Conditions can be combined using Boolean logic by constructing objects of types AndCondition, OrCondition, and NotCondition.
    </Paragraph>

    <Paragraph FontSize="22">Search Scope
    </Paragraph>

    <Paragraph>Searches done by using FindFirst or FindAll must have a scope as well as a starting-place.
    </Paragraph>

    <Paragraph>The scope defines the space around the starting-place that is to be searched. This might include the element itself, its siblings, its parent, its ancestors, its immediate children, and its descendants. 
    </Paragraph>

    <Paragraph>The scope of a search is defined by a bitwise combination of values from the TreeScope enumeration.
    </Paragraph>

    <Paragraph FontSize="22">Finding a Known Element
    </Paragraph>

    <Paragraph>To find a known element, identified by its Name, AutomationId, or some other property or combination of properties, it is easiest to use the <Run FontWeight="Bold">FindFirst</Run>
 method. If the element sought is an application window, the starting-point of the search can be the <Run FontWeight="Bold">RootElement</Run>
.
    </Paragraph>

    <Paragraph>This way of finding UI Automation elements is most useful in automated testing scenarios.
    </Paragraph>

    <Paragraph FontSize="22">Finding Elements in a Subtree
    </Paragraph>

    <Paragraph>To find all elements meeting specific criteria that are related to a known element, you can use <Run FontWeight="Bold">FindAll</Run>
. For example, you could use this method to retrieve list items or menu items from a list or menu, or to identify all controls in a dialog box.
    </Paragraph>

    <Paragraph FontSize="22">Walking a Subtree
    </Paragraph>

    <Paragraph>If you have no prior knowledge of the applications that your client may be used with, you can construct a subtree of all elements of interest by using the TreeWalker class. Your application might do this in response to a focus-changed event; 
that is, when an application or control receives input focus, the <Run>UI Automation client</Run>
 examines children and perhaps all descendants of the focused element.
    </Paragraph>

    <Paragraph>Another way in which <Run FontWeight="Bold">TreeWalker</Run>
 can be used is to identify the ancestors of an element. For example, by walking up the tree you can identify the parent window of a control.
    </Paragraph>

    <Paragraph>You can use <Run FontWeight="Bold">TreeWalker</Run>
 either by creating an object of the class (defining the elements of interest by passing a <Run FontWeight="Bold">Condition</Run>
), or by using one of the following predefined objects that are defined as fields of <Run FontWeight="Bold">TreeWalker</Run>
.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>ContentViewWalker 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Finds only elements whose <Run FontWeight="Bold">IsContentElement</Run>
 property is <Run FontWeight="Bold">true</Run>
.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>ControlViewWalker 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Finds only elements whose <Run FontWeight="Bold">IsControlElement</Run>
 property is <Run FontWeight="Bold">true</Run>
.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>RawViewWalker 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Finds all elements.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>After you have obtained a <Run FontWeight="Bold">TreeWalker</Run>
, using it is straightforward. Simply call the <Run FontWeight="Bold">Get</Run>
 methods to navigate among elements of the subtree.
    </Paragraph>

    <Paragraph>The Normalize method can be used for navigating to an element in the subtree from another element that is not part of view. For example, suppose you have created a view of a subtree by using <Run FontWeight="Bold">ContentViewWalker</Run>
. Your application then receives notification that a scroll bar has received the input focus. Because a scroll bar is not a content element, it is not present in your view of the subtree. However, you can pass the <Run FontWeight="Bold">AutomationElement</Run>
 representing the scroll bar to <Run FontWeight="Bold">Normalize</Run>
 and retrieve the nearest ancestor that is in the content view.
    </Paragraph>

    <Paragraph FontSize="22">Other Ways to Retrieve an Element
    </Paragraph>

    <Paragraph>In addition to searches and navigation, you can retrieve an <Run FontWeight="Bold">AutomationElement</Run>
 in the following ways.
    </Paragraph>

    <Paragraph FontSize="18">From an Event
    </Paragraph>

    <Paragraph>When your application receives a UI Automation event, the source object passed to your event handler is an <Run FontWeight="Bold">AutomationElement</Run>
. For example, if you have subscribed to focus-changed events, the source passed to your AutomationFocusChangedEventHandler is the element that received the focus.
    </Paragraph>

    <Paragraph>For more information, see <Hyperlink NavigateUri="b688effa-b3e8-4b05-944d-05ed89a245aa.xaml">Subscribe to UI Automation Events</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="18">From a Point
    </Paragraph>

    <Paragraph>If you have screen coordinates (for example, a cursor position), you can retrieve an <Run FontWeight="Bold">AutomationElement</Run>
 by using the static FromPoint method.
    </Paragraph>

    <Paragraph FontSize="18">From a Window Handle
    </Paragraph>

    <Paragraph>To retrieve an <Run FontWeight="Bold">AutomationElement</Run>
 from an HWND, use the static FromHandle method.
    </Paragraph>

    <Paragraph FontSize="18">From the Focused Control
    </Paragraph>

    <Paragraph>You can retrieve an <Run FontWeight="Bold">AutomationElement</Run>
 that represents the focused control from the static FocusedElement property.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="3acaee5a-6ce8-4c3e-81c8-67e59eb74477.xaml">Find a UI Automation Element Based on a Property Condition</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="afcd21dc-2ffa-48c9-9332-51269f44b7e9.xaml">Navigate Among UI Automation Elements with TreeWalker</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="03b98058-bdb3-47a0-8ff7-45e6cdf67166.xaml">UI Automation Tree Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>TreeWalker Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Obtaining UI Automation Elements to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

