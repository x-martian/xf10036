<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_5e1105f4_8fc4_473a_ba55_88c8e71386e6"
  Tag     ="Table Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Table Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Table is a block level element that supports grid-based presentation of Flow document content. The flexibility of this element makes it very useful, but also makes it more complicated to understand and use correctly.
    </Paragraph>

    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="table_basics">Table Basics</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="table_vs_Grid">How is Table Different then Grid?</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="basic_table_structure">Basic Table Structure</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="table_containment">Table Containment</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="row_groupings">Row Groupings</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="rednering_precedence">Background Rendering Precedence</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="spanning_rows_or_columns">Spanning Rows or Columns</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="building_a_table_with_code">Building a Table With Code</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="see_also">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Table Basics
    </Paragraph>

    <Paragraph FontSize="18">How is Table Different then Grid?
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Table</Run>
 and Grid share some common functionality, but each is best suited for different scenarios. A <Run FontWeight="Bold">Table</Run>
 is designed for use within flow content (see <Hyperlink NavigateUri="ef236a50-d44f-43c8-ba7c-82b0c733c0b7.xaml">Flow Document Overview</Hyperlink>
 for more information on flow content). Grids are best used inside of forms (basically anywhere outside of flow content). Within a FlowDocument, <Run FontWeight="Bold">Table</Run>
 supports flow content behaviors like pagination, column reflow, and content selection while a <Run FontWeight="Bold">Grid</Run>
 does not. A <Run FontWeight="Bold">Grid</Run>
 on the other hand is best used outside of a <Run FontWeight="Bold">FlowDocument</Run>
 for many reasons including <Run FontWeight="Bold">Grid</Run>
 adds elements based on a row and column index, <Run FontWeight="Bold">Table</Run>
 does not. The <Run FontWeight="Bold">Grid</Run>
 element allows layering of child content, allowing more than one element to exist within a single "cell." <Run FontWeight="Bold">Table</Run>
 does not support layering. Child elements of a <Run FontWeight="Bold">Grid</Run>
 can be absolutely positioned relative to the area of their "cell" boundaries. <Run FontWeight="Bold">Table</Run>
 does not support this feature. Finally, a <Run FontWeight="Bold">Grid</Run>
 is lighter weight then a <Run FontWeight="Bold">Table</Run>
. 
    </Paragraph>

    <Paragraph FontSize="18">Basic Table Structure
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Table</Run>
 provides a grid-based presentation consisting of columns (represented by TableColumn elements) and rows (represented by TableRow elements). <Run FontWeight="Bold">TableColumn</Run>
 elements do not host content; 
they simply define columns and characteristics of columns. <Run FontWeight="Bold">TableRow</Run>
 elements must be hosted in a TableRowGroup element, which defines a grouping of rows for the table. TableCell elements, which contain the actual content to be presented by the table, must be hosted in a <Run FontWeight="Bold">TableRow</Run>
 element. <Run FontWeight="Bold">TableCell</Run>
 may only contain elements that derive from Block. Valid child elements for a <Run FontWeight="Bold">TableCell</Run>
 include.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>BlockUIContainer 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>List 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Paragraph 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Section 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Table</Run>

        </Paragraph>

      </ListItem>

    </List>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">TableCell</Run>
 elements may not directly host text content. For more information about the containment rules for flow content elements like <Run FontWeight="Bold">TableCell</Run>
, see <Hyperlink NavigateUri="ef236a50-d44f-43c8-ba7c-82b0c733c0b7.xaml">Flow Document Overview</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Table</Run>
 is similar to the <Run FontWeight="Bold">Grid</Run>
 element but has more capabilities and, therefore, requires greater resource overhead.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example defines a simple 2 x 3 table with XAML.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- Table is a Block element, and as such must be hosted in a container for Block elements. FlowDocument provides such a container. --> 
&lt;FlowDocument> 
&lt;Table> 
&lt;!-- This table has 3 columns, each described by a TableColumn element nested in a Table.Columns collection element. --> 
&lt;Table.Columns> 
&lt;TableColumn /> 
&lt;TableColumn /> 
&lt;TableColumn /> 
&lt;/Table.Columns> 
&lt;!-- This table includes a single TableRowGroup which hosts 2 rows, each described by a TableRow element. --> 
&lt;TableRowGroup> 
&lt;!-- Each of the 2 TableRow elements hosts 3 cells, described by TableCell elements. --> 
&lt;TableRow> 
&lt;TableCell> 
&lt;!-- TableCell elements may only host elements derived from Block. In this example, Paragaph elements serve as the ultimate content containers for the cells in this table. --> 
&lt;Paragraph>Cell at Row 1 Column 1
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;TableCell> 
&lt;Paragraph>Cell at Row 1 Column 2
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;TableCell> 
&lt;Paragraph>Cell at Row 1 Column 3
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;/TableRow> 
&lt;TableRow> 
&lt;TableCell> 
&lt;Paragraph>Cell at Row 2 Column 1
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;TableCell> 
&lt;Paragraph>Cell at Row 2 Column 2
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;TableCell> 
&lt;Paragraph>Cell at Row 2 Column 3
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;/Table> 
&lt;/FlowDocument> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following figure shows how this example renders.
    </Paragraph>

    <Paragraph FontSize="18">Table Containment
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Table</Run>
 derives from the <Run FontWeight="Bold">Block</Run>
 element, and adheres to the common rules for <Run FontWeight="Bold">Block</Run>
 level elements. A <Run FontWeight="Bold">Table</Run>
 element may be contained by any of the following elements:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run FontWeight="Bold">FlowDocument</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">TableCell</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ListBoxItem 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ListViewItem 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Section</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Floater 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Figure 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Row Groupings
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">TableRowGroup</Run>
 element provides a way to arbitrarily group rows within a table; 
every row in a table must belong to a row grouping. Rows within a row group often share a common intent, and may be styled as a group. A common use for row groupings is to separate special-purpose rows, such as a title, header, and footer rows, from the primary content contained by the table.
    </Paragraph>

    <Paragraph>The following example uses XAML to define a table with styled header and footer rows.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Table> 
&lt;Table.Resources> 
&lt;!-- Style for header/footer rows. --> 
&lt;Style x:Key="headerFooterRowStyle" TargetType="{x:Type TableRowGroup}"> 
&lt;Setter Property="FontWeight" Value="DemiBold"/> 
&lt;Setter Property="FontSize" Value="16"/> 
&lt;Setter Property="Background" Value="LightGray"/> 
&lt;/Style> 
&lt;!-- Style for data rows. --> 
&lt;Style x:Key="dataRowStyle" TargetType="{x:Type TableRowGroup}"> 
&lt;Setter Property="FontSize" Value="12"/> 
&lt;Setter Property="FontStyle" Value="Italic"/> 
&lt;/Style> 
&lt;/Table.Resources> 
&lt;Table.Columns> 
&lt;TableColumn/> 
&lt;TableColumn/> 
&lt;TableColumn/> 
&lt;TableColumn/> 
&lt;/Table.Columns> 
&lt;!-- This TableRowGroup hosts a header row for the table. --> 
&lt;TableRowGroup Style="{StaticResource headerFooterRowStyle}"> 
&lt;TableRow> 
&lt;TableCell/> 
&lt;TableCell>
&lt;Paragraph>Gizmos
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>Thingamajigs
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>Doohickies
&lt;/Paragraph>
&lt;/TableCell> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;!-- This TableRowGroup hosts the main data rows for the table. --> 
&lt;TableRowGroup Style="{StaticResource dataRowStyle}"> 
&lt;TableRow> 
&lt;TableCell>
&lt;Paragraph Foreground="Blue">Blue
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>1
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>2
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>3
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;/TableRow> 
&lt;TableRow> 
&lt;TableCell>
&lt;Paragraph Foreground="Red">Red
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>1
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>2
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>3
&lt;/Paragraph>
&lt;/TableCell> 
&lt;/TableRow> 
&lt;TableRow> 
&lt;TableCell>
&lt;Paragraph Foreground="Green">Green
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>1
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>2
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>3
&lt;/Paragraph>
&lt;/TableCell> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;!-- This TableRowGroup hosts a footer row for the table. --> 
&lt;TableRowGroup Style="{StaticResource headerFooterRowStyle}"> 
&lt;TableRow> 
&lt;TableCell>
&lt;Paragraph>Totals
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>3
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell>
&lt;Paragraph>6
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell> 
&lt;Table>
&lt;/Table> 
&lt;/TableCell> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;/Table> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following figure shows how this example renders.
    </Paragraph>

    <Paragraph FontSize="18">Background Rendering Precedence
    </Paragraph>

    <Paragraph>Table elements render in the following order (<Run>z-order</Run>
 from lowest to highest). This order cannot be changed. For example, there is no "Z-order" property for these elements that you can use to override this established order.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph><Run FontWeight="Bold">Table</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">TableColumn</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">TableRowGroup</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">TableRow</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">TableCell</Run>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Consider the following example, which defines background colors for each of these elements within a table.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Table Background="Yellow"> 
&lt;Table.Columns> 
&lt;TableColumn/> 
&lt;TableColumn Background="LightGreen"/> 
&lt;TableColumn/> 
&lt;/Table.Columns> 
&lt;TableRowGroup> 
&lt;TableRow> 
&lt;TableCell/>
&lt;TableCell/>
&lt;TableCell/> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;TableRowGroup Background="Tan"> 
&lt;TableRow> 
&lt;TableCell/>
&lt;TableCell/>
&lt;TableCell/> 
&lt;/TableRow> 
&lt;TableRow Background="LightBlue"> 
&lt;TableCell/>
&lt;TableCell Background="Purple"/>
&lt;TableCell/> 
&lt;/TableRow> 
&lt;TableRow> 
&lt;TableCell/>
&lt;TableCell/>
&lt;TableCell/> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;TableRowGroup> 
&lt;TableRow> 
&lt;TableCell/>
&lt;TableCell/>
&lt;TableCell/> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;/Table> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following figure shows how this example renders (showing background colors only).
    </Paragraph>

    <Paragraph FontSize="18">Spanning Rows or Columns
    </Paragraph>

    <Paragraph>Table cells may be configured to span multiple rows or columns by using the RowSpan or ColumnSpan attributes, respectively.
    </Paragraph>

    <Paragraph>Consider the following example, in which a cell spans three columns.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Table> 
&lt;Table.Columns> 
&lt;TableColumn/> 
&lt;TableColumn/> 
&lt;TableColumn/> 
&lt;/Table.Columns> 
&lt;TableRowGroup> 
&lt;TableRow> 
&lt;TableCell ColumnSpan="3" Background="Cyan"> 
&lt;Paragraph>This cell spans all three columns.
&lt;/Paragraph> 
&lt;/TableCell> 
&lt;/TableRow> 
&lt;TableRow> 
&lt;TableCell Background="LightGray">
&lt;Paragraph>Cell 1
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell Background="LightGray">
&lt;Paragraph>Cell 2
&lt;/Paragraph>
&lt;/TableCell> 
&lt;TableCell Background="LightGray">
&lt;Paragraph>Cell 3
&lt;/Paragraph>
&lt;/TableCell> 
&lt;/TableRow> 
&lt;/TableRowGroup> 
&lt;/Table> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following figure shows how this example renders.
    </Paragraph>

    <Paragraph FontSize="22">Building a Table With Code
    </Paragraph>

    <Paragraph>The following examples show how to programmatically create a <Run FontWeight="Bold">Table</Run>
 and populate it with content. The contents of the table are apportioned into five rows (represented by <Run FontWeight="Bold">TableRow</Run>
 objects contained in a RowGroups object) and six columns (represented by <Run FontWeight="Bold">TableColumn</Run>
 objects). The rows are used for different presentation purposes, including a title row intended to title the entire table, a header row to describe the columns of data in the table, and a footer row with summary information. Note that the notion of "title", "header", and "footer" rows are not inherent to the table; 
these are simply rows with different characteristics. Table cells contain the actual content, which can be comprised of text, images, or nearly any other user interface (UI) element.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>For a complete sample that demonstrates the example code shown below, see Displaying Tabular Data in a Table Sample.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>First, a <Run FontWeight="Bold">FlowDocument</Run>
 is created to host the <Run FontWeight="Bold">Table</Run>
, and a new <Run FontWeight="Bold">Table</Run>
 is created and added to the contents of the <Run FontWeight="Bold">FlowDocument</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create the parent FlowDocument... flowDoc = new FlowDocument(); 
// Create the Table... table1 = new Table(); 
// ...and add it to the FlowDocument Blocks collection. flowDoc.Blocks.Add(table1); 
// Set some global formatting properties for the table. table1.CellSpacing = 10; 
table1.Background = Brushes.White; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' Create the parent FlowDocument... flowDoc = New FlowDocument() ' Create the Table... table1 = New Table() ' ...and add it to the FlowDocument Blocks collection. flowDoc.Blocks.Add(table1) ' Set some global formatting properties for the table. table1.CellSpacing = 10 table1.Background = Brushes.White </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Next, six <Run FontWeight="Bold">TableColumn</Run>
 objects are created and added to the table's Columns collection, with some formatting applied.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Note that the table's <Run FontWeight="Bold">Columns</Run>
 collection uses standard zero-based indexing.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create 6 columns and add them to the table's Columns collection. int numberOfColumns = 6; 
for (int x = 0; 
x 
&lt; 
numberOfColumns; 
x++) { table1.Columns.Add(new TableColumn()); 
// Set alternating background colors for the middle colums. if(x%2 == 0) table1.Columns[x].Background = Brushes.Beige; 
else table1.Columns[x].Background = Brushes.LightSteelBlue; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' Create 6 columns and add them to the table's Columns collection. Dim numberOfColumns = 6 Dim x For x = 0 To numberOfColumns table1.Columns.Add(new TableColumn()) ' Set alternating background colors for the middle colums. If x Mod 2 = 0 Then table1.Columns(x).Background = Brushes.Beige Else table1.Columns(x).Background = Brushes.LightSteelBlue End If Next x </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Next, a title row is created and added to the table with some formatting applied. The title row happens to contain a single cell that spans all six columns in the table.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create and add an empty TableRowGroup to hold the table's Rows. table1.RowGroups.Add(new TableRowGroup()); 
// Add the first (title) row. table1.RowGroups[0].Rows.Add(new TableRow()); 
// Alias the current working row for easy reference. TableRow currentRow = table1.RowGroups[0].Rows[0]; 
// Global formatting for the title row. currentRow.Background = Brushes.Silver; 
currentRow.FontSize = 40; 
currentRow.FontWeight = System.Windows.FontWeights.Bold; 
// Add the header row with content, currentRow.Cells.Add(new TableCell(new Paragraph(new Run("2004 Sales Project")))); 
// and set the row to span all 6 columns. currentRow.Cells[0].ColumnSpan = 6; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' Create and add an empty TableRowGroup to hold the table's Rows. table1.RowGroups.Add(new TableRowGroup()) ' Add the first (title) row. table1.RowGroups(0).Rows.Add(new TableRow()) ' Alias the current working row for easy reference. Dim currentRow As New TableRow() currentRow = table1.RowGroups(0).Rows(0) ' Global formatting for the title row. currentRow.Background = Brushes.Silver currentRow.FontSize = 40 currentRow.FontWeight = System.Windows.FontWeights.Bold ' Add the header row with content, currentRow.Cells.Add(new TableCell(new Paragraph(new Run("2004 Sales Project")))) ' and set the row to span all 6 columns. currentRow.Cells(0).ColumnSpan = 6 </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Next, a header row is created and added to the table, and the cells in the header row are created and populated with content.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Add the second (header) row. table1.RowGroups[0].Rows.Add(new TableRow()); 
currentRow = table1.RowGroups[0].Rows[1]; 
// Global formatting for the header row. currentRow.FontSize = 18; 
currentRow.FontWeight = FontWeights.Bold; 
// Add cells with content to the second row. currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Product")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 1")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 2")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 3")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 4")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("TOTAL")))); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' Add the second (header) row. table1.RowGroups(0).Rows.Add(new TableRow()) currentRow = table1.RowGroups(0).Rows(1) ' Global formatting for the header row. currentRow.FontSize = 18 currentRow.FontWeight = FontWeights.Bold ' Add cells with content to the second row. currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Product")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 1")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 2")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 3")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Quarter 4")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("TOTAL")))) </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Next, a row for data is created and added to the table, and the cells in this row are created and populated with content. Building this row is similar to building the header row, with slightly different formatting applied.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Add the third row. table1.RowGroups[0].Rows.Add(new TableRow()); 
currentRow = table1.RowGroups[0].Rows[2]; 
// Global formatting for the row. currentRow.FontSize = 12; 
currentRow.FontWeight = FontWeights.Normal; 
// Add cells with content to the third row. currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Widgets")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$50,000")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$55,000")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$60,000")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$65,000")))); 
currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$230,000")))); 
// Bold the first cell. currentRow.Cells[0].FontWeight = FontWeights.Bold; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' Add the third row. table1.RowGroups(0).Rows.Add(new TableRow()) currentRow = table1.RowGroups(0).Rows(2) ' Global formatting for the row. currentRow.FontSize = 12 currentRow.FontWeight = FontWeights.Normal ' Add cells with content to the third row. currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Widgets")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$50,000")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$55,000")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$60,000")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$65,000")))) currentRow.Cells.Add(new TableCell(new Paragraph(new Run("$230,000")))) ' Bold the first cell. currentRow.Cells(0).FontWeight = FontWeights.Bold </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Finally, a footer row is created, added, and formatted. Like the title row, the footer contains a single cell that spans all six columns in the table.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>table1.RowGroups[0].Rows.Add(new TableRow()); 
currentRow = table1.RowGroups[0].Rows[4]; 
// Global formatting for the footer row. currentRow.Background = Brushes.LightGray; 
currentRow.FontSize = 18; 
currentRow.FontWeight = System.Windows.FontWeights.Normal; 
// Add the header row with content, currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Projected 2004 Revenue: $810,000")))); 
// and set the row to span all 6 columns. currentRow.Cells[0].ColumnSpan = 6; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>table1.RowGroups(0).Rows.Add(new TableRow()) currentRow = table1.RowGroups(0).Rows(4) ' Global formatting for the footer row. currentRow.Background = Brushes.LightGray currentRow.FontSize = 18 currentRow.FontWeight = System.Windows.FontWeights.Normal ' Add the header row with content, currentRow.Cells.Add(new TableCell(new Paragraph(new Run("Projected 2004 Revenue: $810,000")))) ' and set the row to span all 6 columns. currentRow.Cells(0).ColumnSpan = 6 </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="83f2dc58-437e-4cdc-b5dd-0019810c7a85.xaml">How to: Define a Table with XAML</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="70fa11cd-5fa7-4872-a1cc-04d80f1132be.xaml">How to: Use Flow Content Elements</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="ef236a50-d44f-43c8-ba7c-82b0c733c0b7.xaml">Flow Document Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="6e8db7bc-050a-4070-aa72-bb8c46e87ff8.xaml">Documents in Windows Presentation Foundation</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink> about Table Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

