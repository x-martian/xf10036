<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_4fe2d501_d0b0_4fef_86af_6ffe6c162532"
  Tag     ="Validate and Merge PrintTickets"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Validate and Merge PrintTickets</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>New to Windows Vista is the <Hyperlink NavigateUri="http://windowssdk.msdn.microsoft.com/library/en-us/printschema/html/d746bdd1-96c2-41f5-ad99-0b51c8ee8731.asp?frame=true">Print Schema</Hyperlink>
 that includes the flexible and extensible PrintCapabilities and PrintTicket elements. The former itemizes the capabilities of a print device and the latter specifies how the device should use those capabilities with respect to a particular sequence of documents, individual document, or individual page. 
    </Paragraph>

    <Paragraph>A typical sequence of tasks for an application that supports printing would be as follows.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Determine a printer's capabilities.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Configure a <Run FontWeight="Bold">PrintTicket</Run>
 to use those capabilities.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Validate the <Run FontWeight="Bold">PrintTicket</Run>
.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>This article shows how to do this. 
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>In the simple example below, we are interested only in whether a printer can support duplexing — two-sided printing. The major steps are as follows.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Get a <Run FontWeight="Bold">PrintCapabilities</Run>
 object with the GetPrintCapabilities method. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Test for the presence of the capability you want. In the example below, we test the DuplexingCapability property of the <Run FontWeight="Bold">PrintCapabilities</Run>
 object for the presence of the capability of printing on both sides of a sheet of paper with the "page turning" along the long side of the sheet. Since <Run FontWeight="Bold">DuplexingCapability</Run>
 is a collection, we use the Contains method. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph>Note: 
                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph>This step is not strictly necessary. The MergeAndValidatePrintTicket method used below will check each request in the <Run FontWeight="Bold">PrintTicket</Run>
 against the capabilities of the printer. If the requested capability is not supported by printer, the printer driver will substitute an alternative request in the <Run FontWeight="Bold">PrintTicket</Run>
 returned by the method.
                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>If the printer supports duplexing, the sample code creates a <Run FontWeight="Bold">PrintTicket</Run>
 that asks for duplexing. But the application does not specify every possible printer setting available in the <Run FontWeight="Bold">PrintTicket</Run>
 element. That would be wasteful of both programmer and program time. Instead, the code sets only the duplexing request and then merges this <Run FontWeight="Bold">PrintTicket</Run>
 with an existing, fully configured and validated, <Run FontWeight="Bold">PrintTicket</Run>
, in this case, the user's default <Run FontWeight="Bold">PrintTicket</Run>
. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Accordingly, the sample calls the <Run FontWeight="Bold">MergeAndValidatePrintTicket</Run>
 method to merge the new, minimal, <Run FontWeight="Bold">PrintTicket</Run>
 with the user's default <Run FontWeight="Bold">PrintTicket</Run>
. This returns a ValidationResult that includes the new <Run FontWeight="Bold">PrintTicket</Run>
 as one of its properties. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The sample then tests that the new <Run FontWeight="Bold">PrintTicket</Run>
 requests duplexing. If it does, then the sample makes it the new default print ticket for the user. If step 2 above had been left out and the printer did not support duplexing along the long side, then the test would have resulted in <Run FontWeight="Bold">false</Run>
. (See the note above.)
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The last significant step is to commit the change to the UserPrintTicket property of the PrintQueue with the Commit method. 
        </Paragraph>

      </ListItem>

    </List>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>/// 
&lt;summary> /// Changes the user-default PrintTicket setting of the specified print queue. /// 
&lt;/summary> /// 
&lt;param name="queue">the printer whose user-default PrintTicket setting needs to be changed
&lt;/param> static private void ChangePrintTicketSetting(PrintQueue queue) { // // Obtain the printer's PrintCapabilities so we can determine whether or not // duplexing printing is supported by the printer. // PrintCapabilities printcap = queue.GetPrintCapabilities(); 
// // The printer's duplexing capability is returned as a read-only collection of duplexing options // that can be supported by the printer. If the collection returned contains the duplexing // option we want to set, it means the duplexing option we want to set is supported by the printer, // so we can make the user-default PrintTicket setting change. // if (printcap.DuplexingCapability.Contains(Duplexing.TwoSidedLongEdge)) { // // To change the user-default PrintTicket, we can first create a delta PrintTicket with // the new duplexing setting. // PrintTicket deltaTicket = new PrintTicket(); 
deltaTicket.Duplexing = Duplexing.TwoSidedLongEdge; 
// // Then merge the delta PrintTicket onto the printer's current user-default PrintTicket, // and validate the merged PrintTicket to get the new PrintTicket we want to set as the // printer's new user-default PrintTicket. // ValidationResult result = queue.MergeAndValidatePrintTicket(queue.UserPrintTicket, deltaTicket); 
// // The duplexing option we want to set could be constrained by other PrintTicket settings // or device settings. We can check the validated merged PrintTicket to see whether the // the validation process has kept the duplexing option we want to set unchanged. // if (result.ValidatedPrintTicket.Duplexing == Duplexing.TwoSidedLongEdge) { // // Set the printer's user-default PrintTicket and commit the set operation. // queue.UserPrintTicket = result.ValidatedPrintTicket; 
queue.Commit(); 
Console.WriteLine("PrintTicket new duplexing setting is set on '{0}'.", queue.FullName); 
} else { // // The duplexing option we want to set has been changed by the validation process // when it was resolving setting constraints. // Console.WriteLine("PrintTicket new duplexing setting is constrained on '{0}'.", queue.FullName); 
} } else { // // If the printer doesn't support the duplexing option we want to set, skip it. // Console.WriteLine("PrintTicket new duplexing setting is not supported on '{0}'.", queue.FullName); 
} } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>So that you can quickly test this example, the remainder of it is presented below. Create a project and a namespace and then paste both the code snippets in this article into the namespace block. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>/// 
&lt;summary> /// Displays the correct command line syntax to run this sample program. /// 
&lt;/summary> static private void DisplayUsage() { Console.WriteLine(); 
Console.WriteLine("Usage #1: printticket.exe -l \"
&lt;printer_name>\""); 
Console.WriteLine(" Run program on the specified local printer"); 
Console.WriteLine(); 
Console.WriteLine(" Quotation marks may be omitted if there are no spaces in printer_name."); 
Console.WriteLine(); 
Console.WriteLine("Usage #2: printticket.exe -r \"\\\\
&lt;server_name>\\
&lt;printer_name>\""); 
Console.WriteLine(" Run program on the specified network printer"); 
Console.WriteLine(); 
Console.WriteLine(" Quotation marks may be omitted if there are no spaces in server_name or printer_name."); 
Console.WriteLine(); 
Console.WriteLine("Usage #3: printticket.exe -a"); 
Console.WriteLine(" Run program on all installed printers"); 
Console.WriteLine(); 
} [STAThread] static public void Main(string[] args) { try { if ((args.Length == 1) &amp;&amp; 
(args[0] == "-a")) { // // Change PrintTicket setting for all local and network printer connections. // LocalPrintServer server = new LocalPrintServer(); 
EnumeratedPrintQueueTypes[] queue_types = {EnumeratedPrintQueueTypes.Local, EnumeratedPrintQueueTypes.Connections}; 
// // Enumerate through all the printers. // foreach (PrintQueue queue in server.GetPrintQueues(queue_types)) { // // Change the PrintTicket setting queue by queue. // ChangePrintTicketSetting(queue); 
} }//end if -a else if ((args.Length == 2) &amp;&amp; 
(args[0] == "-l")) { // // Change PrintTicket setting only for the specified local printer. // LocalPrintServer server = new LocalPrintServer(); 
PrintQueue queue = new PrintQueue(server, args[1]); 
ChangePrintTicketSetting(queue); 
}//end if -l else if ((args.Length == 2) &amp;&amp; 
(args[0] == "-r")) { // // Change PrintTicket setting only for the specified remote printer. // String serverName = args[1].Remove(args[1].LastIndexOf(@"\")); 
String printerName = args[1].Remove(0, args[1].LastIndexOf(@"\")+1); 
PrintServer ps = new PrintServer(serverName); 
PrintQueue queue = new PrintQueue(ps, printerName); 
ChangePrintTicketSetting(queue); 
}//end if -r else { // // Unrecognized command line. // Show user the correct command line syntax to run this sample program. // DisplayUsage(); 
} } catch (Exception e) { Console.WriteLine(e.Message); 
Console.WriteLine(e.StackTrace); 
// // Show inner exception information if it's provided. // if (e.InnerException != null) { Console.WriteLine("--- Inner Exception ---"); 
Console.WriteLine(e.InnerException.Message); 
Console.WriteLine(e.InnerException.StackTrace); 
} } finally { Console.WriteLine("Press Return to continue..."); 
Console.ReadLine(); 
} }//end Main </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>PrintCapabilities
      <LineBreak/>PrintTicket
      <LineBreak/>GetPrintQueues
      <LineBreak/>PrintServer
      <LineBreak/>EnumeratedPrintQueueTypes
      <LineBreak/>PrintQueue
      <LineBreak/>GetPrintCapabilities
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="6e8db7bc-050a-4070-aa72-bb8c46e87ff8.xaml">Documents in Windows Presentation Foundation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="0de8ac41-9aa6-413d-a121-7aa6f41539b1.xaml">Printing Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Printing Samples
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Validate and Merge PrintTickets to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

