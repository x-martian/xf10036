<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_9b5ce5c0_e204_4320_a7a8_0b2210d62f88"
  Tag     ="Drawing Objects Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Drawing Objects Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic introduces Drawing objects and describes how to use them to efficiently draw shapes, bitmaps, text, and media. Use <Run FontWeight="Bold">Drawing</Run>
 objects when you create clip art, paint with a DrawingBrush, or use Visual objects.
    </Paragraph>

    <Paragraph>This topic contains the following sections:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="whatisadrawingsection">What is a Drawing Object?</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="drawinggeometriessection">Draw a Shape</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="drawingimagessection">Draw an Image</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="playmedia">Play Media (Code Only)</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="drawtext">Draw Text</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="compositedrawingssection">Composite Drawings</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="usingimagedrawing">Display a Drawing as an Image</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="renderingwithdrawingbrushsection">Paint an Object with a Drawing</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="renderingwithvisualsection">Rendering a Drawing with a Visual</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="drawingcontextobjects">DrawingContext Objects</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="enumeratevisualcontents">Enumerate the Contents of a Visual</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">What is a Drawing Object?
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">Drawing</Run>
 object describes visible content, such as a shape, bitmap, video, or a line of text. Different types of drawings describe different types of content. The following is a list of the different types of drawing objects. 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>GeometryDrawing – Draws a shape. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ImageDrawing – Draws an image. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>GlyphRunDrawing – Draws text. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>VideoDrawing – Plays an audio or video file. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>DrawingGroup – Draws other drawings. Use a drawing group to combine other drawings into a single composite drawing.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph><Run FontWeight="Bold">Drawing</Run>
 objects are versatile; 
there are many ways you can use a <Run FontWeight="Bold">Drawing</Run>
 object. 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>You can display it as an image by using a DrawingImage and an Image control.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can use it with a <Run FontWeight="Bold">DrawingBrush</Run>
 to paint an object, such as the Background of a Page. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can use it to describe the appearance of a DrawingVisual.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can use it to enumerate the contents of a <Run FontWeight="Bold">Visual</Run>
.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>WPF provides other types of objects that are capable of drawing shapes, bitmaps, text, and media. For example, you can also use Shape objects to draw shapes, and the MediaElement control provides another way to add video to your application. So when should you use <Run FontWeight="Bold">Drawing</Run>
 objects? When you can sacrifice framework level features to gain performance benefits or when you need Freezable features. Because <Run FontWeight="Bold">Drawing</Run>
 objects lack support for <Hyperlink NavigateUri="3eecdced-3623-403a-a077-7595453a9221.xaml">The Layout System</Hyperlink>
, input, and focus, they provide performance benefits that make them ideal for describing backgrounds, clip art, and for low-level drawing with <Run FontWeight="Bold">Visual</Run>
 objects. 
    </Paragraph>

    <Paragraph>Because they are a type <Run FontWeight="Bold">Freezable</Run>
 object, <Run FontWeight="Bold">Drawing</Run>
 objects gain several special features, which include the following: they can be declared as <Hyperlink NavigateUri="91580b89-a0a8-4889-aecb-fddf8e63175f.xaml">Resources Overview</Hyperlink>
, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe. For more information about the different features provided by <Run FontWeight="Bold">Freezable</Run>
 objects, see the <Hyperlink NavigateUri="89c71692-4f43-4057-b611-67c6a8a863a2.xaml">Freezable Objects Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22">Draw a Shape
    </Paragraph>

    <Paragraph>To draw a shape, you use a <Run FontWeight="Bold">GeometryDrawing</Run>
. A geometry drawing's Geometry property describes the shape to draw, its Brush property describes how the interior of the shape should be painted, and its Pen property describes how its outline should be drawn.
    </Paragraph>

    <Paragraph>The following example uses a <Run FontWeight="Bold">GeometryDrawing</Run>
 to draw a shape. The shape is described by a GeometryGroup and two EllipseGeometry objects. The shape's interior is painted with a LinearGradientBrush and its outline is drawn with a Black Pen. 
    </Paragraph>

    <Paragraph>This example creates the following <Run FontWeight="Bold">GeometryDrawing</Run>
.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">A GeometryDrawing</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// // Create the Geometry to draw. // GeometryGroup ellipses = new GeometryGroup(); 
ellipses.Children.Add( new EllipseGeometry(new Point(50,50), 45, 20) ); 
ellipses.Children.Add( new EllipseGeometry(new Point(50, 50), 20, 45) ); 
// // Create a GeometryDrawing. // GeometryDrawing aGeometryDrawing = new GeometryDrawing(); 
aGeometryDrawing.Geometry = ellipses; 
// Paint the drawing with a gradient. aGeometryDrawing.Brush = new LinearGradientBrush( Colors.Blue, Color.FromRgb(204,204,255), new Point(0,0), new Point(1,1)); 
// Outline the drawing with a solid color. aGeometryDrawing.Pen = new Pen(Brushes.Black, 10); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;GeometryDrawing> 
&lt;GeometryDrawing.Geometry> 
&lt;!-- Create a composite shape. --> 
&lt;GeometryGroup> 
&lt;EllipseGeometry Center="50,50" RadiusX="45" RadiusY="20" /> 
&lt;EllipseGeometry Center="50,50" RadiusX="20" RadiusY="45" /> 
&lt;/GeometryGroup> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Brush> 
&lt;!-- Paint the drawing with a gradient. --> 
&lt;LinearGradientBrush> 
&lt;GradientStop Offset="0.0" Color="Blue" /> 
&lt;GradientStop Offset="1.0" Color="#CCCCFF" /> 
&lt;/LinearGradientBrush> 
&lt;/GeometryDrawing.Brush> 
&lt;GeometryDrawing.Pen> 
&lt;!-- Outline the drawing with a solid color. --> 
&lt;Pen Thickness="10" Brush="Black" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete example, see <Hyperlink NavigateUri="11d3c096-91ba-4d41-9bba-aeac0db70f97.xaml">How to: Create a GeometryDrawing</Hyperlink>
.
    </Paragraph>

    <Paragraph>Other Geometry classes, such as PathGeometry enable you to create more complex shapes by creating curves and arcs. For more information about <Run FontWeight="Bold">Geometry</Run>
 objects, see the <Hyperlink NavigateUri="9fba8934-98b7-4af6-82f6-f4ef887f963a.xaml">Geometry Overview</Hyperlink>
. 
    </Paragraph>

    <Paragraph>For more information about other ways to draw shapes that don't use <Run FontWeight="Bold">Drawing</Run>
 objects, see <Hyperlink NavigateUri="66d7a6d6-e3b6-47bc-8dfe-8a1b26f7d901.xaml">Shapes and Basic Drawing in WPF Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22">Draw an Image
    </Paragraph>

    <Paragraph>To draw an image, you use an <Run FontWeight="Bold">ImageDrawing</Run>
. An <Run FontWeight="Bold">ImageDrawing</Run>
 object's ImageSource property describes the image to draw, and its Rect property defines the region where the image is drawn.
    </Paragraph>

    <Paragraph>The following example draws an image into a rectangle located at (75,75) that is 100 by 100 <Run>pixel</Run>
. The following illustration shows the <Run FontWeight="Bold">ImageDrawing</Run>
 created by the example. A gray border was added to show the bounds of the <Run FontWeight="Bold">ImageDrawing</Run>
. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">A 100 by 100 ImageDrawing</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create a 100 by 100 image with an upper-left point of (75,75). ImageDrawing bigKiwi = new ImageDrawing(); 
bigKiwi.Rect = new Rect(75, 75, 100, 100); 
bigKiwi.ImageSource = new BitmapImage( new Uri(@"sampleImages\kiwi.png", UriKind.Relative)); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- The Rect property specifies that the image only fill a 100 by 100 rectangular area. --> 
&lt;ImageDrawing Rect="75,75,100,100" ImageSource="sampleImages\kiwi.png"/> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For more information about images, see the <Hyperlink NavigateUri="72aad87a-e6f3-4937-94cd-a18b7766e990.xaml">Imaging Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22">Play Media (Code Only)
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Although you can declare a <Run FontWeight="Bold">VideoDrawing</Run>
 in Extensible Application Markup Language (XAML), you can only load and play its media using code. To play video in Extensible Application Markup Language (XAML), use a <Run FontWeight="Bold">MediaElement</Run>
 instead.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To play an audio or video file, you use a <Run FontWeight="Bold">VideoDrawing</Run>
 and a MediaPlayer. There are two ways to load and play media. The first is to use a <Run FontWeight="Bold">MediaPlayer</Run>
 and a <Run FontWeight="Bold">VideoDrawing</Run>
 by themselves, and the second way is to create your own MediaTimeline to use with the <Run FontWeight="Bold">MediaPlayer</Run>
 and <Run FontWeight="Bold">VideoDrawing</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>When distributing media with your application, you cannot use a media file as a project resource, like you would an image. In your project file, you must instead set the media type to <Run>Content</Run>
 and set <Run>CopyToOutputDirectory</Run>
 to <Run>PreserveNewest</Run>
 or <Run>Always</Run>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To play media without creating your own <Run FontWeight="Bold">MediaTimeline</Run>
, you perform the following steps.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Create a <Run FontWeight="Bold">MediaPlayer</Run>
 object.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>MediaPlayer player = new MediaPlayer(); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Use the Open method to load the media file.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>player.Open(new Uri(@"sampleMedia\xbox.wmv", UriKind.Relative)); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Create a <Run FontWeight="Bold">VideoDrawing</Run>
.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>VideoDrawing aVideoDrawing = new VideoDrawing(); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Specify the size and location to draw the media by setting the Rect property of the <Run FontWeight="Bold">VideoDrawing</Run>
.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>aVideoDrawing.Rect = new Rect(0, 0, 100, 100); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Set the Player property of the <Run FontWeight="Bold">VideoDrawing</Run>
 with the <Run FontWeight="Bold">MediaPlayer</Run>
 you created.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>aVideoDrawing.Player = player; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Use the Play method of the <Run FontWeight="Bold">MediaPlayer</Run>
 to start playing the media.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Play the video once. player.Play(); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <Paragraph>The following example uses a <Run FontWeight="Bold">VideoDrawing</Run>
 and a <Run FontWeight="Bold">MediaPlayer</Run>
 to play a video file once.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// // Create a VideoDrawing. // MediaPlayer player = new MediaPlayer(); 
player.Open(new Uri(@"sampleMedia\xbox.wmv", UriKind.Relative)); 
VideoDrawing aVideoDrawing = new VideoDrawing(); 
aVideoDrawing.Rect = new Rect(0, 0, 100, 100); 
aVideoDrawing.Player = player; 
// Play the video once. player.Play(); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To gain additional timing control over the media, use a <Run FontWeight="Bold">MediaTimeline</Run>
 with the <Run FontWeight="Bold">MediaPlayer</Run>
 and <Run FontWeight="Bold">VideoDrawing</Run>
 objects. The <Run FontWeight="Bold">MediaTimeline</Run>
 enables you to specify whether the video should repeat. To use a <Run FontWeight="Bold">MediaTimeline</Run>
 with a <Run FontWeight="Bold">VideoDrawing</Run>
, you perform the following steps:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Declare the <Run FontWeight="Bold">MediaTimeline</Run>
 and set its timing behaviors.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create a MediaTimeline. MediaTimeline mTimeline = new MediaTimeline(new Uri(@"sampleMedia\xbox.wmv", UriKind.Relative)); 
// Set the timeline to repeat. mTimeline.RepeatBehavior = RepeatBehavior.Forever; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Create a MediaClock from the <Run FontWeight="Bold">MediaTimeline</Run>
.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create a clock from the MediaTimeline. MediaClock mClock = mTimeline.CreateClock(); 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Create a <Run FontWeight="Bold">MediaPlayer</Run>
 and use the <Run FontWeight="Bold">MediaClock</Run>
 to set its Clock property.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>MediaPlayer repeatingVideoDrawingPlayer = new MediaPlayer(); 
repeatingVideoDrawingPlayer.Clock = mClock; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Create a <Run FontWeight="Bold">VideoDrawing</Run>
 and assign the <Run FontWeight="Bold">MediaPlayer</Run>
 to the <Run FontWeight="Bold">Player</Run>
 property of the <Run FontWeight="Bold">VideoDrawing</Run>
.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>VideoDrawing repeatingVideoDrawing = new VideoDrawing(); 
repeatingVideoDrawing.Rect = new Rect(150, 0, 100, 100); 
repeatingVideoDrawing.Player = repeatingVideoDrawingPlayer; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <Paragraph>The following example uses a <Run FontWeight="Bold">MediaTimeline</Run>
 with a <Run FontWeight="Bold">MediaPlayer</Run>
 and a <Run FontWeight="Bold">VideoDrawing</Run>
 to play a video repeatedly. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// // Create a VideoDrawing that repeats. // // Create a MediaTimeline. MediaTimeline mTimeline = new MediaTimeline(new Uri(@"sampleMedia\xbox.wmv", UriKind.Relative)); 
// Set the timeline to repeat. mTimeline.RepeatBehavior = RepeatBehavior.Forever; 
// Create a clock from the MediaTimeline. MediaClock mClock = mTimeline.CreateClock(); 
MediaPlayer repeatingVideoDrawingPlayer = new MediaPlayer(); 
repeatingVideoDrawingPlayer.Clock = mClock; 
VideoDrawing repeatingVideoDrawing = new VideoDrawing(); 
repeatingVideoDrawing.Rect = new Rect(150, 0, 100, 100); 
repeatingVideoDrawing.Player = repeatingVideoDrawingPlayer; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Note that, when you use a <Run FontWeight="Bold">MediaTimeline</Run>
, you use the interactive ClockController returned from the Controller property of the <Run FontWeight="Bold">MediaClock</Run>
 to control media playback instead of the interactive methods of <Run FontWeight="Bold">MediaPlayer</Run>
.
    </Paragraph>

    <Paragraph FontSize="22">Draw Text
    </Paragraph>

    <Paragraph>To draw text, you use a <Run FontWeight="Bold">GlyphRunDrawing</Run>
 and a GlyphRun. The following example uses a <Run FontWeight="Bold">GlyphRunDrawing</Run>
 to draw the text "Hello World".
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>GlyphRun theGlyphRun = new GlyphRun( new GlyphTypeface(new Uri(@"C:\WINDOWS\Fonts\TIMES.TTF")), 0, false, 13.333333333333334, new ushort[]{43, 72, 79, 79, 82, 3, 58, 82, 85, 79, 71}, new Point(0, 12.29), new double[]{ 9.62666666666667, 7.41333333333333, 2.96, 2.96, 7.41333333333333, 3.70666666666667, 12.5866666666667, 7.41333333333333, 4.44, 2.96, 7.41333333333333}, null, null, null, null, null, null ); 
GlyphRunDrawing gDrawing = new GlyphRunDrawing(Brushes.Black, theGlyphRun); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;GlyphRunDrawing ForegroundBrush="Black"> 
&lt;GlyphRunDrawing.GlyphRun> 
&lt;GlyphRun CaretStops="{x:Null}" ClusterMap="{x:Null}" IsSideways="False" GlyphOffsets="{x:Null}" GlyphIndices="43 72 79 79 82 3 58 82 85 79 71" BaselineOrigin="0,12.29" FontRenderingEmSize="13.333333333333334" DeviceFontName="{x:Null}" AdvanceWidths="9.62666666666667 7.41333333333333 2.96 2.96 7.41333333333333 3.70666666666667 12.5866666666667 7.41333333333333 4.44 2.96 7.41333333333333" BidiLevel="0"> 
&lt;GlyphRun.GlyphTypeface> 
&lt;GlyphTypeface FontUri="C:\WINDOWS\Fonts\TIMES.TTF" /> 
&lt;/GlyphRun.GlyphTypeface> 
&lt;/GlyphRun> 
&lt;/GlyphRunDrawing.GlyphRun> 
&lt;/GlyphRunDrawing> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>A <Run FontWeight="Bold">GlyphRun</Run>
 is a low-level object intended for use with fixed-format document presentation and print scenarios. A simpler way to draw text to the screen is to use a Label or a TextBlock. For more information about <Run FontWeight="Bold">GlyphRun</Run>
, see the <Hyperlink NavigateUri="746ca769-a331-4435-9b95-f72a883b67c1.xaml">Introduction to the GlyphRun Object and Glyphs Element</Hyperlink>
 overview.
    </Paragraph>

    <Paragraph FontSize="22">Composite Drawings
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">DrawingGroup</Run>
 enables you to combine multiple drawings into a single composite drawing. By using a <Run FontWeight="Bold">DrawingGroup</Run>
, you can combine shapes, images, and text into a single <Run FontWeight="Bold">Drawing</Run>
 object.
    </Paragraph>

    <Paragraph>The following example uses a <Run FontWeight="Bold">DrawingGroup</Run>
 to combine two <Run FontWeight="Bold">GeometryDrawing</Run>
 objects and an <Run FontWeight="Bold">ImageDrawing</Run>
 object. This example produces the following output.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">A composite drawing</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// // Create three drawings. // GeometryDrawing ellipseDrawing = new GeometryDrawing( new SolidColorBrush(Color.FromArgb(102, 181, 243, 20)), new Pen(Brushes.Black, 4), new EllipseGeometry(new Point(50,50), 50, 50) ); 
ImageDrawing kiwiPictureDrawing = new ImageDrawing( new BitmapImage(new Uri(@"sampleImages\kiwi.png", UriKind.Relative)), new Rect(50,50,100,100)); 
GeometryDrawing ellipseDrawing2 = new GeometryDrawing( new SolidColorBrush(Color.FromArgb(102,181,243,20)), new Pen(Brushes.Black, 4), new EllipseGeometry(new Point(150, 150), 50, 50) ); 
// Create a DrawingGroup to contain the drawings. DrawingGroup aDrawingGroup = new DrawingGroup(); 
aDrawingGroup.Children.Add(ellipseDrawing); 
aDrawingGroup.Children.Add(kiwiPictureDrawing); 
aDrawingGroup.Children.Add(ellipseDrawing2); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;DrawingGroup> 
&lt;GeometryDrawing Brush="#66B5F314"> 
&lt;GeometryDrawing.Geometry> 
&lt;EllipseGeometry Center="50,50" RadiusX="50" RadiusY="50"/> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Brush="Black" Thickness="4" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;ImageDrawing ImageSource="sampleImages\kiwi.png" Rect="50,50,100,100"/> 
&lt;GeometryDrawing Brush="#66B5F314"> 
&lt;GeometryDrawing.Geometry> 
&lt;EllipseGeometry Center="150,150" RadiusX="50" RadiusY="50"/> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Brush="Black" Thickness="4" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;/DrawingGroup> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>A <Run FontWeight="Bold">DrawingGroup</Run>
 also enables you to apply opacity masks, transforms, bitmap effects, and other operations to its contents. <Run FontWeight="Bold">DrawingGroup</Run>
 operations are applied in the following order: OpacityMask, Opacity, BitmapEffect, ClipGeometry, GuidelineSet, and then Transform.
    </Paragraph>

    <Paragraph>The following illustration shows the order in which <Run FontWeight="Bold">DrawingGroup</Run>
 operations are applied.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Order of DrawingGroup operations</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph>The following table describes the properties you can use to manipulate a <Run FontWeight="Bold">DrawingGroup</Run>
 object's contents. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Property 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Description 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Illustration 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">OpacityMask</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Alters the opacity of selected portions of the <Run FontWeight="Bold">DrawingGroup</Run>
 contents. For an example, see <Hyperlink NavigateUri="68580652-7d32-4d27-93cc-a5148cf4d5ee.xaml">How to: Control the Opacity of a Drawing</Hyperlink>
.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Opacity</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Uniformly changes the opacity of the <Run FontWeight="Bold">DrawingGroup</Run>
 contents. Use this property to make a <Run FontWeight="Bold">Drawing</Run>
 transparent or partially transparent. For an example, see <Hyperlink NavigateUri="d77b420b-9be2-479c-a45e-82f4da30eb9f.xaml">How to: Apply an Opacity Mask to a Drawing</Hyperlink>
.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">BitmapEffect</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Applies a BitmapEffect to the <Run FontWeight="Bold">DrawingGroup</Run>
 contents. For an example, see <Hyperlink NavigateUri="c5b1de83-8d09-47fb-96db-5f174471f4b5.xaml">How to: Apply a BitmapEffect to a Drawing</Hyperlink>
.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">ClipGeometry</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Clips the <Run FontWeight="Bold">DrawingGroup</Run>
 contents to a region you describe using a <Run FontWeight="Bold">Geometry</Run>
. For an example, see <Hyperlink NavigateUri="1f7d8a2c-c3c2-42cb-a542-e6796f9fb058.xaml">How to: Clip a Drawing</Hyperlink>
 .
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">GuidelineSet</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Snaps device independent pixels to device pixels along the specified guidelines. This property is useful for ensuring that finely detailed graphics render sharply on low-DPI displays. For an example, see <Hyperlink NavigateUri="45f3e0b4-8820-45a7-b865-b8ea5b17b0c8.xaml">How to: Apply a GuidelineSet to a Drawing</Hyperlink>
.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Transform</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Transforms the <Run FontWeight="Bold">DrawingGroup</Run>
 contents. For an example, see <Hyperlink NavigateUri="0d525f2b-682d-4d67-9660-cf46929fbabd.xaml">How to: Apply a Transform to a Drawing</Hyperlink>
.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Display a Drawing as an Image
    </Paragraph>

    <Paragraph>To display a <Run FontWeight="Bold">Drawing</Run>
 with an <Run FontWeight="Bold">Image</Run>
 control, use a <Run FontWeight="Bold">DrawingImage</Run>
 as the <Run FontWeight="Bold">Image</Run>
 control's Source and set the <Run FontWeight="Bold">DrawingImage</Run>
 object's System.Windows.Media.DrawingImage.Drawing property to the drawing you want to display.
    </Paragraph>

    <Paragraph>The following example uses a <Run FontWeight="Bold">DrawingImage</Run>
 and an <Run FontWeight="Bold">Image</Run>
 control to display a <Run FontWeight="Bold">GeometryDrawing</Run>
. This example produces the following output. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">A DrawingImage</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Media.Animation; 
using System.Windows.Shapes; 
namespace SDKSample { public class DrawingImageExample : Page { public DrawingImageExample() { // // Create the Geometry to draw. // GeometryGroup ellipses = new GeometryGroup(); 
ellipses.Children.Add( new EllipseGeometry(new Point(50,50), 45, 20) ); 
ellipses.Children.Add( new EllipseGeometry(new Point(50, 50), 20, 45) ); 
// // Create a GeometryDrawing. // GeometryDrawing aGeometryDrawing = new GeometryDrawing(); 
aGeometryDrawing.Geometry = ellipses; 
// Paint the drawing with a gradient. aGeometryDrawing.Brush = new LinearGradientBrush( Colors.Blue, Color.FromRgb(204,204,255), new Point(0,0), new Point(1,1)); 
// Outline the drawing with a solid color. aGeometryDrawing.Pen = new Pen(Brushes.Black, 10); 
// // Use a DrawingImage and an Image control // to display the drawing. // DrawingImage geometryImage = new DrawingImage(aGeometryDrawing); 
// Freeze the DrawingImage for performance benefits. geometryImage.Freeze(); 
Image anImage = new Image(); 
anImage.Source = geometryImage; 
anImage.HorizontalAlignment = HorizontalAlignment.Left; 
// // Place the image inside a border and // add it to the page. // Border exampleBorder = new Border(); 
exampleBorder.Child = anImage; 
exampleBorder.BorderBrush = Brushes.Gray; 
exampleBorder.BorderThickness = new Thickness(1); 
exampleBorder.HorizontalAlignment = HorizontalAlignment.Left; 
exampleBorder.VerticalAlignment = VerticalAlignment.Top; 
exampleBorder.Margin = new Thickness(10); 
this.Margin = new Thickness(20); 
this.Background = Brushes.White; 
this.Content = exampleBorder; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_9b5ce5c0_e204_4320_a7a8_0b2210d62f88_4">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="PresentationOptions" Background="White" Margin="20"> 
&lt;Border BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10"> 
&lt;!-- This image uses a Drawing object for its source. --> 
&lt;Image> 
&lt;Image.Source> 
&lt;DrawingImage PresentationOptions:Freeze="True"> 
&lt;DrawingImage.Drawing> 
&lt;GeometryDrawing> 
&lt;GeometryDrawing.Geometry> 
&lt;GeometryGroup> 
&lt;EllipseGeometry Center="50,50" RadiusX="45" RadiusY="20" /> 
&lt;EllipseGeometry Center="50,50" RadiusX="20" RadiusY="45" /> 
&lt;/GeometryGroup> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Brush> 
&lt;LinearGradientBrush> 
&lt;GradientStop Offset="0.0" Color="Blue" /> 
&lt;GradientStop Offset="1.0" Color="#CCCCFF" /> 
&lt;/LinearGradientBrush> 
&lt;/GeometryDrawing.Brush> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Thickness="10" Brush="Black" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;/DrawingImage.Drawing> 
&lt;/DrawingImage> 
&lt;/Image.Source> 
&lt;/Image> 
&lt;/Border> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Paint an Object with a Drawing
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">DrawingBrush</Run>
 is a type of brush that paints an area with a drawing object. You can use it to paint just about any graphical object with a drawing. The <Run FontWeight="Bold">Drawing</Run>
 property of a <Run FontWeight="Bold">DrawingBrush</Run>
 describes its Drawing. To render a <Run FontWeight="Bold">Drawing</Run>
 with a <Run FontWeight="Bold">DrawingBrush</Run>
, add it to the brush using the brush's <Run FontWeight="Bold">Drawing</Run>
 property and use the brush to paint a graphical object, such as a control or panel.
    </Paragraph>

    <Paragraph>The following examples uses a <Run FontWeight="Bold">DrawingBrush</Run>
 to paint the Fill of a Rectangle with a pattern created from a <Run FontWeight="Bold">GeometryDrawing</Run>
. This example produces the following output.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">A GeometryDrawing used with a DrawingBrush</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Media.Animation; 
using System.Windows.Shapes; 
namespace SDKSample { public class DrawingBrushExample : Page { public DrawingBrushExample() { // // Create the Geometry to draw. // GeometryGroup ellipses = new GeometryGroup(); 
ellipses.Children.Add( new EllipseGeometry(new Point(50,50), 45, 20) ); 
ellipses.Children.Add( new EllipseGeometry(new Point(50, 50), 20, 45) ); 
// // Create a GeometryDrawing. // GeometryDrawing aGeometryDrawing = new GeometryDrawing(); 
aGeometryDrawing.Geometry = ellipses; 
// Paint the drawing with a gradient. aGeometryDrawing.Brush = new LinearGradientBrush( Colors.Blue, Color.FromRgb(204,204,255), new Point(0,0), new Point(1,1)); 
// Outline the drawing with a solid color. aGeometryDrawing.Pen = new Pen(Brushes.Black, 10); 
DrawingBrush patternBrush = new DrawingBrush(aGeometryDrawing); 
patternBrush.Viewport = new Rect(0, 0, 0.25, 0.25); 
patternBrush.TileMode = TileMode.Tile; 
patternBrush.Freeze(); 
// // Create an object to paint. // Rectangle paintedRectangle = new Rectangle(); 
paintedRectangle.Width = 100; 
paintedRectangle.Height = 100; 
paintedRectangle.Fill = patternBrush; 
// // Place the image inside a border and // add it to the page. // Border exampleBorder = new Border(); 
exampleBorder.Child = paintedRectangle; 
exampleBorder.BorderBrush = Brushes.Gray; 
exampleBorder.BorderThickness = new Thickness(1); 
exampleBorder.HorizontalAlignment = HorizontalAlignment.Left; 
exampleBorder.VerticalAlignment = VerticalAlignment.Top; 
exampleBorder.Margin = new Thickness(10); 
this.Margin = new Thickness(20); 
this.Background = Brushes.White; 
this.Content = exampleBorder; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_9b5ce5c0_e204_4320_a7a8_0b2210d62f88_5">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="PresentationOptions" Margin="20" Background="White"> 
&lt;Border BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10"> 
&lt;Rectangle Width="100" Height="100"> 
&lt;Rectangle.Fill> 
&lt;DrawingBrush PresentationOptions:Freeze="True" Viewport="0,0,0.25,0.25" TileMode="Tile"> 
&lt;DrawingBrush.Drawing> 
&lt;GeometryDrawing> 
&lt;GeometryDrawing.Geometry> 
&lt;GeometryGroup> 
&lt;EllipseGeometry Center="50,50" RadiusX="45" RadiusY="20" /> 
&lt;EllipseGeometry Center="50,50" RadiusX="20" RadiusY="45" /> 
&lt;/GeometryGroup> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Brush> 
&lt;LinearGradientBrush> 
&lt;GradientStop Offset="0.0" Color="Blue" /> 
&lt;GradientStop Offset="1.0" Color="#CCCCFF" /> 
&lt;/LinearGradientBrush> 
&lt;/GeometryDrawing.Brush> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Thickness="10" Brush="Black" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;/DrawingBrush.Drawing> 
&lt;/DrawingBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> 
&lt;/Border> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run FontWeight="Bold">DrawingBrush</Run>
 class provides a variety of options for stretching and tiling its content. For more information about <Run FontWeight="Bold">DrawingBrush</Run>
, see the <Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>
 overview.
    </Paragraph>

    <Paragraph FontSize="22">Rendering a Drawing with a Visual
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">DrawingVisual</Run>
 is a type of visual object designed to render a drawing. Working directly at the visual layer is an option for developers who want to build a highly customized graphical environment, and is not described in this overview. For more information, see the <Hyperlink NavigateUri="0b4e711d-e640-40cb-81c3-8f5c59909b7d.xaml">Using DrawingVisual Objects</Hyperlink>
 overview.
    </Paragraph>

    <Paragraph FontSize="22">DrawingContext Objects
    </Paragraph>

    <Paragraph>The DrawingContext class enables you to populate a <Run FontWeight="Bold">Visual</Run>
 or a <Run FontWeight="Bold">Drawing</Run>
 with visual content. Many such lower-level graphics objects use a <Run FontWeight="Bold">DrawingContext</Run>
 because it describes graphical content very efficiently.
    </Paragraph>

    <Paragraph>Although the <Run FontWeight="Bold">DrawingContext</Run>
 draw methods appear similar to the draw methods of the System.Drawing.Graphics type, they are actually very different. <Run FontWeight="Bold">DrawingContext</Run>
 is used with a retained mode graphics system, while the <Run FontWeight="Bold">System.Drawing.Graphics</Run>
 type is used with an immediate mode graphics system. When you use a <Run FontWeight="Bold">DrawingContext</Run>
 object's draw commands, you are actually storing a set of rendering instructions (although the exact storage mechanism depends on the type of object that supplies the <Run FontWeight="Bold">DrawingContext</Run>
) that will later be used by the graphics system; 
you are not drawing to the screen in real-time. For more information about how the Windows Presentation Foundation (WPF) graphics system works, see the <Hyperlink NavigateUri="6dec9657-4d8c-4e46-8c54-40fb80008265.xaml">Windows Presentation Foundation Graphics Rendering Overview</Hyperlink>
. 
    </Paragraph>

    <Paragraph>You never directly instantiate a <Run FontWeight="Bold">DrawingContext</Run>
; 
you can, however, acquire a drawing context from certain methods, such as System.Windows.Media.DrawingGroup.Open and System.Windows.Media.DrawingVisual.RenderOpen. 
    </Paragraph>

    <Paragraph FontSize="22">Enumerate the Contents of a Visual
    </Paragraph>

    <Paragraph>In addition to their other uses, <Run FontWeight="Bold">Drawing</Run>
 objects also provide an object model for enumerating the contents of a <Run FontWeight="Bold">Visual</Run>
.
    </Paragraph>

    <Paragraph>The following example uses the GetDrawing method to retrieve the <Run FontWeight="Bold">DrawingGroup</Run>
 value of a <Run FontWeight="Bold">Visual</Run>
 and enumerate it.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public void RetrieveDrawing(Visual v) { DrawingGroup dGroup = VisualTreeHelper.GetDrawing(v); 
EnumDrawingGroup(dGroup); 
} // Enumerate the drawings in the DrawingGroup. public void EnumDrawingGroup(DrawingGroup drawingGroup) { DrawingCollection dc = drawingGroup.Children; 
// Enumerate the drawings in the DrawingCollection. foreach (Drawing drawing in dc) { // If the drawing is a DrawingGroup, call the function recursively. if (drawing.GetType() == typeof(DrawingGroup)) { EnumDrawingGroup((DrawingGroup)drawing); 
} else if (drawing.GetType() == typeof(GeometryDrawing)) { // Perform action based on drawing type. } else if (drawing.GetType() == typeof(ImageDrawing)) { // Perform action based on drawing type. } else if (drawing.GetType() == typeof(GlyphRunDrawing)) { // Perform action based on drawing type. } else if (drawing.GetType() == typeof(VideoDrawing)) { // Perform action based on drawing type. } } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Drawing
      <LineBreak/>DrawingGroup
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="9fba8934-98b7-4af6-82f6-f4ef887f963a.xaml">Geometry Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="66d7a6d6-e3b6-47bc-8dfe-8a1b26f7d901.xaml">Shapes and Basic Drawing in WPF Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="6dec9657-4d8c-4e46-8c54-40fb80008265.xaml">Windows Presentation Foundation Graphics Rendering Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="89c71692-4f43-4057-b611-67c6a8a863a2.xaml">Freezable Objects Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="5f445633-529c-4091-8a2c-13035ac8c41b.xaml">Drawings How-to Topics</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Drawing Objects Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

