<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_1defbb78_b8e7_4c0e_b650_576453ac828d"
  Tag     ="Create Simple or Complex TreeViews"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Create Simple or Complex TreeViews</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to create simple or complex TreeView controls.
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">TreeView</Run>
 consists of a hierarchy of TreeViewItem controls, which can contain simple text strings and also more complex content, such as Button controls or a StackPanel with embedded content. You can explicitly define the <Run FontWeight="Bold">TreeView</Run>
 content or a data source can provide the content. This topic provides examples of these concepts.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The Header property of the <Run FontWeight="Bold">TreeViewItem</Run>
 contains the content that the <Run FontWeight="Bold">TreeView</Run>
 displays for that item. A <Run FontWeight="Bold">TreeViewItem</Run>
 can also have <Run FontWeight="Bold">TreeViewItem</Run>
 controls as its child elements and you can define these child elements by using the Items property.
    </Paragraph>

    <Paragraph>The following example shows how to explicitly define <Run FontWeight="Bold">TreeViewItem</Run>
 content by setting the <Run FontWeight="Bold">Header</Run>
 property to a text string.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TreeView> 
&lt;TreeViewItem Header="Employee1"> 
&lt;TreeViewItem Header="Jesper"/> 
&lt;TreeViewItem Header="Aaberg"/> 
&lt;TreeViewItem Header="12345"/> 
&lt;/TreeViewItem> 
&lt;TreeViewItem Header="Employee2"> 
&lt;TreeViewItem Header="Dominik"/> 
&lt;TreeViewItem Header="Paiha"/> 
&lt;TreeViewItem Header="98765"/> 
&lt;/TreeViewItem> 
&lt;/TreeView> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example show how to define child elements of a <Run FontWeight="Bold">TreeViewItem</Run>
 by defining <Run FontWeight="Bold">Items</Run>
 that are <Run FontWeight="Bold">Button</Run>
 controls.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TreeView> 
&lt;TreeViewItem Header ="Employee1"> 
&lt;TreeViewItem.Items> 
&lt;Button>Jesper
&lt;/Button> 
&lt;Button>Aaberg
&lt;/Button> 
&lt;Button>12345
&lt;/Button> 
&lt;/TreeViewItem.Items> 
&lt;/TreeViewItem> 
&lt;TreeViewItem Header="Employee2"> 
&lt;TreeViewItem.Items> 
&lt;Button>Dominik
&lt;/Button> 
&lt;Button>Paiha
&lt;/Button> 
&lt;Button>98765
&lt;/Button> 
&lt;/TreeViewItem.Items> 
&lt;/TreeViewItem> 
&lt;/TreeView> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows how to create a <Run FontWeight="Bold">TreeView</Run>
 where an XmlDataProvider provides <Run FontWeight="Bold">TreeViewItem</Run>
 content and a HierarchicalDataTemplate defines the appearance of the content.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;XmlDataProvider x:Key="myEmployeeData" XPath="/EmployeeData"> 
&lt;x:XData> 
&lt;EmployeeData xmlns=""> 
&lt;EmployeeInfo> 
&lt;EmployeeInfoData>Employee1
&lt;/EmployeeInfoData> 
&lt;Item Type="FirstName">Jesper
&lt;/Item> 
&lt;Item Type="LastName">Aaberg
&lt;/Item> 
&lt;Item Type="EmployeeNumber">12345
&lt;/Item> 
&lt;/EmployeeInfo> 
&lt;EmployeeInfo> 
&lt;EmployeeInfoData>Employee2
&lt;/EmployeeInfoData> 
&lt;Item Type="FirstName">Dominik
&lt;/Item> 
&lt;Item Type="LastName">Paiha
&lt;/Item> 
&lt;Item Type="EmployeeNumber">98765
&lt;/Item> 
&lt;/EmployeeInfo> 
&lt;/EmployeeData> 
&lt;/x:XData> 
&lt;/XmlDataProvider> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;HierarchicalDataTemplate DataType="EmployeeInfo" ItemsSource ="{Binding XPath=Item}"> 
&lt;TextBlock Text="{Binding XPath=EmployeeInfoData}" /> 
&lt;/HierarchicalDataTemplate> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TreeView ItemsSource="{Binding Source={StaticResource myEmployeeData}, XPath=EmployeeInfo}"/> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows how to create a <Run FontWeight="Bold">TreeView</Run>
 where the <Run FontWeight="Bold">TreeViewItem</Run>
 content contains DockPanel controls that have embedded content.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TreeView> 
&lt;TreeViewItem Header="Animals"> 
&lt;TreeViewItem.Items> 
&lt;DockPanel> 
&lt;Image Source="data\fish.png"/> 
&lt;TextBlock Margin="5" Foreground="Brown" FontSize="12">Fish
&lt;/TextBlock> 
&lt;/DockPanel> 
&lt;DockPanel> 
&lt;Image Source="data\dog.png"/> 
&lt;TextBlock Margin="5" Foreground="Brown" FontSize="12">Dog
&lt;/TextBlock> 
&lt;/DockPanel> 
&lt;DockPanel> 
&lt;Image Source="data\cat.png"/> 
&lt;TextBlock Margin="5" Foreground="Brown" FontSize="12">Cat
&lt;/TextBlock> 
&lt;/DockPanel> 
&lt;/TreeViewItem.Items> 
&lt;/TreeViewItem> 
&lt;/TreeView> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample, see TreeView Samples.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>TreeView
      <LineBreak/>TreeViewItem
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="62212512-5a5c-4864-949e-b6a6a3a52c02.xaml">TreeView Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="b9e9790e-7bfd-45d1-8b7a-1e0d125182a8.xaml">TreeView How-to Topics</Hyperlink>

      <LineBreak/>Data Binding Overviews
      <LineBreak/>TreeView Samples
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Create Simple or Complex TreeViews to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

