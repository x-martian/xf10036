<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_69a1a3f9_acb5_4e2c_9c43_2e376c055ac4"
  Tag     ="Inline Styles and Templates"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Inline Styles and Templates</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Windows Presentation Foundation (WPF) provides Style objects and template objects (FrameworkTemplate subclasses) as a way to define the visual appearance of an element in resources, so that they can be used multiple times. For this reason, attributes in XAML that take the types <Run FontWeight="Bold">Style</Run>
 and <Run FontWeight="Bold">FrameworkTemplate</Run>
 almost always make resource references to existing styles and templates rather than define new ones inline.
    </Paragraph>

    <Paragraph FontSize="22">Limitations of Inline Styles and Templates
    </Paragraph>

    <Paragraph>In Extensible Application Markup Language (XAML), style and template properties can technically be set in one of two ways. You can use attribute syntax to reference a style that was defined within a resource, for example <Run>
&lt;</Run>
<Run FontStyle="italic">object</Run>
<Run> Style="{StaticResource </Run>
<Run FontStyle="italic">myResourceKey</Run>
<Run>}" .../></Run>
. Or you can use property element syntax to define a style inline, for instance:
    </Paragraph>

    <Paragraph><Run>
&lt;</Run>
<Run FontStyle="italic">object</Run>
<Run>></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;</Run>
<Run FontStyle="italic">object</Run>
<Run>.Style></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;</Run>
<Run>Style</Run>
<Run>.../></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;/</Run>
<Run FontStyle="italic">object</Run>
<Run>.Style></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;/</Run>
<Run FontStyle="italic">object</Run>
<Run>></Run>

    </Paragraph>

    <Paragraph>The attribute usage is much more common. A style that is defined inline and not defined in resources is necessarily scoped to the containing element only, and cannot be re-used as easily because it has no resource key. In general a resource-defined style is more versatile and useful, and is more in keeping with the general Windows Presentation Foundation (WPF) programming model principle of attempting to separate program logic from design.
    </Paragraph>

    <Paragraph>Usually there is no reason to set a style or template inline, even if you only intend to use that style or template in that location. Most elements that can take a style or template also support a content property and a content model, and if you are only using whatever logical tree you create through styling or templating once, it would e even easier to just fill that content property with the equivalent child elements in direct markup, bypassing the style and template mechanisms altogether.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="481765e5-5467-4a75-9f7b-e10e2ac410d9.xaml">Styling and Templating</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Inline Styles and Templates to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

