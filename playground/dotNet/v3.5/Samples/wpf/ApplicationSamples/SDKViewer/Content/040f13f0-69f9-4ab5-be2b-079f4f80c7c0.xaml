<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_040f13f0_69f9_4ab5_be2b_079f4f80c7c0"
  Tag     ="Control a Storyboard After It Starts"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Control a Storyboard After It Starts</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to use procedural code to control a Storyboard after it has started. To control a storyboard in XAML, use Trigger and TriggerAction objects; 
for an example, see <Hyperlink NavigateUri="3b115594-6a93-4972-b24d-61aa16f1c15f.xaml">How to: Use Event Triggers to Control a Storyboard After It Starts</Hyperlink>
. 
    </Paragraph>

    <Paragraph>To start a storyboard, you use its Begin method, which distributes the storyboard's animations to the properties they animate and starts the storyboard. 
    </Paragraph>

    <Paragraph>To make a storyboard controllable, you use the Begin method and specify <Run FontWeight="Bold">true</Run>
 as the second parameter. You can then use the storyboard's interactive methods to pause, resume, seek, stop, speed up, or slow down the storyboard, or advance it to its fill period. The following is a list of the storyboard's interactive methods:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Pause: Pauses the storyboard. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Resume: Resumes a paused storyboard.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>SetSpeedRatio: Sets the storyboard's interactive speed.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Seek: Seeks the storyboard the specified location.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>SeekAlignedToLastTick: Seeks the storyboard to the specified location. Unlike the <Run FontWeight="Bold">Seek</Run>
 method, this operation is processed before the next tick.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>SkipToFill: Advances the storyboard to its fill period, if it has one. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Stop: Stops the storyboard. 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>In the following example, several storyboard methods are used to interactively control a storyboard.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Note: </Run>
To see an example of controlling a storyboard using triggers with XAML, see <Hyperlink NavigateUri="3b115594-6a93-4972-b24d-61aa16f1c15f.xaml">How to: Use Event Triggers to Control a Storyboard After It Starts</Hyperlink>
. 
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>/* This example shows how to control a storyboard after it has started. */ using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Shapes; 
using System.Windows.Media.Animation; 
namespace Microsoft.Samples.Animation.TimingBehaviors { public partial class ControlStoryboardExample : Page { private Storyboard myStoryboard; 
public ControlStoryboardExample() { // Create a name scope for the page. NameScope.SetNameScope(this, new NameScope()); 
this.WindowTitle = "Controlling a Storyboard"; 
this.Background = Brushes.White; 
StackPanel myStackPanel = new StackPanel(); 
myStackPanel.Margin = new Thickness(20); 
// Create a rectangle. Rectangle myRectangle = new Rectangle(); 
myRectangle.Width = 100; 
myRectangle.Height = 20; 
myRectangle.Margin = new Thickness(12,0,0,5); 
myRectangle.Fill = new SolidColorBrush(Color.FromArgb(170, 51, 51, 255)); 
myRectangle.HorizontalAlignment = HorizontalAlignment.Left; 
myStackPanel.Children.Add(myRectangle); 
// Assign the rectangle a name by // registering it with the page, so that // it can be targeted by storyboard // animations. this.RegisterName("myRectangle", myRectangle); 
// // Create an animation and a storyboard to animate the // rectangle. // DoubleAnimation myDoubleAnimation = new DoubleAnimation(100, 500, new Duration(TimeSpan.FromSeconds(5))); 
Storyboard.SetTargetName(myDoubleAnimation, "myRectangle"); 
Storyboard.SetTargetProperty(myDoubleAnimation, new PropertyPath(Rectangle.WidthProperty)); 
myStoryboard = new Storyboard(); 
myStoryboard.Children.Add(myDoubleAnimation); 
// // Create some buttons to control the storyboard // and a panel to contain them. // StackPanel buttonPanel = new StackPanel(); 
buttonPanel.Orientation = Orientation.Horizontal; 
Button beginButton = new Button(); 
beginButton.Content = "Begin"; 
beginButton.Click += new RoutedEventHandler(beginButton_Clicked); 
buttonPanel.Children.Add(beginButton); 
Button pauseButton = new Button(); 
pauseButton.Content = "Pause"; 
pauseButton.Click +=new RoutedEventHandler(pauseButton_Clicked); 
buttonPanel.Children.Add(pauseButton); 
Button resumeButton = new Button(); 
resumeButton.Content = "Resume"; 
resumeButton.Click +=new RoutedEventHandler(resumeButton_Clicked); 
buttonPanel.Children.Add(resumeButton); 
Button skipToFillButton = new Button(); 
skipToFillButton.Content = "Skip to Fill"; 
skipToFillButton.Click +=new RoutedEventHandler(skipToFillButton_Clicked); 
buttonPanel.Children.Add(skipToFillButton); 
Button setSpeedRatioButton = new Button(); 
setSpeedRatioButton.Content = "Triple Speed"; 
setSpeedRatioButton.Click +=new RoutedEventHandler(setSpeedRatioButton_Clicked); 
buttonPanel.Children.Add(setSpeedRatioButton); 
Button stopButton = new Button(); 
stopButton.Content = "Stop"; 
stopButton.Click +=new RoutedEventHandler(stopButton_Clicked); 
buttonPanel.Children.Add(stopButton); 
myStackPanel.Children.Add(buttonPanel); 
this.Content = myStackPanel; 
} // Begins the storyboard. private void beginButton_Clicked(object sender, RoutedEventArgs args) { // Specifying "true" as the second Begin parameter // makes this storyboard controllable. myStoryboard.Begin(this, true); 
} // Pauses the storyboard. private void pauseButton_Clicked(object sender, RoutedEventArgs args) { myStoryboard.Pause(this); 
} // Resumes the storyboard. private void resumeButton_Clicked(object sender, RoutedEventArgs args) { myStoryboard.Resume(this); 
} // Advances the storyboard to its fill period. private void skipToFillButton_Clicked(object sender, RoutedEventArgs args) { myStoryboard.SkipToFill(this); 
} // Updates the storyboard's speed. private void setSpeedRatioButton_Clicked(object sender, RoutedEventArgs args) { // Makes the storyboard progress three times as fast as normal. myStoryboard.SetSpeedRatio(this, 3); 
} // Stops the storyboard. private void stopButton_Clicked(object sender, RoutedEventArgs args) { myStoryboard.Stop(this); 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="3b115594-6a93-4972-b24d-61aa16f1c15f.xaml">How to: Use Event Triggers to Control a Storyboard After It Starts</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Control a Storyboard After It Starts to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

