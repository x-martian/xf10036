<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_d6bcdbe6_61b3_40a7_b381_4e02185b5a85"
  Tag     ="ComponentResourceKey Markup Extension"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>ComponentResourceKey Markup Extension</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Defines the names of resources that are to be loaded by system resources and theme support for custom controls. This enables a resource keyed by type, as a style would be by default handling during theme resource lookup, to resolve instead to a specified <Run FontWeight="Bold">ID</Run>
 key.
    </Paragraph>

    <Paragraph FontSize="22"><Run>XAML Attribute Usage (compact)</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object </Run>
x:Key="{<Run FontWeight="Bold">ComponentResourceKey</Run>
 {x:Type <Run FontStyle="italic">targetTypeName</Run>
}, <Run FontStyle="italic">targetID</Run>
}" .../></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>XAML Attribute Usage (verbose)</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object </Run>
x:Key="{<Run FontWeight="Bold">ComponentResourceKey</Run>
 TypeInTargetAssembly={x:Type <Run FontStyle="italic">targetTypeName</Run>
}, ResourceID=<Run FontStyle="italic">targetID</Run>
}" .../></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>XAML Values</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>This extension is almost always used to set the value of an <Hyperlink NavigateUri="1985cd45-f197-42d5-b75e-886add64b248.xaml">x:Key Attribute</Hyperlink>
 as part of a resource definition. It is also theoretically possible to use the <Run FontWeight="Bold">ComponentResourceKey</Run>
 extension to set some other property that takes a ResourceKey, but in practical terms few such properties exist. Therefore this usage example shows setting an <Run FontWeight="Bold">x:Key</Run>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph><Run FontStyle="italic">targetTypeName</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Names one of the public common language runtime (CLR) types that is defined by in the resource assembly associated with the component.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontStyle="italic">targetID</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Provides a key for the resource. When resources are looked up, <Run FontStyle="italic">targetID</Run>
 will be analogous to an <Hyperlink NavigateUri="1985cd45-f197-42d5-b75e-886add64b248.xaml">x:Key Attribute</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Remarks</Run>

    </Paragraph>

    <Paragraph>Attribute syntax is commonly used for the <Run FontWeight="Bold">ComponentResourceKey</Run>
 markup extension. The compact syntax shown relies on the System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object) constructor signature, and the order in which the <Span FontWeight="Bold"><Run FontStyle="italic">targetTypeName</Run>
</Span>
 and <Span FontWeight="Bold"><Run FontStyle="italic">targetID</Run>
</Span>
 are given is important. The verbose syntax relies on the System.Windows.ComponentResourceKey.#ctor default constructor, and then sets the TypeInTargetAssembly and ResourceId in a way that is analogous to a true attribute syntax on an object element. In the verbose syntax, order in which the properties are set is not important. The relationship and mechanisms of these two alternatives (compact and verbose) is described in more detail in the topic <Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>
. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">ComponentResourceKey</Run>
 can be used in object element syntax. In this case, specifying the value of both the <Run FontWeight="Bold">TypeInTargetAssembly</Run>
 and <Run FontWeight="Bold">ResourceId</Run>
 properties is required to properly initialize the extension.
    </Paragraph>

    <Paragraph>In the WPF XAML reader implementation, the handling for this markup extension is defined by the ComponentResourceKey class.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">ComponentResourceKey</Run>
 is a markup extension. Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties. All markup extensions in XAML use the { and } characters in their attribute syntax, which is the convention by which a XAML reader recognizes that a markup extension must process the attribute. For more information, see <Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Style
      <LineBreak/>ControlTemplate
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="481765e5-5467-4a75-9f7b-e10e2ac410d9.xaml">Styling and Templating</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="a80db4cd-dd0f-479f-a45f-3740017c22e4.xaml">XAML Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about ComponentResourceKey Markup Extension to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

