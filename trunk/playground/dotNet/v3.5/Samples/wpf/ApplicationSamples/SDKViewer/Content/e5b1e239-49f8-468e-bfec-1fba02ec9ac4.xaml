<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_e5b1e239_49f8_468e_bfec_1fba02ec9ac4"
  Tag     ="Implementing the UI Automation Invoke Control Pattern"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Implementing the UI Automation Invoke Control Pattern</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic introduces the InvokePattern <Run>control pattern</Run>
. It contains guidelines and conventions for implementing the IInvokeProvider interface and includes information about <Run FontWeight="Bold">InvokePattern</Run>
 events and properties. Links to additional references are listed at the end of the topic.
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">InvokePattern</Run>
 control pattern is used to support controls that do not maintain state when activated but rather initiate or perform a single, unambiguous action. Controls that do maintain state, such as check boxes and radio buttons, must instead implement IToggleProvider and ISelectionItemProvider respectively. For examples of controls that implement the Invoke control pattern, see <Hyperlink NavigateUri="8b81645b-8be3-4e26-9c98-4fb0fceca06b.xaml">Control Pattern Mapping for UI Automation Clients</Hyperlink>
.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="Implementation_Guidelines_and_Conventions">Implementation Guidelines and Conventions</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Required_Members_for_the_IValueProvider_Interface">Required Members for the IInvokeProvider Interface</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Exceptions">Exceptions</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Implementation Guidelines and Conventions
    </Paragraph>

    <Paragraph>When implementing the Invoke control pattern, note the following guidelines and conventions:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Controls implement <Run FontWeight="Bold">IInvokeProvider</Run>
 if the same behavior is not exposed through another control pattern provider. For example, if the Invoke method on a control performs the same action as the Expand or Collapse method, the control should not implement <Run FontWeight="Bold">IInvokeProvider</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Invoking a control is generally performed by clicking or double-clicking or pressing ENTER, a predefined keyboard shortcut, or some alternate combination of keystrokes.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>InvokedEvent is raised on a control that has been activated (as a response to a control carrying out its associated action). If possible, the event should be raised after the control has completed the action and returned without blocking. The Invoked event should be raised before servicing the Invoke request in the following scenarios: 
        </Paragraph>

        <List MarkerStyle="Disc">
          <ListItem>
            <Paragraph>It is not possible or practical to wait until the action is complete.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>The action requires user interaction.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>The action is time-consuming and will cause the calling client to block for a significant amount of time.
            </Paragraph>

          </ListItem>

        </List>

      </ListItem>

      <ListItem>
        <Paragraph>If invoking the control has significant side-effects, those side-effects should be exposed through the HelpText property. For example, even though Invoke is not associated with selection, <Run FontWeight="Bold">Invoke</Run>
 may cause another control to become selected.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Hover (or mouse-over) effects generally do not constitute an Invoked event. However, controls that perform an action (as opposed to cause a visual effect) based on the hover state should support the <Run FontWeight="Bold">InvokePattern</Run>
 control pattern.
        </Paragraph>

      </ListItem>

    </List>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>This implementation is considered an accessibility issue if the control can be invoked only as a result of a mouse-related side effect.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Invoking a control is different from selecting an item. However, depending on the control, invoking it may cause the item to become selected as a side-effect. For example, invoking a Microsoft Word document list item in the My Documents folder both selects the item and opens the document.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>An element can disappear from the UI Automation tree immediately upon being invoked. Requesting information from the element provided by the event callback may fail as a result. Pre-fetching cached information is the recommended workaround.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Controls can implement multiple control patterns. For example, the Fill Color control on the Microsoft Excel toolbar implements both the <Run FontWeight="Bold">InvokePattern</Run>
 and the ExpandCollapsePattern control patterns. <Run FontWeight="Bold">ExpandCollapsePattern</Run>
 exposes the menu and the <Run FontWeight="Bold">InvokePattern</Run>
 fills the active selection with the chosen color.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Required Members for the IInvokeProvider Interface
    </Paragraph>

    <Paragraph>The following properties and methods are required for implementing <Run FontWeight="Bold">IInvokeProvider</Run>
.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Required members 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Member type 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Notes 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Invoke</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>method
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph><Run FontWeight="Bold">Invoke</Run>
 is an asynchronous call and must return immediately without blocking. 
            </Paragraph>

            <Table CellSpacing="5">
              <TableRowGroup>
                <TableRow>
                  <TableCell>
                    <Paragraph>Note: 
                    </Paragraph>

                  </TableCell>

                </TableRow>

                <TableRow>
                  <TableCell>
                    <Paragraph>This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked. Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.
                    </Paragraph>

                  </TableCell>

                </TableRow>

              </TableRowGroup>

            </Table>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Exceptions
    </Paragraph>

    <Paragraph>Providers must throw the following exceptions.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Exception Type 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Condition 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>ElementNotEnabledException 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>If the control is not enabled.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="0d635c35-ffa8-4dc8-bbc9-12fcd5445776.xaml">Support Control Patterns in a UI Automation Provider</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="5ee2de3f-256c-43ec-b64c-62ace91f9983.xaml">Invoke a Control Using UI Automation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="ec722dff-6009-4279-b86a-e18d3fa94ebf.xaml">Use Caching in UI Automation</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="cc229b33-234b-469b-ad60-f0254f32d45d.xaml">UI Automation Control Patterns Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="571561d8-5f49-43a9-a054-87735194e013.xaml">UI Automation Control Patterns for Clients</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="03b98058-bdb3-47a0-8ff7-45e6cdf67166.xaml">UI Automation Tree Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Implementing the UI Automation Invoke Control Pattern to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

