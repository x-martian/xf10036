<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_74809167_bf8e_48b7_a2e7_b4ea08bc7d8c"
  Tag     ="Walkthrough: Mapping Properties Using the WindowsFormsHost Element"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Walkthrough: Mapping Properties Using the WindowsFormsHost Element</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This walkthrough shows you how to use the PropertyMap property to map WPF properties to corresponding properties on a hosted Windows Forms control.
    </Paragraph>

    <Paragraph>Tasks illustrated in this walkthrough include:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Creating the project.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Defining the application layout.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Defining a new property mapping.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Removing a default property mapping.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Replacing a default property mapping.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Extending a default property mapping.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>For a complete code listing of the tasks illustrated in this walkthrough, see Mapping Properties Using the WindowsFormsHost Element Sample.
    </Paragraph>

    <Paragraph>When you are finished, you will be able to map WPF properties to corresponding properties on a hosted Windows Forms control.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>The dialog boxes and menu commands you see might differ from those described in Help, depending on your active settings or edition. To change your settings, choose <Run FontWeight="Bold">Import and Export Settings</Run>
 on the <Run FontWeight="Bold">Tools</Run>
 menu. For more information, see Visual Studio Settings.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Prerequisites</Run>

    </Paragraph>

    <Paragraph>To complete this walkthrough you will need:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Development Tools for .NET Framework 3.0, which enable you to create a WPF application project. For information on installing these tools, see Installation Instructions for the Windows SDK.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Creating the Project</Run>

    </Paragraph>

    <Paragraph FontSize="18">To create and set up the project
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Create a Windows Application (WPF) project named <Run FontWeight="Bold">PropertyMappingWithWfh</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In Solution Explorer, add a reference to the WindowsFormsIntegration assembly, which is named WindowsFormsIntegration.dll. 
        </Paragraph>

        <Paragraph>The default location for this file is %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In Solution Explorer, add references to the System.Drawing and System.Windows.Forms assemblies.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Defining the Application Layout</Run>

    </Paragraph>

    <Paragraph>The WPF-based application uses the WindowsFormsHost element to host a Windows Forms control. 
    </Paragraph>

    <Paragraph FontSize="18">To define the application layout
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Open Window1.xaml in the XAML Code Editor.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Replace the existing code with the following code.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>XAML </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Window x:Class="PropertyMappingWithWfh.Window1" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="PropertyMappingWithWfh" Height="300" Width="300" Loaded="WindowLoaded"> 
&lt;DockPanel Name="panel1" LastChildFill="True"> 
&lt;WindowsFormsHost Name="wfHost" DockPanel.Dock="Left" SizeChanged="Window1_SizeChanged" FontSize="20" /> 
&lt;/DockPanel> 
&lt;/Window> </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>XAML </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Window x:Class="Window1" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="PropertyMappingWithWfh" Height="300" Width="300" Loaded="WindowLoaded"> 
&lt;DockPanel Name="panel1" LastChildFill="True"> 
&lt;WindowsFormsHost Name="wfHost" DockPanel.Dock="Left" SizeChanged="Window1_SizeChanged" FontSize="20" /> 
&lt;/DockPanel> 
&lt;/Window> </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

      <ListItem>
        <Paragraph>Open Window1.xaml.cs in the Code Editor.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>At the top of the file, import the following namespaces.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System.Drawing; 
using System.Drawing.Drawing2D; 
using System.Windows.Forms; 
using System.Windows.Forms.Integration; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Imports System.Drawing Imports System.Drawing.Drawing2D Imports System.Windows.Forms Imports System.Windows.Forms.Integration </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Defining a New Property Mapping</Run>

    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">WindowsFormsHost</Run>
 element provides several default property mappings. You add a new property mapping by calling the Add method on the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's <Run FontWeight="Bold">PropertyMap</Run>
. 
    </Paragraph>

    <Paragraph FontSize="18">To define a new property mapping 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Copy the following code into the definition for the <Run>Window1</Run>
 class.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// The AddClipMapping method adds a custom // mapping for the Clip property. private void AddClipMapping() { wfHost.PropertyMap.Add( "Clip", new PropertyTranslator(OnClipChange)); 
} // The OnClipChange method assigns an elliptical clipping // region to the hosted control's Region property. private void OnClipChange(object h, String propertyName, object value) { WindowsFormsHost host = h as WindowsFormsHost; 
System.Windows.Forms.CheckBox cb = host.Child as System.Windows.Forms.CheckBox; 
if (cb != null) { cb.Region = this.CreateClipRegion(); 
} } // The Window1_SizeChanged method handles the window's // SizeChanged event. It calls the OnClipChange method explicitly // to assign a new clipping region to the hosted control. private void Window1_SizeChanged(object sender, SizeChangedEventArgs e) { this.OnClipChange(wfHost, "Clip", null); 
} // The CreateClipRegion method creates a Region from an // elliptical GraphicsPath. private Region CreateClipRegion() { GraphicsPath path = new GraphicsPath(); 
path.StartFigure(); 
path.AddEllipse(new System.Drawing.Rectangle( 0, 0, (int)wfHost.ActualWidth, (int)wfHost.ActualHeight ) ); 
path.CloseFigure(); 
return( new Region(path) ); 
} </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' The AddClipMapping method adds a custom mapping ' for the Clip property. Private Sub AddClipMapping() wfHost.PropertyMap.Add( _ "Clip", _ New PropertyTranslator(AddressOf OnClipChange)) End Sub ' The OnClipChange method assigns an elliptical clipping ' region to the hosted control's Region property. Private Sub OnClipChange( _ ByVal h As Object, _ ByVal propertyName As String, _ ByVal value As Object) Dim host As WindowsFormsHost = h Dim cb As System.Windows.Forms.CheckBox = host.Child If cb IsNot Nothing Then cb.Region = Me.CreateClipRegion() End If End Sub ' The Window1_SizeChanged method handles the window's ' SizeChanged event. It calls the OnClipChange method explicitly ' to assign a new clipping region to the hosted control. Private Sub Window1_SizeChanged( _ ByVal sender As Object, _ ByVal e As SizeChangedEventArgs) Me.OnClipChange(wfHost, "Clip", Nothing) End Sub ' The CreateClipRegion method creates a Region from an ' elliptical GraphicsPath. Private Function CreateClipRegion() As [Region] Dim path As New GraphicsPath() path.StartFigure() path.AddEllipse(New System.Drawing.Rectangle( _ 0, _ 0, _ wfHost.ActualWidth, _ wfHost.ActualHeight)) path.CloseFigure() Return New [Region](path) End Function </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph>The <Run>AddClipMapping</Run>
 method adds a new mapping for the Clip property. 
        </Paragraph>

        <Paragraph>The <Run>OnClipChange</Run>
 method translates the <Run FontWeight="Bold">Clip</Run>
 property to the Windows Forms Region property. 
        </Paragraph>

        <Paragraph>The <Run>Window1_SizeChanged</Run>
 method handles the window's SizeChanged event and sizes the clipping region to fit the application window.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Removing a Default Property Mapping</Run>

    </Paragraph>

    <Paragraph>Remove a default property mapping by calling the Remove method on the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's <Run FontWeight="Bold">PropertyMap</Run>
. 
    </Paragraph>

    <Paragraph FontSize="18">To remove a default property mapping
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Copy the following code into the definition for the <Run>Window1</Run>
 class.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// The RemoveCursorMapping method deletes the default // mapping for the Cursor property. private void RemoveCursorMapping() { wfHost.PropertyMap.Remove("Cursor"); 
} </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' The RemoveCursorMapping method deletes the default ' mapping for the Cursor property. Private Sub RemoveCursorMapping() wfHost.PropertyMap.Remove("Cursor") End Sub </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph>The <Run>RemoveCursorMapping</Run>
 method deletes the default mapping for the Cursor property.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Replacing a Default Property Mapping</Run>

    </Paragraph>

    <Paragraph>Replace a default property mapping by removing the default mapping and calling the <Run FontWeight="Bold">Add</Run>
 method on the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's <Run FontWeight="Bold">PropertyMap</Run>
. 
    </Paragraph>

    <Paragraph FontSize="18">To replace a default property mapping
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Copy the following code into the definition for the <Run>Window1</Run>
 class.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// The ReplaceFlowDirectionMapping method replaces the // default mapping for the FlowDirection property. private void ReplaceFlowDirectionMapping() { wfHost.PropertyMap.Remove("FlowDirection"); 
wfHost.PropertyMap.Add( "FlowDirection", new PropertyTranslator(OnFlowDirectionChange)); 
} // The OnFlowDirectionChange method translates a // Windows Presentation Foundation FlowDirection value // to a Windows Forms RightToLeft value and assigns // the result to the hosted control's RightToLeft property. private void OnFlowDirectionChange(object h, String propertyName, object value) { WindowsFormsHost host = h as WindowsFormsHost; 
System.Windows.FlowDirection fd = (System.Windows.FlowDirection)value; 
System.Windows.Forms.CheckBox cb = host.Child as System.Windows.Forms.CheckBox; 
cb.RightToLeft = (fd == System.Windows.FlowDirection.RightToLeft ) ? RightToLeft.Yes : RightToLeft.No; 
} // The cb_CheckedChanged method handles the hosted control's // CheckedChanged event. If the Checked property is true, // the flow direction is set to RightToLeft, otherwise it is // set to LeftToRight. private void cb_CheckedChanged(object sender, EventArgs e) { System.Windows.Forms.CheckBox cb = sender as System.Windows.Forms.CheckBox; 
wfHost.FlowDirection = ( cb.CheckState == CheckState.Checked ) ? System.Windows.FlowDirection.RightToLeft : System.Windows.FlowDirection.LeftToRight; 
} </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' The ReplaceFlowDirectionMapping method replaces the ' default mapping for the FlowDirection property. Private Sub ReplaceFlowDirectionMapping() wfHost.PropertyMap.Remove("FlowDirection") wfHost.PropertyMap.Add( _ "FlowDirection", _ New PropertyTranslator(AddressOf OnFlowDirectionChange)) End Sub ' The OnFlowDirectionChange method translates a ' Windows Presentation Foundation FlowDirection value ' to a Windows Forms RightToLeft value and assigns ' the result to the hosted control's RightToLeft property. Private Sub OnFlowDirectionChange( _ ByVal h As Object, _ ByVal propertyName As String, _ ByVal value As Object) Dim host As WindowsFormsHost = h Dim fd As System.Windows.FlowDirection = _ CType(value, System.Windows.FlowDirection) Dim cb As System.Windows.Forms.CheckBox = host.Child cb.RightToLeft = IIf(fd = System.Windows.FlowDirection.RightToLeft, _ RightToLeft.Yes, _ RightToLeft.No) End Sub ' The cb_CheckedChanged method handles the hosted control's ' CheckedChanged event. If the Checked property is true, ' the flow direction is set to RightToLeft, otherwise it is ' set to LeftToRight. Private Sub cb_CheckedChanged( _ ByVal sender As Object, _ ByVal e As EventArgs) Dim cb As System.Windows.Forms.CheckBox = sender wfHost.FlowDirection = IIf(cb.CheckState = CheckState.Checked, _ System.Windows.FlowDirection.RightToLeft, _ System.Windows.FlowDirection.LeftToRight) End Sub </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph>The <Run>ReplaceFlowDirectionMapping</Run>
 method replaces the default mapping for the FlowDirection property. 
        </Paragraph>

        <Paragraph>The <Run>OnFlowDirectionChange</Run>
 method translates the <Run FontWeight="Bold">FlowDirection</Run>
 property to the Windows Forms RightToLeft property. 
        </Paragraph>

        <Paragraph>The <Run>cb_CheckedChanged</Run>
 method handles the CheckedChanged event on the CheckBox control. It assigns the <Run FontWeight="Bold">FlowDirection</Run>
 property based on the value of the CheckState property
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Extending a Default Property Mapping</Run>

    </Paragraph>

    <Paragraph>You can use a default property mapping and also extend it with your own mapping. 
    </Paragraph>

    <Paragraph FontSize="18">To extend a default property mapping
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Copy the following code into the definition for the <Run>Window1</Run>
 class.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// The ExtendBackgroundMapping method adds a property // translator if a mapping already exists. private void ExtendBackgroundMapping() { if (wfHost.PropertyMap["Background"] != null) { wfHost.PropertyMap["Background"] += new PropertyTranslator(OnBackgroundChange); 
} } // The OnBackgroundChange method assigns a specific image // to the hosted control's BackgroundImage property. private void OnBackgroundChange(object h, String propertyName, object value) { WindowsFormsHost host = h as WindowsFormsHost; 
System.Windows.Forms.CheckBox cb = host.Child as System.Windows.Forms.CheckBox; 
ImageBrush b = value as ImageBrush; 
if (b != null) { cb.BackgroundImage = new System.Drawing.Bitmap(@"C:\WINDOWS\Santa Fe Stucco.bmp"); 
} } </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' The ExtendBackgroundMapping method adds a property ' translator if a mapping already exists. Private Sub ExtendBackgroundMapping() If wfHost.PropertyMap("Background") IsNot Nothing Then wfHost.PropertyMap("Background") = PropertyTranslator.Combine( _ wfHost.PropertyMap("Background"), _ PropertyTranslator.CreateDelegate( _ GetType(PropertyTranslator), _ Me, _ "OnBackgroundChange")) End If End Sub ' The OnBackgroundChange method assigns a specific image ' to the hosted control's BackgroundImage property. Private Sub OnBackgroundChange(ByVal h As Object, ByVal propertyName As String, ByVal value As Object) Dim host As WindowsFormsHost = h Dim cb As System.Windows.Forms.CheckBox = host.Child Dim b As ImageBrush = value If Not (b Is Nothing) Then cb.BackgroundImage = New System.Drawing.Bitmap("C:\WINDOWS\Santa Fe Stucco.bmp") End If End Sub </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph>The <Run>ExtendBackgroundMapping</Run>
 method adds a custom property translator to the existing Background property mapping. 
        </Paragraph>

        <Paragraph>The <Run>OnBackgroundChange</Run>
 method assigns a specific image to the hosted control's BackgroundImage property. The <Run>OnBackgroundChange</Run>
 method is called after the default property mapping is applied.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Initializing Your Property Mappings</Run>

    </Paragraph>

    <Paragraph>Set up your property mappings by calling the previously described methods in the Loaded event handler. 
    </Paragraph>

    <Paragraph FontSize="18">To initialize your property mappings
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Copy the following code into the definition for the <Run>Window1</Run>
 class.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// The WindowLoaded method handles the Loaded event. // It enables Windows Forms visual styles, creates // a Windows Forms checkbox control, and assigns the // control as the child of the WindowsFormsHost element. // This method also modifies property mappings on the // WindowsFormsHost element. private void WindowLoaded(object sender, RoutedEventArgs e) { System.Windows.Forms.Application.EnableVisualStyles(); 
// Create a Windows Forms checkbox control and assign // it as the WindowsFormsHost element's child. System.Windows.Forms.CheckBox cb = new System.Windows.Forms.CheckBox(); 
cb.Text = "Windows Forms checkbox"; 
cb.Dock = DockStyle.Fill; 
cb.TextAlign = ContentAlignment.MiddleCenter; 
cb.CheckedChanged += new EventHandler(cb_CheckedChanged); 
wfHost.Child = cb; 
// Replace the default mapping for the FlowDirection property. this.ReplaceFlowDirectionMapping(); 
// Remove the mapping for the Cursor property. this.RemoveCursorMapping(); 
// Add the mapping for the Clip property. this.AddClipMapping(); 
// Add another mapping for the Background property. this.ExtendBackgroundMapping(); 
// Cause the OnFlowDirectionChange delegate to be called. wfHost.FlowDirection = System.Windows.FlowDirection.LeftToRight; 
// Cause the OnClipChange delegate to be called. wfHost.Clip = new RectangleGeometry(); 
// Cause the OnBackgroundChange delegate to be called. wfHost.Background = new ImageBrush(); 
} </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>Visual Basic </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>' The WindowLoaded method handles the Loaded event. ' It enables Windows Forms visual styles, creates ' a Windows Forms checkbox control, and assigns the ' control as the child of the WindowsFormsHost element. ' This method also modifies property mappings on the ' WindowsFormsHost element. Private Sub WindowLoaded( _ ByVal sender As Object, _ ByVal e As RoutedEventArgs) System.Windows.Forms.Application.EnableVisualStyles() ' Create a Windows Forms checkbox control and assign ' it as the WindowsFormsHost element's child. Dim cb As New System.Windows.Forms.CheckBox() cb.Text = "Windows Forms checkbox" cb.Dock = DockStyle.Fill cb.TextAlign = ContentAlignment.MiddleCenter AddHandler cb.CheckedChanged, AddressOf cb_CheckedChanged wfHost.Child = cb ' Replace the default mapping for the FlowDirection property. Me.ReplaceFlowDirectionMapping() ' Remove the mapping for the Cursor property. Me.RemoveCursorMapping() ' Add the mapping for the Clip property. Me.AddClipMapping() ' Add another mapping for the Background property. Me.ExtendBackgroundMapping() ' Cause the OnFlowDirectionChange delegate to be called. wfHost.FlowDirection = System.Windows.FlowDirection.LeftToRight ' Cause the OnClipChange delegate to be called. wfHost.Clip = New RectangleGeometry() ' Cause the OnBackgroundChange delegate to be called. wfHost.Background = New ImageBrush() End Sub </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph>The <Run>WindowLoaded</Run>
 method handles the <Run FontWeight="Bold">Loaded</Run>
 event and performs the following initialization. 
        </Paragraph>

        <List MarkerStyle="Disc">
          <ListItem>
            <Paragraph>Creates a Windows Forms <Run FontWeight="Bold">CheckBox</Run>
 control.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Calls the methods you defined earlier in the walkthrough to set up the property mappings.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Assigns initial values to the mapped properties.
            </Paragraph>

          </ListItem>

        </List>

      </ListItem>

      <ListItem>
        <Paragraph>Press F5 to build and run the application. Click the check box to see the effect of the <Run FontWeight="Bold">FlowDirection</Run>
 mapping. When you click the check box, the layout reverses its left-right orientation. 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="9cb88415-39b0-4c46-80c4-ff325b674286.xaml">Walkthrough: Hosting a Windows Forms Control in Windows Presentation Foundation</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap
      <LineBreak/>System.Windows.Forms.Integration.ElementHost.PropertyMap
      <LineBreak/>WindowsFormsHost
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="999d8298-9c04-467d-a453-86e41002057d.xaml">Windows Forms and WPF Property Mapping</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="d655de05-bf63-4814-bc64-6b3be01c70a2.xaml">Migration and Interoperability</Hyperlink>

      <LineBreak/>Migration and Interoperability Samples
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Walkthrough: Mapping Properties Using the WindowsFormsHost Element to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

