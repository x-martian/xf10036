<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_7ce209c2_621b_4977_b643_565f7e663534"
  Tag     ="x:XData XAML Directive Element"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>x:XData XAML Directive Element</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Usage</Run>

    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">x:XData</Run>
 XAML directive element is used to place XML data islands within an XAML page. XML elements within this directive element will not be treated as if they are a part of the WPF namespace and can contain arbitrary well-formed XML.
    </Paragraph>

    <Paragraph FontSize="16pt">Dependencies
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">x:XData</Run>
 element is only valid as a child element of an XmlDataProvider, or alternatively as the child element of the XmlSerializer property of <Run FontWeight="Bold">XmlDataProvider</Run>
 property expressed in object property syntax.
    </Paragraph>

    <Paragraph FontSize="22"><Run>Remarks</Run>

    </Paragraph>

    <Paragraph>The XML elements within this directive element can redeclare all possible namespaces and prefixes within the data island. Typically the data should redefine the base xmlns within the data island to be an empty string. This is easiest for simple data islands because the XPath expressions used to reference and bind to the data can avoid inclusion of prefixes. More complex data islands may choose to define multiple prefixes for the data. In this case all <Run FontWeight="Bold">XPath</Run>
 expression references will need to include the appropriate namespace-mapped prefix.
    </Paragraph>

    <Paragraph FontSize="22"><Run>Example Usage</Run>

    </Paragraph>

    <Paragraph>
&lt;XmlDataProvider ...>
    </Paragraph>

    <Paragraph>
&lt;<Run FontWeight="Bold">x:XData</Run>
>
    </Paragraph>

    <Paragraph><Run FontStyle="italic">
&lt;elementDataRoot></Run>

    </Paragraph>

    <Paragraph><Run FontStyle="italic">
&lt;elementData/></Run>

    </Paragraph>

    <Paragraph><Run FontStyle="italic">
&lt;/elementDataRoot>...</Run>

    </Paragraph>

    <Paragraph>
&lt;/<Run FontWeight="Bold">x:XData</Run>
>
    </Paragraph>

    <Paragraph>
&lt;/XmlDataProvider>
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>XmlDataProvider
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about x:XData XAML Directive Element to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

