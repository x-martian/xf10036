<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_f5b182f3_c5c7_4cbe_9f2f_65e690d08255"
  Tag     ="Painting with Solid Colors and Gradients Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Painting with Solid Colors and Gradients Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Everything visible on your screen is visible because it was painted by a brush. For example, a brush is used to describe the background of a button, the foreground of text, and the fill of a shape. This topic introduces the concepts of painting with Windows Presentation Foundation (WPF) brushes and provides examples in Extensible Application Markup Language (XAML) and code. Brushes enable you to paint user interface (UI) objects with anything from simple, solid colors to complex sets of patterns and images. 
    </Paragraph>

    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="using">Painting with a Brush</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="solidcolor">Painting an Area with a Solid Color</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="gradient">Painting an Area with a Gradient</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="lineargradientbrush">Linear Gradients</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="radialgradients">Radial Gradients</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="specifyinggradientcolors">Specifying Transparent or Partially-Transparent Gradient Stops</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="brushesAndOpacity">Specifying the Opacity of a Brush</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="transformbrushes">Transforming a Brush</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="otherbrushes">Painting with Images, Drawings, Visuals, and Patterns</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Painting with a Brush
    </Paragraph>

    <Paragraph>A Brush "paints" an area with its output. Different brushes have different types of output. Some brushes paint an area with a solid color, others with a gradient, pattern, image, or drawing. The following list describes the different types of WPF brushes:
    </Paragraph>

    <Paragraph/>
    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>SolidColorBrush: Paints an area with a solid color.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>LinearGradientBrush: Paints an area with a linear gradient.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>RadialGradientBrush: Paints an area with a radial gradient.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ImageBrush: Paints an area with an image.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>DrawingBrush: Paints an area with a drawing. The drawing may include vector and bitmap objects.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>VisualBrush: Paints an area with a Visual object. A VisualBrush enables you to project content from one portion of your application into another area; 
it's very useful for creating reflection effects and magnifying portions of the screen.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph/>
    <Paragraph FontSize="22">Painting an Area with a Solid Color
    </Paragraph>

    <Paragraph>Use the SolidColorBrush class to paint an area with a solid color.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="18">Using a SolidColorBrush in "XAML"
    </Paragraph>

    <Paragraph>To paint an area with a solid color in XAML, use one of the following options.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Select a predefined solid color brush by name. For example, you can set a button's Background to "Red" or "MediumBlue". For a list of other predefined solid color brushes, see the static properties of the Brushes class. The following is an example. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>XAML </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This button's background is painted with a red SolidColorBrush, described using a named color. --> 
&lt;Button Background="Red">A Button
&lt;/Button> </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Choose a color from the 32-bit color palette by specifying the amounts of red, green, and blue to combine into a single solid color. The format for specifying a color from the 32-bit palette is "<Run FontStyle="italic">#rrggbb</Run>
", where <Run FontStyle="italic">rr</Run>
 is a two digit hexadecimal number specifying the relative amount of red, <Run FontStyle="italic">gg</Run>
 specifies the amount of green, and <Run FontStyle="italic">bb</Run>
 specifies the amount of blue. Additionally, the color can be specified as "#<Run FontStyle="italic">aarrggbb</Run>
" where <Run FontStyle="italic">aa</Run>
 specifies the <Run FontStyle="italic">alpha</Run>
 value, or transparency, of the color. This approach enables you to create colors that are partially transparent. In the following example, the Background of a Button is set to fully-opaque red using hexadecimal notation. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>XAML </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This button's background is painted with a red SolidColorBrush, described using hexadecimal notation. --> 
&lt;Button Background="#FFFF0000">A Button
&lt;/Button> </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Use property tag syntax to describe a SolidColorBrush. This syntax is more verbose but enables you to specify additional settings, such as the brush's opacity. In the following example, the Background properties of two Button elements are set to fully-opaque red. The first brush's color is described using a predefined color name. The second brush's color is described using hexadecimal notation. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>XAML </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- Both of these buttons' backgrounds are painted with red SolidColorBrush objects, described using object element syntax. --> 
&lt;Button>A Button 
&lt;Button.Background> 
&lt;SolidColorBrush Color="Red" /> 
&lt;/Button.Background> 
&lt;/Button> 
&lt;Button>A Button 
&lt;Button.Background> 
&lt;SolidColorBrush Color="#FFFF0000" /> 
&lt;/Button.Background> 
&lt;/Button> </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Painting with a SolidColorBrush in Code
    </Paragraph>

    <Paragraph>To paint an area with a solid color in code, use one of the following options.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Use one of the predefined brushes provided by the Brushes class. In the following example, the Background of a Button is set to Red. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
myButton.Content = "A Button"; 
myButton.Background = Brushes.Red; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Create a SolidColorBrush and set its Color property using a Color structure. You can use a predefined color from the Colors class or you can create a Color using the static FromArgb method. 
        </Paragraph>

        <Paragraph>The following example shows how to set the Color property of a SolidColorBrush using a predefined color.
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run>C# </Run>

                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
myButton.Content = "A Button"; 
SolidColorBrush mySolidColorBrush = new SolidColorBrush(); 
mySolidColorBrush.Color = Colors.Red; 
myButton.Background = mySolidColorBrush; 
</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

      </ListItem>

    </List>

    <Paragraph>The static <Run FontWeight="Bold">FromArgb</Run>
 enables you to specify the color's <Run>alpha</Run>
, red, green, and blue values. The typical range for each of these values is 0-255. For example, an alpha value of 0 indicates that a color is completely transparent, while a value of 255 indicates the color is completely opaque. Likewise, a red value of 0 indicates that a color has no red in it, while a value of 255 indicates a color has the maximum amount of red possible. In the following example, a brush's color is described by specifying alpha, red, green, and blue values.
    </Paragraph>

    <Paragraph>For additional ways to specify color, see the Color reference topic.
    </Paragraph>

    <Paragraph FontSize="22">Painting an Area with a Gradient
    </Paragraph>

    <Paragraph>A gradient brush paints an area with multiple colors that blend into each other along an axis. You can use them to create impressions of light and shadow, giving your controls a three-dimensional feel. You can also use them to simulate glass, chrome, water, and other smooth surfaces. WPF provides two types of gradient brushes: LinearGradientBrush and RadialGradientBrush.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Linear Gradients
    </Paragraph>

    <Paragraph>A LinearGradientBrush paints an area with a gradient defined along a line, the <Run FontStyle="italic">gradient axis</Run>
. You specify the gradient's colors and their location along the gradient axis using GradientStop objects. You may also modify the gradient axis, which enables you to create horizontal and vertical gradients and to reverse the gradient direction. The gradient axis is described in the next section. By default, a diagonal gradient is created.
    </Paragraph>

    <Paragraph/>
    <Paragraph>The following example shows the code that creates a linear gradient with four colors.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This rectangle is painted with a diagonal linear gradient. --> 
&lt;Rectangle Width="200" Height="100"> 
&lt;Rectangle.Fill> 
&lt;LinearGradientBrush StartPoint="0,0" EndPoint="1,1"> 
&lt;GradientStop Color="Yellow" Offset="0.0" /> 
&lt;GradientStop Color="Red" Offset="0.25" /> 
&lt;GradientStop Color="Blue" Offset="0.75" /> 
&lt;GradientStop Color="LimeGreen" Offset="1.0" /> 
&lt;/LinearGradientBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Rectangle diagonalFillRectangle = new Rectangle(); 
diagonalFillRectangle.Width = 200; 
diagonalFillRectangle.Height = 100; 
// Create a diagonal linear gradient with four stops. LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush(); 
myLinearGradientBrush.StartPoint = new Point(0,0); 
myLinearGradientBrush.EndPoint = new Point(1,1); 
myLinearGradientBrush.GradientStops.Add( new GradientStop(Colors.Yellow, 0.0)); 
myLinearGradientBrush.GradientStops.Add( new GradientStop(Colors.Red, 0.25)); 
myLinearGradientBrush.GradientStops.Add( new GradientStop(Colors.Blue, 0.75)); 
myLinearGradientBrush.GradientStops.Add( new GradientStop(Colors.LimeGreen, 1.0)); 
// Use the brush to paint the rectangle. diagonalFillRectangle.Fill = myLinearGradientBrush; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This code produces the following gradient:
    </Paragraph>

    <Paragraph>The GradientStop is the basic building block of a gradient brush. A gradient stop specifies a Color at an Offset along the gradient axis.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>The gradient stop's Color property specifies the color of the gradient stop. You may set the color by using a predefined color (provided by the Colors class) or by specifying ScRGB or ARGB values. In XAML, you may also use hexadecimal notation to describe a color. For more information, see the Color structure.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The gradient stop's Offset property specifies the position of the gradient stop's color on the gradient axis. The offset is a Double that ranges from 0 to 1. The closer a gradient stop's offset value is to 0, the closer the color is to the start of the gradient. The closer the gradient's offset value is to 1, the closer the color is to the end of the gradient.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The color of each point between gradient stops is linearly interpolated as a combination of the color specified by the two bounding gradient stops. The following illustration highlights the gradient stops in the previous example. The circles mark the position of gradient stops and a dashed line shows the gradient axis.
    </Paragraph>

    <Paragraph>The first gradient stop specifies the color yellow at an offset of <Run>0.0</Run>
. The second gradient stop specifies the color red at an offset of <Run>0.25</Run>
. The points between these two stops gradually change from yellow to red as you move from left to right along the gradient axis. The third gradient stop specifies the color blue at an offset of <Run>0.75</Run>
. The points between the second and third gradient stops gradually change from red to blue. The fourth gradient stop specifies the color lime green at an offset of <Run>1.0</Run>
. The points between the third and fourth gradient stops gradually change from blue to lime green.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="18">The Gradient Axis
    </Paragraph>

    <Paragraph>As previously mentioned, a linear gradient brush's gradient stops are positioned along a line, the gradient axis. You may change the orientation and size of the line using the brush's StartPoint and EndPoint properties. By manipulating the brush's StartPoint and EndPoint, you can create horizontal and vertical gradients, reverse the gradient direction, condense the gradient spread, and more.
    </Paragraph>

    <Paragraph>By default, the linear gradient brush's StartPoint and EndPoint are relative to the area being painted. The point (0,0) represents the upper-left corner of the area being painted, and (1,1) represents the lower-right corner of the area being painted. The default StartPoint of a LinearGradientBrush is (0,0), and its default EndPoint is (1,1), which creates a diagonal gradient starting at the upper-left corner and extending to the lower-right corner of the area being painted. The following illustration shows the gradient axis of a linear gradient brush with default StartPoint and EndPoint.
    </Paragraph>

    <Paragraph>The following example shows how to create a horizontal gradient by specifying the brush's StartPoint and EndPoint. Notice that the gradient stops are the same as in the previous examples; 
by simply changing the StartPoint and EndPoint, the gradient has been changed from diagonal to horizontal. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This rectangle is painted with a horizontal linear gradient. --> 
&lt;Rectangle Width="200" Height="100"> 
&lt;Rectangle.Fill> 
&lt;LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5"> 
&lt;GradientStop Color="Yellow" Offset="0.0" /> 
&lt;GradientStop Color="Red" Offset="0.25" /> 
&lt;GradientStop Color="Blue" Offset="0.75" /> 
&lt;GradientStop Color="LimeGreen" Offset="1.0" /> 
&lt;/LinearGradientBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Rectangle horizontalFillRectangle = new Rectangle(); 
horizontalFillRectangle.Width = 200; 
horizontalFillRectangle.Height = 100; 
// Create a horizontal linear gradient with four stops. LinearGradientBrush myHorizontalGradient = new LinearGradientBrush(); 
myHorizontalGradient.StartPoint = new Point(0,0.5); 
myHorizontalGradient.EndPoint = new Point(1,0.5); 
myHorizontalGradient.GradientStops.Add( new GradientStop(Colors.Yellow, 0.0)); 
myHorizontalGradient.GradientStops.Add( new GradientStop(Colors.Red, 0.25)); 
myHorizontalGradient.GradientStops.Add( new GradientStop(Colors.Blue, 0.75)); 
myHorizontalGradient.GradientStops.Add( new GradientStop(Colors.LimeGreen, 1.0)); 
// Use the brush to paint the rectangle. horizontalFillRectangle.Fill = myHorizontalGradient; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following illustration shows the gradient that is created. The gradient axis is marked with a dashed line, and the gradient stops are marked with circles.
    </Paragraph>

    <Paragraph>The next example shows how to create a vertical gradient.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This rectangle is painted with a vertical gradient. --> 
&lt;Rectangle Width="200" Height="100"> 
&lt;Rectangle.Fill> 
&lt;LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1"> 
&lt;GradientStop Color="Yellow" Offset="0.0" /> 
&lt;GradientStop Color="Red" Offset="0.25" /> 
&lt;GradientStop Color="Blue" Offset="0.75" /> 
&lt;GradientStop Color="LimeGreen" Offset="1.0" /> 
&lt;/LinearGradientBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Rectangle verticalFillRectangle = new Rectangle(); 
verticalFillRectangle.Width = 200; 
verticalFillRectangle.Height = 100; 
// Create a vertical linear gradient with four stops. LinearGradientBrush myVerticalGradient = new LinearGradientBrush(); 
myVerticalGradient.StartPoint = new Point(0.5,0); 
myVerticalGradient.EndPoint = new Point(0.5,1); 
myVerticalGradient.GradientStops.Add( new GradientStop(Colors.Yellow, 0.0)); 
myVerticalGradient.GradientStops.Add( new GradientStop(Colors.Red, 0.25)); 
myVerticalGradient.GradientStops.Add( new GradientStop(Colors.Blue, 0.75)); 
myVerticalGradient.GradientStops.Add( new GradientStop(Colors.LimeGreen, 1.0)); 
// Use the brush to paint the rectangle. verticalFillRectangle.Fill = myVerticalGradient; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following illustration shows the gradient that is created. The gradient axis is marked with a dashed line, and the gradient stops are marked with circles.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Radial Gradients
    </Paragraph>

    <Paragraph>Like a LinearGradientBrush, a RadialGradientBrush paints an area with colors that blend together along an axis. The previous examples showed how a linear gradient brush's axis is a straight line. A radial gradient brush's axis is defined by a circle; 
its colors "radiate" outward from its origin.
    </Paragraph>

    <Paragraph>In the following example, a radial gradient brush is used to paint the interior of a rectangle. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;!-- This rectangle is painted with a diagonal linear gradient. --> 
&lt;Rectangle Width="200" Height="100"> 
&lt;Rectangle.Fill> 
&lt;RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5"> 
&lt;GradientStop Color="Yellow" Offset="0" /> 
&lt;GradientStop Color="Red" Offset="0.25" /> 
&lt;GradientStop Color="Blue" Offset="0.75" /> 
&lt;GradientStop Color="LimeGreen" Offset="1" /> 
&lt;/RadialGradientBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>RadialGradientBrush myRadialGradientBrush = new RadialGradientBrush(); 
myRadialGradientBrush.GradientOrigin = new Point(0.5,0.5); 
myRadialGradientBrush.Center = new Point(0.5,0.5); 
myRadialGradientBrush.RadiusX = 0.5; 
myRadialGradientBrush.RadiusY = 0.5; 
myRadialGradientBrush.GradientStops.Add( new GradientStop(Colors.Yellow, 0.0)); 
myRadialGradientBrush.GradientStops.Add( new GradientStop(Colors.Red, 0.25)); 
myRadialGradientBrush.GradientStops.Add( new GradientStop(Colors.Blue, 0.75)); 
myRadialGradientBrush.GradientStops.Add( new GradientStop(Colors.LimeGreen, 1.0)); 
Rectangle myRectangle = new Rectangle(); 
myRectangle.Width = 200; 
myRectangle.Height = 100; 
myRectangle.Fill = myRadialGradientBrush; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following illustration shows the gradient created in the previous example. The brush's gradient stops have been highlighted. Notice that, even though the results are different, the gradient stops in this example are identical to the gradient stops in the previous linear gradient brush examples.
    </Paragraph>

    <Paragraph>The GradientOrigin specifies the start point of a radial gradient brush's gradient axis. The gradient axis radiates from the gradient origin to the gradient circle. A brush's gradient circle is defined by its Center, RadiusX, and RadiusY properties.
    </Paragraph>

    <Paragraph>The following illustration shows several radial gradients with different GradientOrigin, Center, RadiusX, and RadiusY settings.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">RadialGradientBrushes with different GradientOrigin, Center, RadiusX, and RadiusY settings.</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Specifying Transparent or Partially-Transparent Gradient Stops
    </Paragraph>

    <Paragraph>Because gradient stops do not provide an opacity property, you must specify the alpha channel of colors using ARGB hexadecimal notation in markup or use the Color.FromScRgb method to create gradient stops that are transparent or partially transparent. The following sections explain how to create partially transparent gradient stops in XAML and code. For information about setting the opacity of the entire brush, see the <Hyperlink TargetName="brushesAndOpacity">Specifying the Opacity of a Brush</Hyperlink>
 section.
    </Paragraph>

    <Paragraph FontSize="18">Specifying Color Opacity in "XAML"
    </Paragraph>

    <Paragraph>In XAML, you use ARGB hexadecimal notation to specify the opacity of individual colors. ARGB hexadecimal notation uses the following syntax: 
    </Paragraph>

    <Paragraph><Run>#</Run>
<Run FontWeight="Bold">aa</Run>
<Run FontStyle="italic">rrggbb</Run>

    </Paragraph>

    <Paragraph>The <Run FontStyle="italic">aa</Run>
 in the previous line represents a two-digit hexadecimal value used to specify the opacity of the color. The <Run FontStyle="italic">rr</Run>
, <Run FontStyle="italic">gg</Run>
, and <Run FontStyle="italic">bb</Run>
 each represent a two digit hexadecimal value used to specify the amount of red, green, and blue in the color. Each hexadecimal digit may have a value from 0-9 or A-F. 0 is the smallest value, and F is the greatest. An alpha value of 00 specifies a color that is completely transparent, while an alpha value of FF creates a color that is fully opaque. In the following example, hexadecimal ARGB notation is used to specify two colors. The first is partially transparent (it has an alpha value of x20), while the second is completely opaque.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Rectangle Width="100" Height="100"> 
&lt;Rectangle.Fill> 
&lt;LinearGradientBrush StartPoint="0,0"> 
&lt;!-- This gradient stop is partially transparent. --> 
&lt;GradientStop Color="#200000FF" Offset="0.0" /> 
&lt;!-- This gradient stop is fully opaque. --> 
&lt;GradientStop Color="#FF0000FF" Offset="1.0" /> 
&lt;/LinearGradientBrush> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Specifying Color Opacity in Code
    </Paragraph>

    <Paragraph>When using code, the static <Run FontWeight="Bold">FromArgb</Run>
 method enables you to specify an alpha value when you create a color. The method takes four parameters of type Byte. The first parameter specifies the alpha channel of the color; 
the other three parameters specify the red, green, and blue values of the color. Each value should be between 0 to 255, inclusive. An alpha value of 0 specifies that the color is completely transparent, while an alpha value of 255 specifies that the color is completely opaque. In the following example, the <Run FontWeight="Bold">FromArgb</Run>
 method is used to produce two colors. The first color is partially transparent (it has an alpha value of 32), while the second is fully opaque.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush(); 
// This gradient stop is partially transparent. myLinearGradientBrush.GradientStops.Add( new GradientStop(Color.FromArgb(32, 0, 0, 255), 0.0)); 
// This gradient stop is fully opaque. myLinearGradientBrush.GradientStops.Add( new GradientStop(Color.FromArgb(255, 0, 0, 255), 1.0)); 
Rectangle myRectangle = new Rectangle(); 
myRectangle.Width = 100; 
myRectangle.Height = 100; 
myRectangle.Fill = myLinearGradientBrush; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Alternatively, you may use the FromScRgb method, which enables you to use ScRGB values to create a color.
    </Paragraph>

    <Paragraph FontSize="22">Specifying the Opacity of a Brush
    </Paragraph>

    <Paragraph>Brushes have an Opacity property that can be used to make a brush transparent or partially transparent. An Opacity value of 0 makes a brush completely transparent, while an Opacity value of 1 makes a brush completely opaque. In the following example, a brush is made 25 percent opaque.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Rectangle Width="100" Height="100"> 
&lt;Rectangle.Fill> 
&lt;SolidColorBrush Color="Blue" Opacity="0.25" /> 
&lt;/Rectangle.Fill> 
&lt;/Rectangle> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Rectangle myRectangle = new Rectangle(); 
myRectangle.Width = 100; 
myRectangle.Height = 100; 
SolidColorBrush partiallyTransparentSolidColorBrush = new SolidColorBrush(Colors.Blue); 
partiallyTransparentSolidColorBrush.Opacity = 0.25; 
myRectangle.Fill = partiallyTransparentSolidColorBrush; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>If the brush contains colors that are partially transparent, the opacity value of the color is combined through multiplication with the opacity value of the brush. For example, if a brush has an opacity value of 0.5 and a color used in the brush also has an opacity value of 0.5, the output color has an opacity value of 0.25.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>It's more efficient to change the opacity value of a brush than it is to change the opacity of an entire element using its UIElement.Opacity property. 
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Transforming a Brush
    </Paragraph>

    <Paragraph>You can rotate, scale, skew, and translate a brush's content by using its Transform or RelativeTransform properties. For an example, see <Hyperlink NavigateUri="ebada2f9-f01f-4863-9ea2-c2e4e51610f1.xaml">How to: Transform a Brush</Hyperlink>
. For more information about transforms and how they work, see the <Hyperlink NavigateUri="8f153d5e-ed61-4aa5-a7cd-286f0c427a13.xaml">Transforms Overview</Hyperlink>
. 
    </Paragraph>

    <Paragraph FontSize="22">Painting with Images, Drawings, Visuals, and Patterns
    </Paragraph>

    <Paragraph>ImageBrush, DrawingBrush, and VisualBrush classes enable you to paint an area with images, drawings, or visuals. For information about painting with images, drawings, and patterns, see <Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="ebada2f9-f01f-4863-9ea2-c2e4e51610f1.xaml">How to: Transform a Brush</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Painting with Solid Colors and Gradients Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

