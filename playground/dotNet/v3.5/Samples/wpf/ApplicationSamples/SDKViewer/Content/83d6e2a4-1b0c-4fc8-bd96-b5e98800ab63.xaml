<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_83d6e2a4_1b0c_4fc8_bd96_b5e98800ab63"
  Tag     ="Binding Markup Extension"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Binding Markup Extension</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Defers a property value to be a data-bound value, creating an intermediate expression object and interpreting the data context that applies to the element at run-time.
    </Paragraph>

    <Paragraph FontSize="22"><Run>XAML Attribute Usage</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object</Run>
<Run FontStyle="italic">property</Run>
="{<Run FontWeight="Bold">Binding</Run>
<Run FontStyle="italic">[</Run>
<Run FontStyle="italic">bindingPropertyName</Run>
=<Run FontStyle="italic">value][,</Run>
<Run FontStyle="italic">bindingPropertyName</Run>
=<Run FontStyle="italic">value]*</Run>
}" .../></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>XAML Object Element Syntax</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object</Run>
> 
&lt;<Run FontStyle="italic">object</Run>
.<Run FontStyle="italic">property</Run>
> 
&lt;<Run FontWeight="Bold">Binding</Run>
<Run FontStyle="italic">[</Run>
<Run FontStyle="italic">bindingPropertyName</Run>
="<Run FontStyle="italic">value</Run>
"<Run FontStyle="italic">]*</Run>
.../> 
&lt;/<Run FontStyle="italic">object</Run>
.<Run FontStyle="italic">property</Run>
> 
&lt;/<Run FontStyle="italic">object</Run>
></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Any of the properties listed above, which would be set as a property=value pair in the example attribute syntax, can instead be set as attributes of the Binding element as defined in object element syntax. 
    </Paragraph>

    <Paragraph FontSize="22"><Run>XAML Values</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>The <Run FontStyle="italic">[]</Run>
 brackets in the syntax above are not literals, they are optional indicators, to connote that a binding may have zero or more <Run FontStyle="italic">bindingPropertyName</Run>
=<Run FontStyle="italic">value</Run>
 pairs specified in the <Run FontWeight="Bold">Binding</Run>
 markup extension syntax. The <Run FontStyle="italic">*</Run>
 shown is also not syntactical, and is again an indicator that multiple <Run FontStyle="italic">bindingPropertyName</Run>
=<Run FontStyle="italic">value</Run>
 pairs beyond the first one can be added, with each pair separated by a comma in the attribute syntax, or by spaces in the object element syntax. The object element syntax is really the same object element syntax as is shown on the <Run FontWeight="Bold">Binding</Run>
 class page, but the one in this topic provides guidance about which properties of <Run FontWeight="Bold">Binding</Run>
 are settable as attributes on a <Run FontWeight="Bold">Binding</Run>
 object element.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph><Run FontStyle="italic">bindingPropertyName</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>The Name of the <Run FontWeight="Bold">Binding</Run>
 property to set. Not all <Run FontWeight="Bold">Binding</Run>
 properties can be set with the Binding extension, and some properties are settable only by using further nested markup extensions. See <Run FontWeight="Bold">Binding Properties that Can Be Set With The Binding Extension</Run>
 section.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontStyle="italic">value</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>The value to set to the property. The handling of the attribute value is ultimately specific to the type and logic of the <Run FontStyle="italic">bindingPropertyName</Run>
 being set.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Binding Properties that Can Be Set With The Binding Extension</Run>

    </Paragraph>

    <Paragraph>The syntax shown in this topic uses the generic <Run FontStyle="italic">bindingPropertyName</Run>
=<Run FontStyle="italic">value</Run>
 approximation, because there are many read-write properties of BindingBase or <Run FontWeight="Bold">Binding</Run>
 that can be set through the <Run FontWeight="Bold">Binding</Run>
 markup extension syntax. They can be set in any order. Basically, you can set zero or more of the properties in the list below, using property=values pairs separated by commas.
    </Paragraph>

    <Paragraph>Several of these property values require object types that do not support a native type conversion, and thus require further markup extension usages to be set in XAML as an attribute value. Check the XAML Attribute Syntax section in the reference for each property listed below, to determine the proper syntax for setting its value as an attribute in XAML; 
attribute syntax for any given property is the same form as the value form that must be given for the <Run FontWeight="Bold">Binding</Run>
 markup extension property=value pairs.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>AsyncState : can be set in XAML, but to do so requires an object reference such as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>BindsDirectlyToSource : bool type, can be either <Run FontWeight="Bold">true</Run>
 or <Run FontWeight="Bold">false</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Converter : can be set in XAML, but to do so requires an object reference such as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ConverterCulture: settable as a standards-based identifier; 
see the reference for <Run FontWeight="Bold">ConverterCulture</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ConverterParameter : if passing a by-reference type, requires an object reference such as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ElementName : mutually exclusive vs. RelativeSource, Source; 
each of these properties represent a particular binding methodology. See <Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>FallbackValue : if passing a by-reference type, requires an object reference such as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Mode 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>NotifyOnSourceUpdated 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>NotifyOnTargetUpdated 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>NotifyOnValidationError 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Path; 
see <Hyperlink NavigateUri="0e3cdf07-abe6-460a-a9af-3764b4fd707f.xaml">PropertyPath XAML Syntax</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">RelativeSource</Run>
 : mutually exclusive vs. <Run FontWeight="Bold">ElementName</Run>
, <Run FontWeight="Bold">Source</Run>
; 
each of these properties represent a particular binding methodology. See <Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>
. Requires <Hyperlink NavigateUri="26be4721-49b5-4717-a92e-7d54ad0d3a81.xaml">RelativeSource MarkupExtension</Hyperlink>
 usage
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Source</Run>
 : mutually exclusive vs. <Run FontWeight="Bold">RelativeSource</Run>
, <Run FontWeight="Bold">ElementName</Run>
; 
each of these properties represent a particular binding methodology. See <Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>
. Requires an object reference such as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>UpdateSourceTrigger 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>XPath 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The following are properties of <Run FontWeight="Bold">Binding</Run>
 that cannot be set through XAML syntax and the <Run FontWeight="Bold">Binding</Run>
 markup extension:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>UpdateSourceExceptionFilter 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>ValidationRules 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>XmlNamespaceManager 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>Remarks</Run>

    </Paragraph>

    <Paragraph>The <Run FontStyle="italic">bindingPropertyName</Run>
 placeholders given here correspond to the names of some of the declared settable properties of the <Run FontWeight="Bold">Binding</Run>
 class, and the value strings are equivalent to how those property values would be set as a XAML attribute within a <Run FontWeight="Bold">Binding</Run>
 declared as a XAML element.
    </Paragraph>

    <Paragraph>Describing data binding as a concept is not covered here, see <Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>
 for concepts and <Hyperlink NavigateUri="b97fd626-4c0d-4761-872a-2bca5820da2c.xaml">Binding Declarations Overview</Hyperlink>
 for more details on alternate syntax. Alternate syntax discussion includes how to create equivalent bindings by a number of possible syntaxes, such as attribute properties of a <Run FontWeight="Bold">Binding</Run>
 object element in XAML, property element syntax of a <Run FontWeight="Bold">Binding</Run>
, or procedural creation of a binding using SetBinding or the <Run FontWeight="Bold">Binding</Run>
 constructor.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Important: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>In terms of dependency property prededence, a Binding expression is equivalent to a locally set value. If you set a local value for a property that previously had a Binding expression, the Binding is completely removed. For details, see <Hyperlink NavigateUri="1fbada8e-4867-4ed1-8d97-62c07dad7ebc.xaml">Dependency Property Value Precedence</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>MultiBinding and PriorityBinding do not support a XAML extension syntax (despite sharing the same <Run FontWeight="Bold">BindingBase</Run>
 class, which actually implements the XAML behavior for <Run FontWeight="Bold">Binding</Run>
).
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph><Run FontWeight="Bold">Binding</Run>
 is a markup extension. Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties. All markup extensions in XAML use the { and } characters in their attribute syntax, which is the convention by which a XAML reader recognizes that a markup extension must process the attribute. For more information, see <Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>
. <Run FontWeight="Bold">Binding</Run>
 is an unusual markup extension in that the <Run FontWeight="Bold">Binding</Run>
 class that implements the extension functionality also implements several other methods and properties. These other members are not directly a requirement for markup extension functionality. The members are intended to make <Run FontWeight="Bold">Binding</Run>
 a more versatile and self contained class that can address many data binding scenarios in addition to functioning as a XAML markup extension.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Binding
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="b97fd626-4c0d-4761-872a-2bca5820da2c.xaml">Binding Declarations Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="a80db4cd-dd0f-479f-a45f-3740017c22e4.xaml">XAML Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Binding Markup Extension to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

