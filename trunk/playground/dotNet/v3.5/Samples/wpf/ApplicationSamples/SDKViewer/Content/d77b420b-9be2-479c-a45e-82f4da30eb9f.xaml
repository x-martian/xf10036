<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_d77b420b_9be2_479c_a45e_82f4da30eb9f"
  Tag     ="Apply an Opacity Mask to a Drawing"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Apply an Opacity Mask to a Drawing</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to apply an opacity mask to a Drawing. The DrawingGroup class is the only type of <Run FontWeight="Bold">Drawing</Run>
 object that supports opacity masks. 
    </Paragraph>

    <Paragraph>To apply an opacity mask to a <Run FontWeight="Bold">Drawing</Run>
 object, add it to a <Run FontWeight="Bold">DrawingGroup</Run>
 and set the OpacityMask property of the <Run FontWeight="Bold">DrawingGroup</Run>
 object. 
    </Paragraph>

    <Paragraph/>
    <Paragraph>The following illustration shows three views of the <Run FontWeight="Bold">DrawingGroup</Run>
: the drawing without an opacity mask, the opacity mask alone, and the <Run FontWeight="Bold">DrawingGroup</Run>
 after the opacity mask is applied.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following example uses a RadialGradientBrush as an opacity mask for a <Run FontWeight="Bold">DrawingGroup</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Although this example uses a <Run FontWeight="Bold">RadialGradientBrush</Run>
 as an opacity mask, LinearGradientBrush, DrawingBrush, ImageBrush, and VisualBrush objects can also make good opacity masks. For more information about opacity masks and how they work, see the <Hyperlink NavigateUri="22367fab-5f59-4583-abfd-db2bf86eaef7.xaml">Opacity Masks Overview</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Media.Animation; 
using System.Windows.Shapes; 
namespace SDKSample { /// 
&lt;summary> /// Shows how to create and apply an OpacityMask to /// a DrawinGroup. /// 
&lt;/summary> public class OpacityMaskExample : Page { public OpacityMaskExample() { // // Create a GeometryDrawing. // // Define the drawing's contents. PathFigure pLineFigure = new PathFigure(); 
pLineFigure.StartPoint = new Point(25, 25); 
PolyLineSegment pLineSegment = new PolyLineSegment(); 
pLineSegment.Points.Add(new Point(0, 50)); 
pLineSegment.Points.Add(new Point(25, 75)); 
pLineSegment.Points.Add(new Point(50, 50)); 
pLineSegment.Points.Add(new Point(25, 25)); 
pLineSegment.Points.Add(new Point(25, 0)); 
pLineFigure.Segments.Add(pLineSegment); 
PathGeometry pGeometry = new PathGeometry(); 
pGeometry.Figures.Add(pLineFigure); 
GeometryDrawing drawing1 = new GeometryDrawing( Brushes.Lime, new Pen(Brushes.Black, 10), pGeometry ); 
// // Create another GeometryDrawing. // GeometryDrawing drawing2 = new GeometryDrawing( Brushes.Lime, new Pen(Brushes.Black, 2), new EllipseGeometry(new Point(10, 10), 5, 5) ); 
// Create the DrawingGroup and add the // geometry drawings. DrawingGroup aDrawingGroup = new DrawingGroup(); 
aDrawingGroup.Children.Add(drawing1); 
aDrawingGroup.Children.Add(drawing2); 
// // Define an opacity mask and apply it to the // drawing group. // RadialGradientBrush opacityMask = new RadialGradientBrush(); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(255, 0, 0, 0), 0.0)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(0, 0, 0, 0), 0.55)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(255, 0, 0, 0), 0.65)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(0, 0, 0, 0), 0.75)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(255, 0, 0, 0), 0.80)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(0, 0, 0, 0), 0.90)); 
opacityMask.GradientStops.Add(new GradientStop(Color.FromArgb(255, 0, 0, 0), 1.0)); 
aDrawingGroup.OpacityMask = opacityMask; 
// Use an Image control and a DrawingImage to // display the drawing. DrawingImage aDrawingImage = new DrawingImage(aDrawingGroup); 
// Freeze the DrawingImage for performance benefits. aDrawingImage.Freeze(); 
Image anImage = new Image(); 
anImage.Source = aDrawingImage; 
anImage.Stretch = Stretch.None; 
anImage.HorizontalAlignment = HorizontalAlignment.Left; 
// Create a border around the images and add it to the // page. Border imageBorder = new Border(); 
imageBorder.BorderBrush = Brushes.Gray; 
imageBorder.BorderThickness = new Thickness(1); 
imageBorder.VerticalAlignment = VerticalAlignment.Top; 
imageBorder.HorizontalAlignment = HorizontalAlignment.Left; 
imageBorder.Margin = new Thickness(20); 
imageBorder.Child = anImage; 
this.Background = Brushes.White; 
this.Margin = new Thickness(20); 
this.Content = imageBorder; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_d77b420b_9be2_479c_a45e_82f4da30eb9f_0">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="PresentationOptions" Margin="20" Background="White"> 
&lt;Border BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20"> 
&lt;Image Stretch="None" HorizontalAlignment="Left"> 
&lt;Image.Source> 
&lt;DrawingImage PresentationOptions:Freeze="True"> 
&lt;DrawingImage.Drawing> 
&lt;!-- A DrawingGroup with a RadialGradientBrush as its opacity mask. --> 
&lt;DrawingGroup> 
&lt;GeometryDrawing Brush="Lime" Geometry="M 25,25 L 0,50 25,75 50,50 25,25 25,0"> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Thickness="10" Brush="Black" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;GeometryDrawing Brush="Lime"> 
&lt;GeometryDrawing.Geometry> 
&lt;EllipseGeometry Center="10,10" RadiusX="5" RadiusY="5" /> 
&lt;/GeometryDrawing.Geometry> 
&lt;GeometryDrawing.Pen> 
&lt;Pen Thickness="2" Brush="Black" /> 
&lt;/GeometryDrawing.Pen> 
&lt;/GeometryDrawing> 
&lt;DrawingGroup.OpacityMask> 
&lt;!-- The opacity mask. --> 
&lt;RadialGradientBrush> 
&lt;GradientStop Offset="0.0" Color="#FF000000" /> 
&lt;GradientStop Offset="0.55" Color="#00000000" /> 
&lt;GradientStop Offset="0.65" Color="#FF000000" /> 
&lt;GradientStop Offset="0.75" Color="#00000000" /> 
&lt;GradientStop Offset="0.80" Color="#FF000000" /> 
&lt;GradientStop Offset="0.90" Color="#00000000" /> 
&lt;GradientStop Offset="1.0" Color="#FF000000" /> 
&lt;/RadialGradientBrush> 
&lt;/DrawingGroup.OpacityMask> 
&lt;/DrawingGroup> 
&lt;/DrawingImage.Drawing> 
&lt;/DrawingImage> 
&lt;/Image.Source> 
&lt;/Image> 
&lt;/Border> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph/>
    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>System.Windows.Media.DrawingGroup.OpacityMask
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="9b5ce5c0-e204-4320-a7a8-0b2210d62f88.xaml">Drawing Objects Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="22367fab-5f59-4583-abfd-db2bf86eaef7.xaml">Opacity Masks Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Apply an Opacity Mask to a Drawing to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

