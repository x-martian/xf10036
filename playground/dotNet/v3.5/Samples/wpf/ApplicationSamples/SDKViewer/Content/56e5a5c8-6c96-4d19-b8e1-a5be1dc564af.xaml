<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_56e5a5c8_6c96_4d19_b8e1_a5be1dc564af"
  Tag     ="WPF Globalization and Localization Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>WPF Globalization and Localization Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>When you limit your product's availability to only one language, you limit your potential customer base to a fraction of our world’s 6.5 billion population. If you want your applications to reach a global audience, cost-effective localization of your product is one of the best and most economical ways to reach more customers.
    </Paragraph>

    <Paragraph>This overview introduces globalization and localization in Windows Presentation Foundation (WPF). Globalization is the design and development of applications that perform in multiple locations. For example, globalization supports localized user interfaces and regional data for users in different cultures. WPF provides globalized design features, including automatic layout, satellite assemblies, and localized attributes and commenting. 
    </Paragraph>

    <Paragraph>Localization is the translation of application resources into localized versions for the specific cultures that the application supports. When you localize in WPF, you use the APIs in the System.Windows.Markup.Localizer namespace. These APIs power the LocBaml Tool Sample command-line tool. For information about how to build and use LocBaml, see <Hyperlink NavigateUri="5001227e-9326-48a4-9dcd-ba1b89ee6653.xaml">How to: Localize an Application</Hyperlink>
.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run>Best Practices for Globalization and Localization in WPF</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="workflow_to_localize">Localize a WPF Application</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="examples_of_localization">Examples of WPF Localization</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Best Practices for Globalization and Localization in WPF
    </Paragraph>

    <Paragraph>You can make the most of the globalization and localization functionality that is built into WPF by following the UI design and localization-related tips that this section provides.
    </Paragraph>

    <Paragraph FontSize="18">Best Practices for WPF UI Design
    </Paragraph>

    <Paragraph>When you design a WPF–based UI, consider implementing these best practices:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Write your UI in XAML; 
avoid creating UI in code. When you create your UI by using XAML, you expose it through built-in localization APIs. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Avoid using absolute positions and fixed sizes to lay out content; 
instead, use relative or automatic sizing. 
        </Paragraph>

        <List MarkerStyle="Disc">
          <ListItem>
            <Paragraph>Use SizeToContent; 
and keep widths and heights set to <Run>Auto</Run>
.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Avoid using Canvas to lay out UIs.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Use Grid and its size-sharing feature.
            </Paragraph>

          </ListItem>

        </List>

      </ListItem>

      <ListItem>
        <Paragraph>Provide extra space in margins because localized text often requires more space. Extra space allows for possible overhanging characters.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Enable TextWrapping on TextBlock to avoid clipping.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Set the <Run FontWeight="Bold">xml:lang</Run>
 attribute. This attribute describes the culture of a specific element and its child elements. The value of this property changes the behavior of several features in WPF. For example, it changes the behavior of hyphenation, spell checking, number substitution, complex script shaping, and font fallback. See <Hyperlink NavigateUri="4571ccfe-8a60-4f06-9b37-7ac0b1c2d10f.xaml">Globalization for the Windows Presentation Foundation</Hyperlink>
 for more information about setting the <Hyperlink NavigateUri="7aac0078-a1c5-41f8-b8b0-975510d9dca0.xaml">xml:lang Attribute</Hyperlink>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Create a customized composite font to obtain better control of fonts that are used for different languages. By default, WPF uses the GlobalUserInterface.composite font in your Windows\Fonts directory. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>When you create navigation applications that may be localized in a culture that presents text in a right-to-left format, explicitly set the FlowDirection of every page to ensure the page does not inherit <Run FontWeight="Bold">FlowDirection</Run>
 from the NavigationWindow.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>When you create stand-alone navigation applications that are hosted outside a browser, set the StartupUri for your initial application to a <Run FontWeight="Bold">NavigationWindow</Run>
 instead of to a page (for example, <Run>
&lt;Application StartupUri="NavigationWindow.xaml"></Run>
). This design enables you to change the <Run FontWeight="Bold">FlowDirection</Run>
 of the Window and the navigation bar. For more information and an example, see Globalization Homepage Sample.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Best Practices for WPF Localization
    </Paragraph>

    <Paragraph>When you localize WPF–based applications, consider implementing these best practices:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Use localization comments to provide extra context for localizers.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Use localization attributes to control localization instead of selectively omitting Uid properties on elements. See <Hyperlink NavigateUri="ead2d9ac-b709-4ec1-a924-39927a29d02f.xaml">Localization Attributes and Comments</Hyperlink>
 for more information.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Use <Run FontWeight="Bold">msbuild /t:updateuid</Run>
 and <Run FontWeight="Bold">/t:checkuid</Run>
 to add and check <Run FontWeight="Bold">Uid</Run>
 properties in your XAML. Use <Run FontWeight="Bold">Uid</Run>
 properties to track changes between development and localization. <Run FontWeight="Bold">Uid</Run>
 properties help you localize new development changes. If you manually add <Run FontWeight="Bold">Uid</Run>
 properties to a UI, the task is typically tedious and less accurate. 
        </Paragraph>

        <List MarkerStyle="Disc">
          <ListItem>
            <Paragraph>Do not edit or change <Run FontWeight="Bold">Uid</Run>
 properties after you begin localization.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Do not use duplicate <Run FontWeight="Bold">Uid</Run>
 properties (remember this tip when you use the copy-and-paste command).
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Set the <Run>UltimateResourceFallback</Run>
 location in AssemblyInfo.* to specify the appropriate language for fallback (for example, <Run>[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]</Run>
). 
            </Paragraph>

            <Paragraph>If you decide to include your source language in the main assembly by omitting the <Run FontWeight="Bold">
&lt;UICulture></Run>
 tag in your project file, set the <Run>UltimateResourceFallback</Run>
 location as the main assembly instead of the satellite (for example, <Run>[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.MainAssembly)]</Run>
). 
            </Paragraph>

          </ListItem>

        </List>

      </ListItem>

    </List>

    <Paragraph/>
    <Paragraph FontSize="22">Localize a WPF Application
    </Paragraph>

    <Paragraph>When you localize a WPF application, you have several options. For example, you can bind the localizable resources in your application to an XML file, store localizable text in resx tables, or have your localizer use Extensible Application Markup Language (XAML) files. This section describes a localization workflow that uses binary XAML (BAML), which provides several benefits:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>You can localize after you build .
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can update to a newer version of BAML with localizations from an older version of BAML so that you can localize at the same time that you develop.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>You can validate original source elements and semantics at compile time because BAML is the compiled form of XAML.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Localization Build Process
    </Paragraph>

    <Paragraph>When you develop a WPF application, the build process for localization is as follows:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>The developer creates and globalizes the WPF application. In the project file the developer sets <Run FontWeight="Bold">
&lt;UICulture>en-US
&lt;/UICulture></Run>
 so that when the application is compiled, a language-neutral main assembly is generated. This assembly has a satellite .resources.dll file that contains all the localizable resources. Optionally, you can keep the source language in the main assembly because our localization APIs support extraction from the main assembly. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>When the file is compiled into the build, the XAML is converted to BAML. The culturally neutral <Run>MyDialog.exe</Run>
 and the culturally dependent (English) <Run>MyDialog.resources.dll</Run>
 files are released to the English-speaking customer.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Localization Workflow
    </Paragraph>

    <Paragraph>The localization process begins after the unlocalized <Run>MyDialog.resources.dll</Run>
 file is built. The UI elements and properties in your original XAML are extracted from the BAML into key-value pairs by using the APIs under <Run FontWeight="Bold">System.Windows.Markup.Localizer</Run>
. Localizers use the key-value pairs to localize the application. You can generate a new .resource.dll from the new values after localization is complete.
    </Paragraph>

    <Paragraph/>
    <Paragraph>The keys of the key-value pairs are x:Uids that are placed by the developer in the original XAML. These x:Uids enable the API to track and merge changes that happen between the developer and the localizer during localization. For example, if the developer changes the UI after the localizer begins localizing, you can merge the development change with the already completed localization work so that minimal translation work is lost.
    </Paragraph>

    <Paragraph/>
    <Paragraph>The following graphic shows a typical localization workflow that is based on BAML. This diagram, assumes the developer writes the application in English.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Examples of WPF Localization
    </Paragraph>

    <Paragraph>This section contains examples of localized applications to help you understand how to build and localize WPF applications.
    </Paragraph>

    <Paragraph FontSize="16pt">Run Dialog Box Example
    </Paragraph>

    <Paragraph>The following graphics show the output of the <Run FontWeight="Bold">Run</Run>
 dialog box sample.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">English:</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">German:</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Designing a Global Run Dialog Box</Run>

    </Paragraph>

    <Paragraph>This example produces a <Run FontWeight="Bold">Run</Run>
 dialog box by using WPF and XAML. This dialog box is equivalent to the <Run FontWeight="Bold">Run</Run>
 dialog box that is available from the Microsoft Windows Start menu.
    </Paragraph>

    <Paragraph>For the complete sample, see Globalization Run Dialog Sample.
    </Paragraph>

    <Paragraph>Some highlights for making global dialog boxes are:
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Automatic Layout</Run>

    </Paragraph>

    <Paragraph><Run FontStyle="italic">In Window1.xaml:</Run>

    </Paragraph>

    <Paragraph><Run>
&lt;Window SizeToContent="WidthAndHeight"></Run>

    </Paragraph>

    <Paragraph>The previous Window property automatically resizes the window according to the size of the content. This property prevents the window from cutting off content that increases in size after localization; 
it also removes unneeded space when content decreases in size after localization.
    </Paragraph>

    <Paragraph><Run>
&lt;Grid x:Uid="Grid_1"></Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Uid</Run>
 properties are needed in order for WPF localization APIs to work correctly.
    </Paragraph>

    <Paragraph>They are used by WPF localization APIs to track changes between the development and localization of the user interface (UI). <Run FontWeight="Bold">Uid</Run>
 properties enable you to merge a newer version of the UI with an older localization of the UI. You add a <Run FontWeight="Bold">Uid</Run>
 property by running <Run FontWeight="Bold">msbuild /t:updateuid RunDialog.csproj</Run>
 in the Windows SDK command shell. This is the recommended method of adding <Run FontWeight="Bold">Uid</Run>
 properties because manually adding them is typically time-consuming and less accurate. You can check that <Run FontWeight="Bold">Uid</Run>
 properties are correctly set by running <Run FontWeight="Bold">msbuild /t:checkuid RunDialog.csproj</Run>
.
    </Paragraph>

    <Paragraph>The UI is structured by using the <Run FontWeight="Bold">Grid</Run>
 control, which is a useful control for taking advantage of the automatic layout in WPF. Note that the dialog box is split into three rows and five columns. Not one of the row and column definitions has a fixed size; 
hence, the UI elements that are positioned in each cell can adapt to increases and decreases in size during localization. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Grid.ColumnDefinitions> 
&lt;ColumnDefinition x:Uid="ColumnDefinition_1" /> 
&lt;ColumnDefinition x:Uid="ColumnDefinition_2" /> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The first two columns where the <Run FontWeight="Bold">Open:</Run>
 label and ComboBox are placed use 10 percent of the UI’s total width. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;ColumnDefinition x:Uid="ColumnDefinition_3" SharedSizeGroup="Buttons" /> 
&lt;ColumnDefinition x:Uid="ColumnDefinition_4" SharedSizeGroup="Buttons" /> 
&lt;ColumnDefinition x:Uid="ColumnDefinition_5" SharedSizeGroup="Buttons" /> 
&lt;/Grid.ColumnDefinitions> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Note that of the example uses the shared-sizing feature of <Run FontWeight="Bold">Grid</Run>
. The last three columns take advantage of this by placing themselves in the same SharedSizeGroup. As one would expect from the name of the property, this allows the columns to share the same size. So when the “Browse…” gets localized to the longer string “Durchsuchen…”, all buttons grow in width instead of having a small “OK” button and a disproportionately large “Durchsuchen…” button.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Xml:lang</Run>

    </Paragraph>

    <Paragraph><Run>Xml:lang="en-US"</Run>

    </Paragraph>

    <Paragraph>Notice the <Hyperlink NavigateUri="7aac0078-a1c5-41f8-b8b0-975510d9dca0.xaml">xml:lang Attribute</Hyperlink>
 placed at the root element of the UI. This property describes the culture of a given element and its children. This value is used by several features in WPF and should be changed appropriately during localization. This value changes what language dictionary is use to hyphenate and spell check words. It also affects the display of digits and how the font fallback system selects which font to use. Finally, the property affects the way numbers are displayed and the way texts written in complex scripts are shaped. The default value is “en-US”.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Building a Satellite Resource Assembly</Run>

    </Paragraph>

    <Paragraph><Run FontStyle="italic">In .csproj:</Run>

    </Paragraph>

    <Paragraph><Run>
&lt;UICulture>en-US
&lt;/UICulture></Run>

    </Paragraph>

    <Paragraph>Notice the addition of a UICulture property. When this is set to a valid CultureInfo value such as en-US, building the project will generate a satellite assembly with all localizable resources in it. 
    </Paragraph>

    <Paragraph><Run>
&lt;Resource Include="RunIcon.JPG"></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;Localizable>False
&lt;/Localizable></Run>

    </Paragraph>

    <Paragraph><Run>
&lt;/Resource></Run>

    </Paragraph>

    <Paragraph>The RunIcon.JPG does not need to be localized because it should appear the same for all cultures. Localizable is set to <Run FontWeight="Bold">False</Run>
 so that it remains in the language neutral main assembly instead of the satellite assembly. The default value of all noncompilable resources is Localizable set to <Run FontWeight="Bold">True</Run>
. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Localizing the Run Dialog</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Parse</Run>

    </Paragraph>

    <Paragraph>After building the application, the first step in localizing it is parsing the localizable resources out of the satellite assembly. For the purposes of this topic, use the sample LocBaml tool which can be found at LocBaml Tool Sample. Note that LocBaml is only a sample tool meant to help you get started in building a localization tool that fits into your localization process. Using LocBaml, run the following to parse: <Run FontWeight="Bold">LocBaml /parse RunDialog.resources.dll /out:</Run>
 to generate a “RunDialog.resources.dll.CSV” file.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Localize</Run>

    </Paragraph>

    <Paragraph>Use your favorite CSV editor that supports Unicode to edit this file. Filter out all entries with a localization category of “None”. You should see the following entries:
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Resource Key
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Localization Category
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Value
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_1:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>OK
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_2:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Cancel
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_3:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Browse...
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>ComboBox_1:System.Windows.Controls.ComboBox.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>ComboBox
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>TextBlock_1:System.Windows.Controls.TextBlock.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Text
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Type the name of a program, folder, document, or Internet resource, and Windows will open it for you.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>TextBlock_2:System.Windows.Controls.TextBlock.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Text
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Open:
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Window_1:System.Windows.Window.Title
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Title
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Run
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Localizing the application to German would require the following translations:
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Resource Key
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Localization Category
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Value
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_1:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>OK
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_2:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Abbrechen
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Button_3:System.Windows.Controls.Button.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Button
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Durchsuchen…
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>ComboBox_1:System.Windows.Controls.ComboBox.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>ComboBox
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>TextBlock_1:System.Windows.Controls.TextBlock.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Text
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Geben Sie den Namen eines Programms, Ordners, Dokuments oder einer Internetresource an.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>TextBlock_2:System.Windows.Controls.TextBlock.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Text
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Öffnen:
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Window_1:System.Windows.Window.Title
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Title
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Run
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph><Run FontWeight="Bold">Generate</Run>

    </Paragraph>

    <Paragraph>The last step of localization involves creating the newly localized satellite assembly. This can be accomplished with the following LocBaml command:
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">LocBaml.exe /generate RunDialog.resources.dll /trans:RunDialog.resources.dll.CSV /out: . /cul:de-DE</Run>

    </Paragraph>

    <Paragraph/>
    <Paragraph>On German Windows, if this resources.dll is placed in a de-DE folder next to the main assembly, this resource will automatically load instead of the one in the en-US folder. If you do not have a German version of Windows to test this, set the culture to whatever culture of Windows you are using (i.e. en-US), and replace the original resources.dll.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Satellite Resource Loading</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>MyDialog.exe 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>en-US\MyDialog.resources.dll 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>de-DE\MyDialog.resources.dll 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Code
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Original English BAML
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Localized BAML
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Culturally neutral resources
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Other resources in English
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Other resources localized to German
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>The .NET framework automatically chooses which satellite resources assembly to load based on the application’s Thread.CurrentThread.CurrentUICulture. This defaults to the culture of your Windows OS. So if you are using German Windows, the de-DE\MyDialog.resources.dll loads, if you are using English Windows, the en-US\MyDialog.resources.dll loads. You can set the ultimate fallback resource for your application by specifying the NeutralResourcesLanguage in your project’s AssemblyInfo.*. For example if you specify: 
    </Paragraph>

    <Paragraph><Run>[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]</Run>

    </Paragraph>

    <Paragraph>then the en-US\MyDialog.resources.dll will be used with German Windows if a de-DE\MyDialog.resources.dll or de\MyDialog.resources.dll are both unavailable. 
    </Paragraph>

    <Paragraph FontSize="18">Microsoft Saudi Arabia Homepage
    </Paragraph>

    <Paragraph>The following graphics show an English and Arabic Homepage. For the complete sample that produces these graphics see Globalization Homepage Sample.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">English:</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Arabic:</Run>

    </Paragraph>

    <Paragraph FontSize="18">Designing a Global Microsoft Homepage
    </Paragraph>

    <Paragraph>This mock up of the Microsoft Saudi Arabia web site illustrates the globalization features provided for RightToLeft languages. Languages such as Hebrew and Arabic have a right-to-left reading order so the layout of UI must often be laid out quite differently than it would be in left-to-right languages such as English. Localizing from a left-to-right language to a right-to-left language or vice versa can be quite challenging. WPF has been designed to make such localizations much easier. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">FlowDirection</Run>

    </Paragraph>

    <Paragraph><Run FontStyle="italic">Homepage.xaml:</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page x:Uid="Page_1" x:Class="MicrosoftSaudiArabiaHomepage.Homepage" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" FlowDirection="LeftToRight" Localization.Comments="FlowDirection(This FlowDirection controls the actual content of the homepage)" xml:lang="en-US"> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Notice the FlowDirection property on Page, changing this property to “RightToLeft” will change the <Run FontWeight="Bold">FlowDirection</Run>
 of the Page and its children elements so that the layout of this UI is flipped to become right-to-left as an Arabic user would expect. One can override the inheritance behavior by specifying an explicit <Run FontWeight="Bold">FlowDirection</Run>
 on any element. The <Run FontWeight="Bold">FlowDirection</Run>
 property is available on any FrameworkElement or document related element and has an implicit value of LeftToRight. 
    </Paragraph>

    <Paragraph>Observe that even the background gradient brushes are flipped correctly when the root Page’s <Run FontWeight="Bold">FlowDirection</Run>
 is changed: 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">FlowDirection="LeftToRight"</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">FlowDirection="RightToLeft"</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Avoid Using Fixed Dimensions for Panels and Controls</Run>

    </Paragraph>

    <Paragraph>Take a look through Homepage.xaml, notice that aside from the fixed width and height specified for the entire UI on the top DockPanel, there are no other fixed dimensions. Avoid using fixed dimensions to prevent clipping localized text that may be longer than the source text. WPF panels and controls will automatically resize based on the content that they contain. Most controls also have minimum and maximum dimensions that you can set for more control (i.e. MinWidth= “20”). With <Run FontWeight="Bold">Grid</Run>
, you can also set relative widths and heights by using ‘*’ (i.e. Width= “0.25*”) or use its cell size sharing feature as shown in the RunDialog example, see Globalization Run Dialog Sample.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Localization Comments</Run>

    </Paragraph>

    <Paragraph>There are many cases where content may be ambiguous and difficult to translate. The developer or designer has the ability to provide extra context and comments to localizers through localization comments. For example the Localization.Comments below clarifies the usage of the character ‘|’. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock x:Uid="TextBlock_2" DockPanel.Dock="Right" Foreground="White" Margin="5,0,5,0" Localization.Comments="$Content(This character is used as a decorative rule.)"> | 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>This comment becomes associated with TextBlock_1’s content and in the case of the LocBaml Tool, ( see <Hyperlink NavigateUri="5001227e-9326-48a4-9dcd-ba1b89ee6653.xaml">How to: Localize an Application</Hyperlink>
), it can be seen in the 6th column of the TextBlock_1 row in the output .csv file:
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Resource Key
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Category
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Readable
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Modifiable
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Comment
            </Paragraph>

            <Paragraph/>
          </TableCell>

          <TableCell>
            <Paragraph>Value
            </Paragraph>

            <Paragraph/>
          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>TextBlock_1:System.Windows.Controls.TextBlock.$Content
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Text
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>TRUE
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>TRUE
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>This character is used as a decorative rule.
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>|
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>Comments can be placed on the content or property of any element using the following syntax:
    </Paragraph>

    <Paragraph/>
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock x:Uid="TextBlock_1" DockPanel.Dock="Right" Foreground="White" Margin="5,0,5,0" Localization.Comments="$Content(This is a comment on the TextBlock's content.) Margin(This is a comment on the TextBlock's Margin property.)"> | 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph><Run FontWeight="Bold">Localization Attributes</Run>

    </Paragraph>

    <Paragraph>Often the developer or localization manager needs control of what localizers can read and modify. For example, you might not want the localizer to translate the name of your company or legal wording. WPF provides attributes that enable you to set the readability, modifiability, and category of an element’s content or property which your localization tool can use to lock, hide, or sort elements. For more information, see AttributesProperty. For the purposes of this sample, the LocBaml Tool just outputs the values of these attributes. WPF controls all have default values for these attributes, but you the can override them. For example, the following example overrides the default localization attributes for TextBlock_1 and sets the content to be readable but unmodifiable for localizers. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock x:Uid="TextBlock_1" Localization.Attributes= "$Content(Readable Unmodifiable)"> Microsoft Corporation 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>In addition to the readability and modifiability attributes, WPF provides an enumeration of common UI categories that can be used to give localizers more context: Text, Title, Label, Button, CheckBox, <Run FontWeight="Bold">ComboBox</Run>
, ListBox, Menu, RadioButton, ToolTip, Hyperlink, Document, XmlData, and Font. The WPF default categories for platform controls can be overridden in XAML as well:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock x:Uid="TextBlock_2"> 
&lt;TextBlock.ToolTip> 
&lt;TextBlock x:Uid="TextBlock_3" Localization.Attributes= "$Content(ToolTip Readable Unmodifiable)"> Microsoft Corporation 
&lt;/TextBlock> 
&lt;/TextBlock.ToolTip> Windows Vista 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The default localization attributes that WPF provides can also be overridden through code, so you can correctly set the right default values for custom controls. For example: 
    </Paragraph>

    <Paragraph><Run>[Localizability(Readability = Readability.Readable, Modifiability=Modifiability.Unmodifiable, LocalizationCategory.None)]</Run>

    </Paragraph>

    <Paragraph><Run>public class CorporateLogo: TextBlock</Run>

    </Paragraph>

    <Paragraph><Run>{</Run>

    </Paragraph>

    <Paragraph><Run>…</Run>

    </Paragraph>

    <Paragraph><Run>..</Run>

    </Paragraph>

    <Paragraph><Run>.</Run>

    </Paragraph>

    <Paragraph><Run>}</Run>

    </Paragraph>

    <Paragraph>The per instance attributes set in XAML will take precedence over the values set in code on custom controls. For more information on attributes and comments, see <Hyperlink NavigateUri="ead2d9ac-b709-4ec1-a924-39927a29d02f.xaml">Localization Attributes and Comments</Hyperlink>
.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Font Fallback and Composite Fonts</Run>

    </Paragraph>

    <Paragraph>If you specify a font that does not support a given codepoint range, WPF will automatically fallback to one that does by using the Global User Interface.compositefont that is located in your Windows\Fonts directory. Composite fonts work just as any other font and can be used explicitly by setting an element’s FontFamily (i.e. FontFamily= “Global User Interface”). You can specify your own font fallback preference by creating your own composite font and specifying what font to use for specific codepoint ranges and languages.
    </Paragraph>

    <Paragraph>For more information on composite fonts see FontFamily.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Localizing the Microsoft Homepage</Run>

    </Paragraph>

    <Paragraph>You can follow the same steps as the Run Dialog example to localize this application. The localized .csv file for Arabic is available for you in the Globalization Homepage Sample.
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about WPF Globalization and Localization Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

