<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_96fcd78d_1c77_4206_8928_3a0579476ef4"
  Tag     ="Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Windows Presentation Foundation (WPF) provides a rich environment for creating applications. However, when you have a substantial investment in Windows Forms code, it can be more effective to reuse at least some of that code in your WPF application rather than to rewrite it from scratch. The most common scenario is when you have existing custom Windows Forms controls. In some cases, you might not even have access to the source code for these controls. WPF provides a straightforward procedure for hosting such controls in a WPF application. For example, you can use WPF for most of your programming while hosting your specialized System.Windows.Forms.DataGridView controls.
    </Paragraph>

    <Paragraph>This walkthrough steps you through an application that hosts a composite Windows Forms control on a WPF page. This general procedure can be extended to more complex applications and controls.
    </Paragraph>

    <Paragraph>The walkthrough is divided into two sections. The first section briefly describes the implementation of the Windows Forms control. The second section discusses in detail how to host the control in a WPF application, receive events from the control, and access some of the control's properties.
    </Paragraph>

    <Paragraph>Tasks illustrated in this walkthrough include:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Implementing the Windows Forms control.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Implementing the host application with Windows Presentation Foundation.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>For a complete code listing of the tasks illustrated in this walkthrough, see Hosting a Windows Forms Composite Control on a Windows Presentation Foundation Page Sample.
    </Paragraph>

    <Paragraph FontSize="22">Prerequisites
    </Paragraph>

    <Paragraph>To complete this walkthrough you will need:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Development Tools for .NET Framework 3.0, which enable you to create a WPF application project. For information on installing these tools, see Installation Instructions for the Windows SDK.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Implementing the Windows Forms Control
    </Paragraph>

    <Paragraph>The Windows Forms control used in this example is a simple data-entry form. This form takes the user's name and address and then uses a custom event to return that information to the host. The following illustration shows the rendered control.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">The Windows Forms control</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="18">Creating the Project
    </Paragraph>

    <Paragraph>To start the project:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Launch Microsoft Visual Studio, and open the <Run FontWeight="Bold">New Project</Run>
 dialog box.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select <Run FontWeight="Bold">C# Projects</Run>
 with the <Run FontWeight="Bold">Windows Control Library</Run>
 template.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Name the new project <Run FontWeight="Bold">MyControls</Run>
, and click <Run FontWeight="Bold">OK</Run>
 to create the project. The default project contains a single control named <Run>UserControl1</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Change the name of <Run>UserControl1</Run>
 to <Run>MyControl1</Run>
.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Your project should have references to the following system DLLs. If any of these DLLs are not included by default, add them to the project.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>System
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>System.Data
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>System.Drawing
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>System.Windows.Forms
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>System.XML
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Adding Controls to the Form
    </Paragraph>

    <Paragraph>To add controls to the form:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Open the designer for <Run>MyControl1</Run>
.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Place six System.Windows.Forms.Label controls and their corresponding System.Windows.Forms.TextBox controls, sized and arranged as they are in the preceding illustration, on the form. In the example, the <Run FontWeight="Bold">TextBox</Run>
 controls are named: 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run>txtName</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>txtAddress</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>txtCity</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>txtState</Run>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>txtZip</Run>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>Add two System.Windows.Forms.Button controls labeled <Run FontWeight="Bold">OK</Run>
 and <Run FontWeight="Bold">Cancel</Run>
. In the example, the button names are <Run>btnOK</Run>
 and <Run>btnCancel</Run>
, respectively.
    </Paragraph>

    <Paragraph FontSize="18">Implementing the Supporting Code
    </Paragraph>

    <Paragraph>Open the form's code view. The control returns the collected data to its host by raising the custom <Run>OnButtonClick</Run>
 event. The data is contained in the event argument object. The following code example shows the event and delegate declaration. Add this code to the code file, below the designer-generated code.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public delegate void MyControlEventHandler(object sender, MyControlEventArgs args); 
public event MyControlEventHandler OnButtonClick; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Public Delegate Sub MyControlEventHandler(ByVal sender As Object, ByVal args As MyControlEventArgs) Public Event OnButtonClick As MyControlEventHandler </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run>MyControlEventArgs</Run>
 class contains the information to be returned to the host. Add the following class to the form's namespace.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public class MyControlEventArgs : EventArgs { private string _Name; 
private string _StreetAddress; 
private string _City; 
private string _State; 
private string _Zip; 
private bool _IsOK; 
public MyControlEventArgs(bool result, string name, string address, string city, string state, string zip) { _IsOK = result; 
_Name = name; 
_StreetAddress = address; 
_City = city; 
_State = state; 
_Zip = zip; 
} public string MyName { get { return _Name; 
} set { _Name = value; 
} } public string MyStreetAddress { get { return _StreetAddress; 
} set { _StreetAddress = value; 
} } public string MyCity { get { return _City; 
} set { _City = value; 
} } public string MyState { get { return _State; 
} set { _State = value; 
} } public string MyZip { get { return _Zip; 
} set { _Zip = value; 
} } public bool IsOK { get { return _IsOK; 
} set { _IsOK = value; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Public Class MyControlEventArgs Inherits EventArgs Private _Name As String Private _StreetAddress As String Private _City As String Private _State As String Private _Zip As String Private _IsOK As Boolean Public Sub New(ByVal result As Boolean, ByVal name As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String) _IsOK = result _Name = name _StreetAddress = address _City = city _State = state _Zip = zip End Sub Public Property MyName() As String Get Return _Name End Get Set _Name = value End Set End Property Public Property MyStreetAddress() As String Get Return _StreetAddress End Get Set _StreetAddress = value End Set End Property Public Property MyCity() As String Get Return _City End Get Set _City = value End Set End Property Public Property MyState() As String Get Return _State End Get Set _State = value End Set End Property Public Property MyZip() As String Get Return _Zip End Get Set _Zip = value End Set End Property Public Property IsOK() As Boolean Get Return _IsOK End Get Set _IsOK = value End Set End Property End Class </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>When the user clicks the <Run FontWeight="Bold">OK</Run>
 or <Run FontWeight="Bold">Cancel</Run>
 button, the System.Windows.Forms.Control.Click event handlers create a <Run>MyControlEventArgs</Run>
 object that contains the data and raises the <Run>OnButtonClick</Run>
 event. The only difference between the two handlers is the event argument's <Run>IsOK</Run>
 property. This property enables the host to determine which button was clicked. It is set to <Run FontWeight="Bold">true</Run>
 for the <Run FontWeight="Bold">OK</Run>
 button, and <Run FontWeight="Bold">false</Run>
 for the <Run FontWeight="Bold">Cancel</Run>
 button. The following code example shows the two button handlers. Add this code to your class, placing it below the event and delegate declaration shown in the first code example in this section.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private void OKButton_Click(object sender, System.EventArgs e) { MyControlEventArgs retvals = new MyControlEventArgs(true, txtName.Text, txtAddress.Text, txtCity.Text, txtState.Text, txtZip.Text); 
OnButtonClick(this, retvals); 
} private void CancelButton_Click(object sender, System.EventArgs e) { MyControlEventArgs retvals = new MyControlEventArgs(false, txtName.Text, txtAddress.Text, txtCity.Text, txtState.Text, txtZip.Text); 
OnButtonClick(this, retvals); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Private Sub OKButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnOK.Click Dim retvals As New MyControlEventArgs(True, txtName.Text, txtAddress.Text, txtCity.Text, txtState.Text, txtZip.Text) RaiseEvent OnButtonClick(Me, retvals) End Sub Private Sub CancelButton_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancel.Click Dim retvals As New MyControlEventArgs(False, txtName.Text, txtAddress.Text, txtCity.Text, txtState.Text, txtZip.Text) RaiseEvent OnButtonClick(Me, retvals) End Sub End Class </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Giving the Assembly a Strong Name and Building the Assembly
    </Paragraph>

    <Paragraph>For this assembly to be referenced by a WPF application, it must have a strong name. To create a strong name, create a key file with Sn.exe and add it to your project's AssemblyInfo.cs file.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Open a Visual Studio command prompt. To do so, click the <Run FontWeight="Bold">Start</Run>
 menu, and then select <Run FontWeight="Bold">All Programs/Microsoft Visual Studio 2005/Visual Studio Tools/Visual Studio 2005 Command Prompt</Run>
. This launches a console window with customized environment variables.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>At the command prompt, use the "cd" command to go to your project folder.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Generate a key file named MyControls.snk by running the following command. 
        </Paragraph>

        <Table CellSpacing="5">
          <TableRowGroup>
            <TableRow>
              <TableCell>
                <Paragraph FontSize="22"><Run/>
                </Paragraph>

              </TableCell>

            </TableRow>

            <TableRow>
              <TableCell>
                <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Sn.exe -k MyControls.snk</Run>

                </Paragraph>

              </TableCell>

            </TableRow>

          </TableRowGroup>

        </Table>

        <Paragraph/>
      </ListItem>

      <ListItem>
        <Paragraph>To include the key file in your project, right-click the project name in Solution Explorer and open the <Run FontWeight="Bold">Properties</Run>
 dialog box. Select the <Run FontWeight="Bold">Signing</Run>
 tab, and enter the name of your key file.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Build the assembly. The build will produce a DLL named MyControls.dll.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Implementing the Host Application with Windows Presentation Foundation
    </Paragraph>

    <Paragraph>The WPF host application uses the WindowsFormsHost control to host <Run>MyControl1</Run>
. The application handles the <Run>OnButtonClick</Run>
 event to receive the data from the control. It also has a collection of option buttons that enable you to change some of the control's properties from the WPF page. The following illustration shows the finished application.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">The complete application, showing the control embedded in the Windows Presentation Foundation page</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="18">Creating the Project
    </Paragraph>

    <Paragraph>To start the project:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Open Visual Studio, and select <Run FontWeight="Bold">New Project</Run>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select the<Run FontWeight="Bold">Windows Application (WPF)</Run>
 template.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Name the project <Run FontWeight="Bold">WpfHost</Run>
, and click <Run FontWeight="Bold">OK</Run>
 to open the project.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>You will also need to add a reference to the DLL that contains <Run>MyControl1</Run>
. The simplest way to add the reference is as follows.
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Right-click the project name in Solution Explorer, and launch the <Run FontWeight="Bold">Add Reference</Run>
 dialog box.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Click the <Run FontWeight="Bold">Browse</Run>
 tab, and browse to the Windows Form control's output folder. For this sample, this folder is MyControls\bin\Debug.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Select the DLL that contains the control, and click <Run FontWeight="Bold">OK</Run>
 to add it to the list of references. For Hosting a Windows Forms Composite Control in a Windows Presentation Foundation Page Sample, this DLL is named MyControls.dll.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>In Solution Explorer, add a reference to the WindowsFormsIntegration assembly, which is named WindowsFormsIntegration.dll. 
        </Paragraph>

        <Paragraph>The default location for this file is %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Implementing the Basic Layout
    </Paragraph>

    <Paragraph>The user interface (UI) of the host application is implemented in Page1.xaml. This file contains Extensible Application Markup Language (XAML) markup that defines the page layout, and hosts the Windows Forms control. The page is divided into three regions:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>The <Run FontWeight="Bold">Control Properties</Run>
 panel, which contains a collection of option buttons that you can use to modify various properties of the hosted control.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The <Run FontWeight="Bold">Data from Control</Run>
 panel, which contains several TextBlock elements that display the data returned from the hosted control. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The hosted control itself.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>The basic layout code is shown in the following code example. The markup code that is needed to host <Run>MyControl1</Run>
 is omitted from this example, but will be discussed later. Replace the code in Page1.xaml with the following.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="WpfHost.Page1" xmlns:mcl="clr-namespace:MyControls;assembly=MyControls" Loaded="Init"> 
&lt;DockPanel> 
&lt;DockPanel.Resources> 
&lt;Style x:Key="inlineText" TargetType="{x:Type Inline}"> 
&lt;Setter Property="FontWeight" Value="Normal"/> 
&lt;/Style> 
&lt;Style x:Key="titleText" TargetType="{x:Type TextBlock}"> 
&lt;Setter Property="DockPanel.Dock" Value="Top"/> 
&lt;Setter Property="FontWeight" Value="Bold"/> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;/Style> 
&lt;/DockPanel.Resources> 
&lt;StackPanel Orientation="Vertical" DockPanel.Dock="Left" Background="Bisque" Width="250"> 
&lt;TextBlock Margin="10,10,10,10" FontWeight="Bold" FontSize="12">Control Properties
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}">Background Color
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalBackColor" IsChecked="True" Click="BackColorChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBackGreen" Click="BackColorChanged">LightGreen
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBackSalmon" Click="BackColorChanged">LightSalmon
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Foreground Color
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalForeColor" IsChecked="True" Click="ForeColorChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnForeRed" Click="ForeColorChanged">Red
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnForeYellow" Click="ForeColorChanged">Yellow
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Family
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalFamily" IsChecked="True" Click="FontChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTimes" Click="FontChanged">Times New Roman
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnWingdings" Click="FontChanged">Wingdings
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Size
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalSize" IsChecked="True" Click="FontSizeChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTen" Click="FontSizeChanged">10
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTwelve" Click="FontSizeChanged">12
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Style
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnNormalStyle" IsChecked="True" Click="StyleChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnItalic" Click="StyleChanged">Italic
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Weight
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalWeight" IsChecked="True" Click="WeightChanged"> Original 
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBold" Click="WeightChanged">Bold
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;/StackPanel> 
&lt;WindowsFormsHost Name="wfh" DockPanel.Dock="Top" Height="300"> 
&lt;mcl:MyControl1 Name="mc"/> 
&lt;/WindowsFormsHost> 
&lt;StackPanel Orientation="Vertical" Height="Auto" Background="LightBlue"> 
&lt;TextBlock Margin="10,10,10,10" FontWeight="Bold" FontSize="12">Data From Control
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Name: 
&lt;Span Name="txtName" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Street Address: 
&lt;Span Name="txtAddress" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> City: 
&lt;Span Name="txtCity" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> State: 
&lt;Span Name="txtState" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Zip: 
&lt;Span Name="txtZip" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;/StackPanel> 
&lt;/DockPanel> 
&lt;/Page> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="Page1" xmlns:mcl="clr-namespace:MyControls;assembly=MyControls" Loaded="Init"> 
&lt;DockPanel> 
&lt;DockPanel.Resources> 
&lt;Style x:Key="inlineText" TargetType="{x:Type Inline}"> 
&lt;Setter Property="FontWeight" Value="Normal"/> 
&lt;/Style> 
&lt;Style x:Key="titleText" TargetType="{x:Type TextBlock}"> 
&lt;Setter Property="DockPanel.Dock" Value="Top"/> 
&lt;Setter Property="FontWeight" Value="Bold"/> 
&lt;Setter Property="Margin" Value="10,5,10,0"/> 
&lt;/Style> 
&lt;/DockPanel.Resources> 
&lt;StackPanel Orientation="Vertical" DockPanel.Dock="Left" Background="Bisque" Width="250"> 
&lt;TextBlock Margin="10,10,10,10" FontWeight="Bold" FontSize="12">Control Properties
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}">Background Color
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalBackColor" IsChecked="True" Click="BackColorChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBackGreen" Click="BackColorChanged">LightGreen
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBackSalmon" Click="BackColorChanged">LightSalmon
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Foreground Color
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalForeColor" IsChecked="True" Click="ForeColorChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnForeRed" Click="ForeColorChanged">Red
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnForeYellow" Click="ForeColorChanged">Yellow
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Family
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalFamily" IsChecked="True" Click="FontChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTimes" Click="FontChanged">Times New Roman
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnWingdings" Click="FontChanged">Wingdings
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Size
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalSize" IsChecked="True" Click="FontSizeChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTen" Click="FontSizeChanged">10
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnTwelve" Click="FontSizeChanged">12
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Style
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnNormalStyle" IsChecked="True" Click="StyleChanged">Original
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnItalic" Click="StyleChanged">Italic
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;TextBlock Style="{StaticResource titleText}">Font Weight
&lt;/TextBlock> 
&lt;StackPanel Margin="10,10,10,10"> 
&lt;RadioButton Name="rdbtnOriginalWeight" IsChecked="True" Click="WeightChanged"> Original 
&lt;/RadioButton> 
&lt;RadioButton Name="rdbtnBold" Click="WeightChanged">Bold
&lt;/RadioButton> 
&lt;/StackPanel> 
&lt;/StackPanel> 
&lt;WindowsFormsHost Name="wfh" DockPanel.Dock="Top" Height="300"> 
&lt;mcl:MyControl1 Name="mc"/> 
&lt;/WindowsFormsHost> 
&lt;StackPanel Orientation="Vertical" Height="Auto" Background="LightBlue"> 
&lt;TextBlock Margin="10,10,10,10" FontWeight="Bold" FontSize="12">Data From Control
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Name: 
&lt;Span Name="txtName" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Street Address: 
&lt;Span Name="txtAddress" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> City: 
&lt;Span Name="txtCity" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> State: 
&lt;Span Name="txtState" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;TextBlock Style="{StaticResource titleText}"> Zip: 
&lt;Span Name="txtZip" Style="{StaticResource inlineText}"/> 
&lt;/TextBlock> 
&lt;/StackPanel> 
&lt;/DockPanel> 
&lt;/Page> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The first StackPanel element contains several sets of RadioButton controls that enable you to modify various default properties of the hosted control. That is followed by a <Run FontWeight="Bold">WindowsFormsHost</Run>
 element, which hosts <Run>MyControl1</Run>
. The final <Run FontWeight="Bold">StackPanel</Run>
 element contains several <Run FontWeight="Bold">TextBlock</Run>
 elements that display the data that is returned by the hosted control. The ordering of the elements and the Dock and Height attribute settings embed the hosted control into the page with no gaps or distortion. See Layout for further information on WPF layout.
    </Paragraph>

    <Paragraph FontSize="16pt">Hosting the Control
    </Paragraph>

    <Paragraph>The following edited version of the previous code example focuses on the elements that are needed to host <Run>MyControl1</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="WpfHost.Page1" xmlns:mcl="clr-namespace:MyControls;assembly=MyControls" Loaded="Init"> ... 
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="Page1" xmlns:mcl="clr-namespace:MyControls;assembly=MyControls" Loaded="Init"> ... 
&lt;WindowsFormsHost Name="wfh" DockPanel.Dock="Top" Height="300"> 
&lt;mcl:MyControl1 Name="mc"/> 
&lt;/WindowsFormsHost> ... 
&lt;WindowsFormsHost Name="wfh" DockPanel.Dock="Top" Height="300"> 
&lt;mcl:MyControl1 Name="mc"/> 
&lt;/WindowsFormsHost> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run>xmlns</Run>
 namespace mapping attribute creates a reference to the <Run>MyControls</Run>
 namespace that contains the hosted control. This mapping enables you to represent <Run>MyControl1</Run>
 in XAML as <Run>
&lt;mcl:MyControl1></Run>
. 
    </Paragraph>

    <Paragraph>Two elements in the code example handle the hosting:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run>WindowsFormsHost</Run>
 represents the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element that enables you to host a Windows Forms control on a WPF page.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>mcl:MyControl1</Run>
, which represents <Run>MyControl1</Run>
, is added to the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's child collection. As a result, this Windows Forms control is rendered as part of the WPF page, and you can communicate with the control from the page.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Implementing the Code-Behind File
    </Paragraph>

    <Paragraph>The code-behind file, Page1.xaml.cs, contains the procedural code that implements the functionality of the UI discussed in the preceding section. The primary tasks are:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Attaching an event handler to <Run>MyControl1</Run>
's <Run>OnButtonClick</Run>
 event.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Modifying various properties of <Run>MyControl1</Run>
, based on how the collection of option buttons are set.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Displaying the data collected by the control.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="16pt">Initializing the Application
    </Paragraph>

    <Paragraph>The initialization code is contained in an event handler for the page's Loaded event and attaches an event handler to the control's <Run>OnButtonClick</Run>
 event. Copy the following code into the <Run>Page1</Run>
 class in Page1.xaml.cs.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public partial class Page1 : Page { private Application app; 
private NavigationWindow myWindow; 
FontWeight initFontWeight; 
Double initFontSize; 
FontStyle initFontStyle; 
SolidColorBrush initBackBrush; 
SolidColorBrush initForeBrush; 
FontFamily initFontFamily; 
bool UIIsReady = false; 
private void Init(object sender, EventArgs e) { app = System.Windows.Application.Current; 
myWindow = (NavigationWindow)app.MainWindow; 
myWindow.SizeToContent = SizeToContent.WidthAndHeight; 
wfh.TabIndex = 10; 
initFontSize = wfh.FontSize; 
initFontWeight = wfh.FontWeight; 
initFontFamily = wfh.FontFamily; 
initFontStyle = wfh.FontStyle; 
initBackBrush = (SolidColorBrush)wfh.Background; 
initForeBrush = (SolidColorBrush)wfh.Foreground; 
(wfh.Child as MyControl1).OnButtonClick += new MyControl1.MyControlEventHandler(Pane1_OnButtonClick); 
UIIsReady = true; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Class Page1 Inherits Page Private app As Application Private myWindow As NavigationWindow Private initFontWeight As FontWeight Private initFontSize As [Double] Private initFontStyle As FontStyle Private initBackBrush As SolidColorBrush Private initForeBrush As SolidColorBrush Private initFontFamily As FontFamily Private UIIsReady As Boolean = False Private Sub Init(ByVal sender As Object, ByVal e As RoutedEventArgs) app = System.Windows.Application.Current myWindow = CType(app.MainWindow, NavigationWindow) myWindow.SizeToContent = SizeToContent.WidthAndHeight wfh.TabIndex = 10 initFontSize = wfh.FontSize initFontWeight = wfh.FontWeight initFontFamily = wfh.FontFamily initFontStyle = wfh.FontStyle initBackBrush = CType(wfh.Background, SolidColorBrush) initForeBrush = CType(wfh.Foreground, SolidColorBrush) Dim mc As MyControl1 = wfh.Child AddHandler mc.OnButtonClick, AddressOf Pane1_OnButtonClick UIIsReady = True End Sub </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Because the XAML code discussed previously added <Run>MyControl1</Run>
 to the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's child element collection, you can cast the <Run FontWeight="Bold">WindowsFormsHost</Run>
 element's Child to get the reference to <Run>MyControl1</Run>
. You can then use that reference to attach an event handler to <Run>OnButtonClick</Run>
.
    </Paragraph>

    <Paragraph>In addition to providing a reference to the control itself, <Run FontWeight="Bold">WindowsFormsHost</Run>
 exposes a number of the control's properties, which you can manipulate from the page. The initialization code assigns those values to private global variables for later use in the application.
    </Paragraph>

    <Paragraph FontSize="16pt">Handling the OnButtonClick Event
    </Paragraph>

    <Paragraph><Run>MyControl1</Run>
 raises the <Run>OnButtonClick</Run>
 event when the user clicks either of the control's buttons. Add the following code to your <Run>Page1</Run>
 class.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>//Handle button clicks on the Windows Form control private void Pane1_OnButtonClick(object sender, MyControlEventArgs args) { txtName.Inlines.Clear(); 
txtAddress.Inlines.Clear(); 
txtCity.Inlines.Clear(); 
txtState.Inlines.Clear(); 
txtZip.Inlines.Clear(); 
if (args.IsOK) { txtName.Inlines.Add( " " + args.MyName ); 
txtAddress.Inlines.Add( " " + args.MyStreetAddress ); 
txtCity.Inlines.Add( " " + args.MyCity ); 
txtState.Inlines.Add( " " + args.MyState ); 
txtZip.Inlines.Add( " " + args.MyZip ); 
} } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>'Handle button clicks on the Windows Form control Private Sub Pane1_OnButtonClick(ByVal sender As Object, ByVal args As MyControlEventArgs) txtName.Inlines.Clear() txtAddress.Inlines.Clear() txtCity.Inlines.Clear() txtState.Inlines.Clear() txtZip.Inlines.Clear() If args.IsOK Then txtName.Inlines.Add(" " + args.MyName) txtAddress.Inlines.Add(" " + args.MyStreetAddress) txtCity.Inlines.Add(" " + args.MyCity) txtState.Inlines.Add(" " + args.MyState) txtZip.Inlines.Add(" " + args.MyZip) End If End Sub End Class </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The data in the text boxes is packed into the <Run>MyControlEventArgs</Run>
 object. If the user clicks the <Run FontWeight="Bold">OK</Run>
 button, the event handler extracts the data and displays it in the panel below <Run>MyControl1</Run>
. 
    </Paragraph>

    <Paragraph FontSize="16pt">Modifying the Control’s Properties
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">WindowsFormsHost</Run>
 element exposes several of the hosted control's default properties. As a result, you can change the appearance of the control to match the style of your page more closely. The sets of option buttons in the left panel enable the user to modify several color and font properties. Each set of buttons has a handler for the Click event, which detects the user's option button selections and changes the corresponding property on the control. Copy the following code to your <Run>Page1</Run>
 class. You can now compile and run the application.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>private void BackColorChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnBackGreen) wfh.Background = new SolidColorBrush(Colors.LightGreen); 
else if (sender == rdbtnBackSalmon) wfh.Background = new SolidColorBrush(Colors.LightSalmon); 
else if (UIIsReady == true) wfh.Background = initBackBrush; 
} private void ForeColorChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnForeRed) wfh.Foreground = new SolidColorBrush(Colors.Red); 
else if (sender == rdbtnForeYellow) wfh.Foreground = new SolidColorBrush(Colors.Yellow); 
else if (UIIsReady == true) wfh.Foreground = initForeBrush; 
} private void FontChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnTimes) wfh.FontFamily = new FontFamily("Times New Roman"); 
else if (sender == rdbtnWingdings) wfh.FontFamily = new FontFamily("Wingdings"); 
else if (UIIsReady == true) wfh.FontFamily = initFontFamily; 
} private void FontSizeChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnTen) wfh.FontSize = 10; 
else if (sender == rdbtnTwelve) wfh.FontSize = 12; 
else if (UIIsReady == true) wfh.FontSize = initFontSize; 
} private void StyleChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnItalic) wfh.FontStyle = FontStyles.Italic; 
else if (UIIsReady == true) wfh.FontStyle = initFontStyle; 
} private void WeightChanged(object sender, RoutedEventArgs e) { if (sender == rdbtnBold) wfh.FontWeight = FontWeights.Bold; 
else if (UIIsReady == true) wfh.FontWeight = initFontWeight; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Private Sub BackColorChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnBackGreen) Then wfh.Background = New SolidColorBrush(Colors.LightGreen) ElseIf sender.Equals(rdbtnBackSalmon) Then wfh.Background = New SolidColorBrush(Colors.LightSalmon) ElseIf UIIsReady = True Then wfh.Background = initBackBrush End If End Sub Private Sub ForeColorChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnForeRed) Then wfh.Foreground = New SolidColorBrush(Colors.Red) ElseIf sender.Equals(rdbtnForeYellow) Then wfh.Foreground = New SolidColorBrush(Colors.Yellow) ElseIf UIIsReady = True Then wfh.Foreground = initForeBrush End If End Sub Private Sub FontChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnTimes) Then wfh.FontFamily = New FontFamily("Times New Roman") ElseIf sender.Equals(rdbtnWingdings) Then wfh.FontFamily = New FontFamily("Wingdings") ElseIf UIIsReady = True Then wfh.FontFamily = initFontFamily End If End Sub Private Sub FontSizeChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnTen) Then wfh.FontSize = 10 ElseIf sender.Equals(rdbtnTwelve) Then wfh.FontSize = 12 ElseIf UIIsReady = True Then wfh.FontSize = initFontSize End If End Sub Private Sub StyleChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnItalic) Then wfh.FontStyle = FontStyles.Italic ElseIf UIIsReady = True Then wfh.FontStyle = initFontStyle End If End Sub Private Sub WeightChanged(ByVal sender As Object, ByVal e As RoutedEventArgs) If sender.Equals(rdbtnBold) Then wfh.FontWeight = FontWeights.Bold ElseIf UIIsReady = True Then wfh.FontWeight = initFontWeight End If End Sub </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="9cb88415-39b0-4c46-80c4-ff325b674286.xaml">Walkthrough: Hosting a Windows Forms Control in Windows Presentation Foundation</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>ElementHost
      <LineBreak/>WindowsFormsHost
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="0ac41286-4c1b-4b17-9196-d985cb844ce1.xaml">Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

