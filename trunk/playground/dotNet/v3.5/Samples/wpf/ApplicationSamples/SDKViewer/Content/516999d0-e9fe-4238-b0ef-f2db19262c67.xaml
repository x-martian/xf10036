<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_516999d0_e9fe_4238_b0ef_f2db19262c67"
  Tag     ="Detect Mouse Button State"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Detect Mouse Button State</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to use mouse button events and the MouseButtonState property to determine whether a specific mouse button is pressed or released.
    </Paragraph>

    <Paragraph>This example consists of a Extensible Application Markup Language (XAML) file a code behind file. For the complete samples, see the Detecting Mouse Button State Sample sample.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following code creates the user interface, which consists of a TextBlock inside a StackPanel, and attaches event handlers for the MouseLeftButtonDown and MouseLeftButtonUp events.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;StackPanel Height="100" Width="100" MouseLeftButtonDown="HandleButtonDown" MouseLeftButtonUp="HandleButtonDown" Background="#d08080" DockPanel.Dock="Left" > 
&lt;TextBlock>Click on Me
&lt;/TextBlock> 
&lt;/StackPanel> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following code behind creates the <Run FontWeight="Bold">MouseLeftButtonUp</Run>
 and <Run FontWeight="Bold">MouseLeftButtonDown</Run>
 event handlers. When the left mouse button is pressed, the dimensions of the <Run FontWeight="Bold">TextBlock</Run>
 are increased. When the left button is released, the dimensions of the <Run FontWeight="Bold">TextBlock</Run>
 are restored to the original height and width.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public Window1() { InitializeComponent(); 
} void HandleButtonDown(object sender, MouseButtonEventArgs e) { //Casting the source to a StackPanel StackPanel sourceStackPanel = e.Source as StackPanel; 
//If the button is pressed then make dimensions larger. if (e.ButtonState == MouseButtonState.Pressed) { sourceStackPanel.Width = 200; 
sourceStackPanel.Height = 200; 
} //If the button is released then make dimensions smaller. else if (e.ButtonState == MouseButtonState.Released) { sourceStackPanel.Width = 100; 
sourceStackPanel.Height = 100; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Partial Public Class Window1 Inherits Window Public Sub New() InitializeComponent() End Sub Sub HandleButtonDown(ByVal sender As Object, ByVal e As MouseButtonEventArgs) ' Casting the source to a StackPanel Dim sourceStackPanel As StackPanel = CType(e.Source, StackPanel) ' If the button is pressed then make dimensions larger. If e.ButtonState = MouseButtonState.Pressed Then sourceStackPanel.Width = 200 sourceStackPanel.Height = 200 ' If the button is released then make dimensions smaller. ElseIf e.ButtonState = MouseButtonState.Released Then sourceStackPanel.Width = 100 sourceStackPanel.Height = 100 End If End Sub End Class </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="ee5258b7-6567-415a-9b1c-c0cbe46e79ef.xaml">Input Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Detecting Mouse Button State Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Detect Mouse Button State to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

