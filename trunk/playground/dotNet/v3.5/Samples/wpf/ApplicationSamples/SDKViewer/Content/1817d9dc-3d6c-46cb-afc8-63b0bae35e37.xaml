<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_1817d9dc_3d6c_46cb_afc8_63b0bae35e37"
  Tag     ="Graphics, Animation, and Media Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>WPF Graphics, Animation, and Media Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic introduces the graphics, animation, and media features of Windows Presentation Foundation (WPF), which enable you to add graphics, transition effects, sound, and video to your applications.
    </Paragraph>

    <Paragraph>WPF provides advanced drawing and animation features, features that were previously available only from specialized libraries—specifically, Microsoft Windows Graphics Device Interface (GDI) and Microsoft Windows GDI+. WPF now offers integrated support for multimedia, vector graphics, animation, and content composition, making it easy for developers to build interesting user interfaces and content. Using Microsoft Visual Studio .NET, or even a text editor like Microsoft Notepad, you can create vector graphics or complex animations and integrate media into your applications.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="milfeatures">What's New with Graphics and Multimedia in the WPF</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="milareas">Graphics and Multimedia Areas</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="AboutResolutionAndDeviceIndependentGraphics">About Resolution and Device-Independent Graphics</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">What's New with Graphics and Multimedia in the WPF
    </Paragraph>

    <Paragraph>WPF introduces new graphics and multimedia-related features for Windows developers. The benefits of using WPF include the following: 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run FontWeight="Bold">Resolution and device-independent graphics</Run>
. The WPF graphics system uses device-independent units to enable resolution and device independence. Each <Run>device independent pixel</Run>
 automatically scales with the system's DPI setting. See the <Hyperlink TargetName="AboutResolutionAndDeviceIndependentGraphics">About Resolution and Device-Independent Graphics</Hyperlink>
 section of this document for more information.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Improved precision</Run>
. The WPF coordinate system uses doubles instead of floats. Transformations and opacity values are also expressed using doubles. WPF also supports a wider color gamut (scRGB) and provides integrated support for managing inputs from different color spaces.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Advanced graphics and animation support</Run>
.  WPF provides a scene graph/scene partitioning solution, which includes hit testing support and minimal redraw features, as well as an integrated animation system. It also provides full alpha compositing support.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Hardware acceleration</Run>
. The WPF graphics system is designed to take advantage of graphics hardware to minimize CPU utilization.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Graphics and Multimedia Areas
    </Paragraph>

    <Paragraph>The following sections describe the areas that comprise the WPF graphics and multimedia APIs. 
    </Paragraph>

    <Paragraph FontSize="18">Graphics
    </Paragraph>

    <Paragraph>The following areas comprise the WPF graphic APIs.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run FontWeight="Bold">Brushes</Run>
. Use the Brush classes to paint areas with solid colors, patterns, images, and drawings. For more information and examples, see <Hyperlink NavigateUri="f5b182f3-c5c7-4cbe-9f2f-65e690d08255.xaml">Painting with Solid Colors and Gradients Overview</Hyperlink>
 and <Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>
. The brush classes belong to the System.Windows.Media namespace.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Shapes</Run>
. Use Shape classes to create and render 2-D geometric shapes. They also support a variety of events, making them suitable for use as controls or control components. For an introduction to drawing in WPF, see <Hyperlink NavigateUri="66d7a6d6-e3b6-47bc-8dfe-8a1b26f7d901.xaml">Shapes and Basic Drawing in WPF Overview</Hyperlink>
. The shape classes belong to the System.Windows.Shapes namespace.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Imaging</Run>
. Use the imaging classes to encode, manipulate, and displays bitmaps, and to apply special effects such as glow and blur to images and vectors. The Image class, used to display bitmaps, is located in the System.Windows.Controls namespace. The other imaging APIs are located in the <Run FontWeight="Bold">System.Windows.Media</Run>
 namespace.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Geometries</Run>
. Geometries, like shape objects, represent 2-D shapes. Geometries are more versatile than shape objects, in that they can be used to define curves, clipping regions, and hit-testing areas. Unlike shape objects, geometries do not participate in the layout system and cannot draw themselves to the screen. They can be rendered using other framework elements, controls, visuals, or brushes. For more information about geometries, see the <Hyperlink NavigateUri="9fba8934-98b7-4af6-82f6-f4ef887f963a.xaml">Geometry Overview</Hyperlink>
. The geometry classes belong to the <Run FontWeight="Bold">System.Windows.Media</Run>
 namespace. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Transformations</Run>
. Use the Transform classes to rotate, translate, scale, and apply other 2-D effects to geometries, visuals, brushes, framework elements, and controls. The transform classes are located in the <Run FontWeight="Bold">System.Windows.Media</Run>
 namespace. For more information and examples, see <Hyperlink NavigateUri="66d7a6d6-e3b6-47bc-8dfe-8a1b26f7d901.xaml">Shapes and Basic Drawing in WPF Overview</Hyperlink>
.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Animations</Run>
. Use the animation and timing APIs to make objects change color, move, spin, grow, shrink, and more. For more information, see <Hyperlink NavigateUri="bd9ce563-725d-4385-87c9-d7ee38cf79ea.xaml">Animation Overview</Hyperlink>
. The animation and timing APIs belong to the System.Windows.Media.Animation namespace.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run FontWeight="Bold">Visuals</Run>
. Visual objects are the building blocks of the WPF rendering system. The visual layer is the WPF equivalent to GDI. All WPF objects use visuals to draw to the screen. You can use visuals to create highly customized graphical objects. Visuals are located in the <Run FontWeight="Bold">System.Windows.Media</Run>
 namespace. .
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">3-D Graphics
    </Paragraph>

    <Paragraph>The System.Windows.Media.Media3D namespace defines 3-D graphics primitives, transformations, and animations that can be used to create 3-D controls and graphics. For additional information, see the <Hyperlink NavigateUri="67f31ed4-e36b-4b02-9889-dcce245d7afc.xaml">3-D Graphics Overview</Hyperlink>
. For an example, see <Hyperlink NavigateUri="adb4a598-71a2-4dd5-b677-ea3fc11b78b2.xaml">How to: Create a 3-D Scene</Hyperlink>
. 
    </Paragraph>

    <Paragraph FontSize="18">Text
    </Paragraph>

    <Paragraph>WPF introduces many new text-related features for Windows developers. These features include hardware-accelerated rendering, subpixel-accurate positioning, integrated international support, and integrated font embedding support. For more information about element-level text APIs, see <Hyperlink NavigateUri="06cbf17b-6eff-4fe5-949d-2dd533e4e1f4.xaml">Typography in Windows Presentation Foundation</Hyperlink>
 and <Hyperlink NavigateUri="6e8db7bc-050a-4070-aa72-bb8c46e87ff8.xaml">Documents in Windows Presentation Foundation</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22">About Resolution and Device-Independent Graphics
    </Paragraph>

    <Paragraph>There are two system factors that determine the size of text and graphics on your screen: resolution and DPI. Resolution describes the number of pixels that appear on the screen. As the resolution gets higher, pixels get smaller, causing graphics and text to appear smaller. A graphic displayed on a monitor set to 1024 x 768 will appear much smaller when the resolution is changed to 1600 x 1200. 
    </Paragraph>

    <Paragraph>The other system setting, DPI, describes the size of a screen inch in pixels. Most Windows systems have a DPI of 96, which means a screen inch is 96 pixels. Increasing the DPI setting makes the screen inch larger; 
decreasing the DPI makes the screen inch smaller. This means that a screen inch isn't the same size as a real-world inch; 
on most systems, it's probably not. As you increase the DPI, DPI-aware graphics and text become larger because you've increased the size of the screen inch. Increasing the DPI can make text easier to read, especially at high resolutions.
    </Paragraph>

    <Paragraph>Not all applications are DPI-aware: some use hardware pixels as the primary unit of measurement; 
changing the system DPI has no effect on these applications. Many other applications use DPI-aware units to describe font sizes, but use pixels to describe everything else. Making the DPI too small or too large can cause layout problems for these applications, because the applications' text scales with the system's DPI setting, but the applications' UI does not. This problem has been eliminated for applications developed using WPF. 
    </Paragraph>

    <Paragraph>WPF supports automatic scaling by using the device independent pixel as its primary unit of measurement, instead of hardware pixels; 
graphics and text scale properly without any extra work from the application developer. The following illustration shows an example of how WPF text and graphics are appear at different DPI settings.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="66d7a6d6-e3b6-47bc-8dfe-8a1b26f7d901.xaml">Shapes and Basic Drawing in WPF Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="f5b182f3-c5c7-4cbe-9f2f-65e690d08255.xaml">Painting with Solid Colors and Gradients Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="779aac3f-8d41-49d8-8130-768244aa2240.xaml">Painting with Images, Drawings, and Visuals</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="bd9ce563-725d-4385-87c9-d7ee38cf79ea.xaml">Animation Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about WPF Graphics, Animation, and Media Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

