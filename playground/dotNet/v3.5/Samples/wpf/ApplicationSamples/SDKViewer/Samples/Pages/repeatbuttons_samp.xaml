<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Sample Title" x:Class="RepeatButtons.Page1" Loaded="OnLoaded">
    <Page.Resources>
        <Style x:Key="itemHeaderStyler">
            <Setter Property="ListBoxItem.Margin" Value="0,2,0,5" />
            <Setter Property="ListBoxItem.Padding" Value="2" />
            <Setter Property="ListBoxItem.FontFamily" Value="Verdana" />
            <Setter Property="ListBoxItem.FontWeight" Value="Bold" />
            <Setter Property="ListBoxItem.FontSize" Value="12" />
        </Style>
        <Style x:Key="imageStyler">
            <Setter Property="TextBlock.Margin" Value="15" />
        </Style>
        <Style x:Key="HeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="TabStyle">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabStyle2">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="TabItem.Foreground" Value="Black" />
        </Style>
        <Style x:Key="SubHeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="16" />
            <Setter Property="TextBlock.Foreground" Value="DarkSlateBlue" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="DisStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="8" />
            <Setter Property="TextBlock.Foreground" Value="Gray" />
            <Setter Property="TextBlock.Margin" Value="5,0,5,0" />
        </Style>
        <Style x:Key="mainContentStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="5,10,5,10" />
        </Style>
        <Style x:Key="tocStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.Margin" Value="0" />
        </Style>
        <Style x:Key="CodeSnippetParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Courier New" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10,0,10,0" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="noteParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="TCStyle">
            <Setter Property="TabControl.Margin" Value="10" />
        </Style>
    </Page.Resources>
    <TabControl MinHeight="500" MaxHeight="700" MinWidth="400" Style="{StaticResource TCStyle}">
        <TabItem Style="{StaticResource TabStyle}" Header="Repeat Buttons Sample" IsSelected="true">
            <StackPanel>
                <TextBlock Style="{StaticResource HeaderStyle}">Repeat Buttons</TextBlock>
                <TextBlock Style="{StaticResource mainContentStyle}">This example shows how to increment and decrement a number using repeat buttons.</TextBlock>
                <TextBlock Style="{StaticResource mainContentStyle}">The preview window renders code from the C#+Markup tab. The VB+markup code is provided for reference purposes.</TextBlock>
            </StackPanel>
        </TabItem>
        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;DockPanel  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="RepeatButtons.Pane1"
    &gt;

  &lt;Grid&gt;
    &lt;ColumnDefinition Width="Auto"/&gt;
    &lt;ColumnDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="0" FontSize="24"&gt;RepeatButtons&lt;/TextBlock&gt;
    &lt;TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" FontSize="12pt"&gt;The following repeat button examples demonstrate:&lt;/TextBlock&gt;
    &lt;DockPanel Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="2"&gt;
      &lt;RepeatButton Width="100" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Increase"&gt;Increase&lt;/RepeatButton&gt;
      &lt;RepeatButton Width="100" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Decrease"&gt;Decrease&lt;/RepeatButton&gt;
      &lt;Button Name="btn" Width="100" DockPanel.Dock="Top" FontSize="16pt"&gt;0&lt;/Button&gt;
    &lt;/DockPanel&gt;
    &lt;TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="2" FontSize="10pt" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Two repeat buttons that increase and decrease a numerical value. They have their delay properties set to 500 milliseconds and their interval properties set to 100.&lt;/TextBlock&gt;
    &lt;DockPanel Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="3"&gt;
      &lt;RepeatButton Delay="500" Interval="100" Width="25" Height="30"  Click="Decrease2" DockPanel.Dock="Top"&gt;
        &lt;Image Source="data/uparrow.png"/&gt;
      &lt;/RepeatButton&gt;
      &lt;Button Name="btn2" DockPanel.Dock="Top" Width="25" Height="30" FontSize="14pt"&gt;0&lt;/Button&gt;
      &lt;RepeatButton Delay="500" Interval="100" Width="25" Height="30"  Click="Increase2" DockPanel.Dock="Top"&gt;
        &lt;Image Source="data/downarrow.png"/&gt;
      &lt;/RepeatButton&gt;
    &lt;/DockPanel&gt;
    &lt;TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="3" FontSize="10pt" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Two repeat buttons and a button that behave like a spinner control. The range is 0 - 50. The content of the repeat buttons are the arrow images.&lt;/TextBlock&gt;
  &lt;/Grid&gt;
&lt;/DockPanel&gt;

                
            </TextBox>
                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="C#">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
//This is a list of commonly used namespaces for a pane.
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Data;

namespace RepeatButtons
{
  /// &lt;summary&gt;
  /// Interaction logic for Pane1.xaml
  /// &lt;/summary&gt;

  public partial class Pane1 : DockPanel
  {
    // To use PaneLoaded put Loaded="PaneLoaded" in root element of .xaml file.
    // private void PaneLoaded(object sender, EventArgs e) {}
    // Sample event handler:  
    // private void ButtonClick(object sender, ClickEventArgs e) {}
    void Increase(object sender, RoutedEventArgs e)
    {
      Int32 Num = Convert.ToInt32(btn.Content);

      btn.Content = ((Num + 1).ToString());
    }

    void Decrease(object sender, RoutedEventArgs e)
    {
      Int32 Num = Convert.ToInt32(btn.Content);

      btn.Content = ((Num - 1).ToString());
    }
    void Increase2(object sender, RoutedEventArgs e)
    {
      Int32 Num = Convert.ToInt32(btn2.Content);

      btn2.Content = ((Num + 1).ToString());
      if (Num &gt;= 50)
      {
        btn2.Content = 50;
      }
    }

    void Decrease2(object sender, RoutedEventArgs e)
    {
      Int32 Num = Convert.ToInt32(btn2.Content);

      btn2.Content = ((Num - 1).ToString());
      if (Num &lt;= 0)
      {
        btn2.Content = 0;
      }
    }
  }
}       
                
            </TextBox>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
 
&lt;StackPanel  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="RepeatButton_vb.Pane1"
    &gt;
    &lt;!--  The namespace + class name in the codebehind file and the x:Class attribute in the root of this document, must stay identical.  You can change them, but you must keep them in sync. --&gt;
 &lt;Grid&gt; 
 &lt;ColumnDefinition/&gt; 
 &lt;ColumnDefinition/&gt; 
 &lt;RowDefinition/&gt;
 &lt;RowDefinition/&gt; 
 &lt;RowDefinition/&gt; 
 &lt;RowDefinition/&gt; 
 &lt;RowDefinition/&gt; 
 &lt;RowDefinition/&gt; 
 &lt;RowDefinition/&gt; 
 &lt;TextBlock Margin="10, 10, 5, 5" Grid.Column="0" Grid.Row="0" FontSize="24"&gt;RepeatButtons&lt;/TextBlock&gt;
 &lt;TextBlock Margin="10, 10, 5, 5" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" FontSize="12pt"&gt;The following repeat button examples demonstrate:&lt;/TextBlock&gt;  
&lt;DockPanel Margin="10, 10, 5, 5" Grid.Column="0" Grid.Row="2"&gt;
   &lt;RepeatButton Width="100" HorizontalAlignment="Left" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Increase"&gt;Increase&lt;/RepeatButton&gt;
   &lt;RepeatButton Width="100" HorizontalAlignment="Left" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Decrease"&gt;Decrease&lt;/RepeatButton&gt;
   &lt;Button Name="btn" Width="100" HorizontalAlignment="Left" DockPanel.Dock="Top" FontSize="16pt"&gt;0&lt;/Button&gt;
&lt;/DockPanel&gt;
&lt;TextBlock Margin="10, 10, 5, 5" Grid.Column="1" Grid.Row="2" FontSize="10pt" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Two repeat buttons that increase and decrease a numerical value. They have their delay properties set to 500 milliseconds and their interval properties set to 100.&lt;/TextBlock&gt;  
&lt;/Grid&gt;     

&lt;/StackPanel&gt;

                    
                    
                    
                  </TextBox>
                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
Imports System
Imports System.Windows
Imports System.Windows.Controls
Imports System.Windows.Documents
Imports System.Windows.Navigation
Imports System.Windows.Shapes
Imports System.Windows.Data

Namespace RepeatButton_vb

    '@ &lt;summary&gt;
    '@ Interaction logic for Pane1_xaml.xaml
    '@ &lt;/summary&gt;
    Partial Class Pane1
        Dim Num As Integer
        Sub Increase(ByVal sender As Object, ByVal e As RoutedEventArgs)

            Num = CInt(btn.Content)

            btn.Content = ((Num + 1).ToString())
        End Sub

        Sub Decrease(ByVal sender As Object, ByVal e As RoutedEventArgs)

            Num = CInt(btn.Content)

            btn.Content = ((Num - 1).ToString())
        End Sub
        
    End Class

End Namespace
                    
                    
                    
                  </TextBox>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#">
        </TabItem>
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET">
        </TabItem>
        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++">
        </TabItem>
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">
            <DockPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="0" FontSize="24">RepeatButtons</TextBlock>
                    <TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" FontSize="12pt">The following repeat button examples demonstrate:</TextBlock>
                    <DockPanel Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="2">
                        <RepeatButton Width="100" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Increase">Increase</RepeatButton>
                        <RepeatButton Width="100" DockPanel.Dock="Top" Delay="500" Interval="100" Click="Decrease">Decrease</RepeatButton>
                        <Button Name="btn" Width="100" DockPanel.Dock="Top" FontSize="16pt">0</Button>
                    </DockPanel>
                    <TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="2" FontSize="10pt" VerticalAlignment="Center" TextWrapping="Wrap">Two repeat buttons that increase and decrease a numerical value. They have their delay properties set to 500 milliseconds and their interval properties set to 100.</TextBlock>
                    <DockPanel Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="3">
                        <RepeatButton Delay="500" Interval="100" Width="25" Height="30" Click="Decrease2" DockPanel.Dock="Top">
                            <Image Stretch="None">
                                <Image.Source>
                                    <BitmapImage UriSource="pack://application:,,,/samples;component/Images\uparrow.png" />
                                </Image.Source>
                            </Image>
                        </RepeatButton>
                        <Button Name="btn2" DockPanel.Dock="Top" Width="25" Height="30" FontSize="14pt">0</Button>
                        <RepeatButton Delay="500" Interval="100" Width="25" Height="30" Click="Increase2" DockPanel.Dock="Top">
                            <Image Stretch="None">
                                <Image.Source>
                                    <BitmapImage UriSource="pack://application:,,,/samples;component/Images\downarrow.png" />
                                </Image.Source>
                            </Image>
                        </RepeatButton>
                    </DockPanel>
                    <TextBlock Margin="10, 10, 5, 5" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="3" FontSize="10pt" VerticalAlignment="Center" TextWrapping="Wrap">Two repeat buttons and a button that behave like a spinner control. The range is 0 - 50. The content of the repeat buttons are the arrow images.</TextBlock>
                </Grid>
            </DockPanel>
        </TabItem>
    </TabControl>
</Page>