<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_4839cd87_e206_4571_803f_0200098ad37b"
  Tag     ="Document Serialization and Storage"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Document Serialization and Storage</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Microsoft .NET Framework version 3.0 provides a powerful environment for creating and displaying high quality documents. Enhanced features that support both fixed-documents and flow-documents, advanced viewing controls, combined with powerful 2D and 3D graphic capabilities take .NET Framework 3.0 applications to a new level of quality and user experience. Being able to flexibly manage an in-memory representation of a document is a key feature of .NET Framework 3.0, and being able to efficiently save and load documents from a data store is a need of almost every application. The process of converting a document from an internal in-memory representation to an external data store is termed <Run>serialization</Run>
. The reverse process of reading a data store and recreating the original in-memory instance is termed deserialization.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="AboutSerialization">About Document Serialization</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="PluginSerializers">Plug-in Serializers</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">About Document Serialization
    </Paragraph>

    <Paragraph>Ideally the process of serializing and deserializing a document from and then back into memory is transparent to the application. The application calls a serializer “write” method to save the document, while a deserializer “read” method accesses the data store and recreates the original instance in memory. The specific format that the data is stored in is generally not a concern of the application as long as the serialize and deserialize process recreates the document back to its original form. 
    </Paragraph>

    <Paragraph>Applications often provide multiple serialization options which allow the user to save documents to different medium or to a different format. For example, an application might offer “Save As” options to store a document to a disk file, database, or web service. Similarly, different serializers could store the document in different formats such as in HTML, RTF, XML, XPS, or alternately to a third-party format. To the application, serialization defines an interface that isolates the details of the storage medium within the implementation of each specific serializer. In addition to the benefits of encapsulating storage details, the .NET Framework 3.0 System.Windows.Documents.Serialization APIs provide several other important features.
    </Paragraph>

    <Paragraph FontSize="18">Features of .NET Framework 3.0 Document Serializers
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Direct access to the high-level document objects (<Run>logical tree</Run>
 and visuals) enable efficient storage of paginated content, 2D/3D elements, images, media, hyperlinks, annotations, and other support content.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>Synchronous</Run>
 and <Run>asynchronous</Run>
 operation.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Support for plug-in serializers with enhanced capabilities:
        </Paragraph>

        <List MarkerStyle="Disc">
          <ListItem>
            <Paragraph>System-wide access for use by all .NET Framework 3.0 applications.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Simple application plug-in discoverability.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>Simple deployment, installation, and update for custom third-party plug-ins.
            </Paragraph>

          </ListItem>

          <ListItem>
            <Paragraph>User interface support for custom run-time settings and options.
            </Paragraph>

          </ListItem>

        </List>

      </ListItem>

    </List>

    <Paragraph FontSize="18">XPS Print Path
    </Paragraph>

    <Paragraph>The Microsoft .NET Framework version 3.0 XPS print path also provides an extensible mechanism for writing documents through print output. XPS serves as both a document file format and is the native print spool format for Windows Vista. XPS documents can be sent directly to XPS-compatible printers without the need for conversion to an intermediate format. See the <Hyperlink NavigateUri="0de8ac41-9aa6-413d-a121-7aa6f41539b1.xaml">Printing Overview</Hyperlink>
 for additional information on print path output options and capabilities.
    </Paragraph>

    <Paragraph FontSize="22">Plug-in Serializers
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">System.Windows.Documents.Serialization</Run>
 APIs provide support for both plug-in serializers and linked serializers that are installed separately from the application, bind at run time, and are accessed by using the SerializerProvider discovery mechanism. Plug-in serializers offer enhanced benefits for ease of deployment and system-wide use. Linked serializers can also be implemented for <Run>partial trust</Run>
 environments such as XAML browser applications (XBAPs) where plug-in serializers are not accessible. Linked serializers, which are based on a derived implementation of the SerializerWriter class, are compiled and linked directly into the application. Both plug-in serializers and linked serializers operate through identical public methods and events which make it easy to use either or both types of serializers in the same application.
    </Paragraph>

    <Paragraph>Plug-in serializers aid application developers by providing extensibility to new storage designs and file formats without having to code directly for every potential format at build time. Plug-in serializers also benefit third-party developers by providing a standardized means to deploy, install, and update system accessible plug-ins for custom or proprietary file formats.
    </Paragraph>

    <Paragraph FontSize="18">Using a Plug-in Serializer
    </Paragraph>

    <Paragraph>Plug-in serializers are simple to use. The <Run FontWeight="Bold">SerializerProvider</Run>
 class enumerates a SerializerDescriptor object for each plug-in installed on the system. The IsLoadable property filters the installed plug-ins based on the current configuration and verifies that the serializer can be loaded and used by the application. The <Run FontWeight="Bold">SerializerDescriptor</Run>
 also provides other properties, such as DisplayName and DefaultFileExtension, which the application can use to prompt the user in selecting a serializer for an available output format. A default plug-in serializer for XPS is provided with .NET Framework 3.0 and is always enumerated. After the user selects an output format, the CreateSerializerWriter method is used to create a <Run FontWeight="Bold">SerializerWriter</Run>
 for the specific format. The <Run FontWeight="Bold">SerializerWriter</Run>
.Write method can then be called to output the document stream to the data store.
    </Paragraph>

    <Paragraph>The following example illustrates an application that uses the <Run FontWeight="Bold">SerializerProvider</Run>
 method in a “PlugInFileFilter” property. PlugInFileFilter enumerates the installed plug-ins and builds a filter string with the available file options for a SaveFileDialog. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// ------------------------ PlugInFileFilter -------------------------- /// 
&lt;summary> /// Gets a filter string for installed plug-in serializers.
&lt;/summary> /// 
&lt;remark> /// PlugInFileFilter is used to set the SaveFileDialog or /// OpenFileDialog "Filter" property when saving or opening files /// using plug-in serializers.
&lt;/remark> private string PlugInFileFilter { get { // Create a SerializerProvider for accessing plug-in serializers. SerializerProvider serializerProvider = new SerializerProvider(); 
string filter = ""; 
// For each loadable serializer, add its display // name and extension to the filter string. foreach (SerializerDescriptor serializerDescriptor in serializerProvider.InstalledSerializers) { if (serializerDescriptor.IsLoadable) { // After the first, separate entries with a "|". if (filter.Length > 0) filter += "|"; 
// Add an entry with the plug-in name and extension. filter += serializerDescriptor.DisplayName + " (*" + serializerDescriptor.DefaultFileExtension + ")|*" + serializerDescriptor.DefaultFileExtension; 
} } // Return the filter string of installed plug-in serializers. return filter; 
} } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>After an output file name has been selected by the user, the following example illustrates use of the <Run FontWeight="Bold">CreateSerializerWriter</Run>
 method to store a given document in a specified format. For the complete example, see Document Serialization Sample.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Create a SerializerProvider for accessing plug-in serializers. SerializerProvider serializerProvider = new SerializerProvider(); 
// Locate the serializer that matches the fileName extension. SerializerDescriptor selectedPlugIn = null; 
foreach ( SerializerDescriptor serializerDescriptor in serializerProvider.InstalledSerializers ) { if ( serializerDescriptor.IsLoadable &amp;&amp; 
fileName.EndsWith(serializerDescriptor.DefaultFileExtension) ) { // The plug-in serializer and fileName extensions match. selectedPlugIn = serializerDescriptor; 
break; 
// foreach } } // If a match for a plug-in serializer was found, // use it to output and store the document. if (selectedPlugIn != null) { Stream package = File.Create(fileName); 
SerializerWriter serializerWriter = serializerProvider.CreateSerializerWriter(selectedPlugIn, package); 
IDocumentPaginatorSource idoc = flowDocument as IDocumentPaginatorSource; 
serializerWriter.Write(idoc.DocumentPaginator, null); 
package.Close(); 
return true; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Installing Plug-in Serializers
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">SerializerProvider</Run>
 class supplies the upper-level application interface for plug-in serializer discovery and access. <Run FontWeight="Bold">SerializerProvider</Run>
 locates and provides the application a list of the serializers that are installed and accessible on the system. The specifics of the installed serializers are defined through registry settings. Plug-in serializers can be added to the registry by using the RegisterSerializer method; 
or if .NET Framework 3.0 is not yet installed, the plug-in installation script can directly set the registry values itself. The UnregisterSerializer method can be used to remove a previously installed plug-in, or the registry settings can be reset similarly by an uninstall script.
    </Paragraph>

    <Paragraph FontSize="18">Creating a Plug-in Serializer
    </Paragraph>

    <Paragraph>Both plug-in serializers and linked serializers use the same exposed public methods and events, and similarly can be designed to operate either synchronously or asynchronously. There are three basic steps normally followed to create a plug-in serializer:
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Implement and debug the serializer first as a linked serializer. Initially creating the serializer compiled and linked directly in a test application provides full access to breakpoints and other debug services helpful for testing.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>After the serializer is fully tested, an ISerializerFactory interface is added to create a plug-in. The <Run FontWeight="Bold">ISerializerFactory</Run>
 interface permits full access to all .NET Framework 3.0 objects which includes the logical tree, UIElement objects, IDocumentPaginatorSource, and Visual elements. Additionally <Run FontWeight="Bold">ISerializerFactory</Run>
 provides the same synchronous and asynchronous methods and events used by linked serializers. Since large documents can take time to output, asynchronous operations are recommended to maintain responsive user interaction and offer a “Cancel” option if some problem occurs with the data store. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>After the plug-in serializer is created, an installation script is implemented for distributing and installing (and uninstalling) the plug-in (see above, “<Hyperlink TargetName="InstallingPluginSerializers">Installing Plug-in Serializers</Hyperlink>
”).
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>System.Windows.Documents.Serialization
      <LineBreak/>XpsDocumentWriter
      <LineBreak/>XpsDocument
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="6e8db7bc-050a-4070-aa72-bb8c46e87ff8.xaml">Documents in Windows Presentation Foundation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="0de8ac41-9aa6-413d-a121-7aa6f41539b1.xaml">Printing Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Printing an XPS Document Sample
      <LineBreak/>Document Serialization Sample
      <LineBreak/><Hyperlink NavigateUri="http://www.microsoft.com/xps">XPS</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Document Serialization and Storage to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

