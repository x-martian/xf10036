<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_619f9fcd_a71b_4db5_b3e4_da99ec3b5c41"
  Tag     ="How-to Topics"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Migration and Interoperability How-to Topics</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following topics show how to use the Windows Forms, Win32, and WPF technologies together in hybrid applications.
    </Paragraph>

    <Paragraph FontSize="22">In This Section
    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="95de9b9c-d804-405c-b2d1-49a88c1e0fe1.xaml">How to: Enable Visual Styles in a Hybrid Application</Hyperlink>
</Span>
<Span><Run>Shows how to enable Microsoft Windows XP visual styles on a Windows Forms control hosted in a WPF-based application.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="ede825ea-8013-424e-a5fa-bea24e94a982.xaml">How to: Host a Windows Presentation Foundation Control in Windows Forms by Using ElementHost</Hyperlink>
</Span>
<Span><Span>Shows how to host a WPF control in Windows Forms, and how to attach handlers to two of the control's custom <Run>OnButtonClick</Run>
 events.</Span>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="a1db8049-15c7-45d6-ae3d-36a6735cb848.xaml">Walkthrough: Arranging Windows Forms Controls in Windows Presentation Foundation</Hyperlink>
</Span>
<Span><Run>Shows how to use WPF layout features to arrange Windows Forms controls in a hybrid application.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="18997e71-745a-4425-9c69-2cbce1d8669e.xaml">Walkthrough: Binding to Data in Hybrid Applications</Hyperlink>
</Span>
<Span><Run>Shows how to use data binding in hybrid applications that include both Windows Forms and WPF controls.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="1931d292-0dd1-434f-963c-dcda7638d75a.xaml">Walkthrough: Hosting an ActiveX Control in Windows Presentation Foundation</Hyperlink>
</Span>
<Span><Run>Shows how to use the Microsoft Windows Media Player as a control on a WPF page.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="71bb97c7-d0c2-4d0f-9605-7defbe520847.xaml">Walkthrough: Hosting an ActiveX Control in Windows Presentation Foundation by Using XAML</Hyperlink>
</Span>
<Span><Run>Shows how to use Extensible Application Markup Language (XAML) to host the Microsoft Windows Media Player as a control on a WPF page.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="a676b1eb-fc55-4355-93ab-df840c41cea0.xaml">Walkthrough: Hosting a Simple Win32 Control in a Windows Presentation Foundation Application</Hyperlink>
</Span>
<Span><Run>Shows how to host a Win32 ListBox control on a WPF page.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="9cb88415-39b0-4c46-80c4-ff325b674286.xaml">Walkthrough: Hosting a Windows Forms Control in Windows Presentation Foundation</Hyperlink>
</Span>
<Span><Run>Shows how to host a Windows Forms System.Windows.Forms.MaskedTextBox control on a WPF page.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="1aef42cb-4cfb-44b4-9a7a-c02632d3d9c7.xaml">Walkthrough: Hosting a Windows Forms Control in Windows Presentation Foundation by Using XAML</Hyperlink>
</Span>
<Span><Span>Shows how to use Extensible Application Markup Language (XAML) to host a Windows Forms <Run FontWeight="Bold">System.Windows.Forms.MaskedTextBox</Run>
 control on a WPF page.</Span>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="96fcd78d-1c77-4206-8928-3a0579476ef4.xaml">Walkthrough: Hosting a Windows Forms Composite Control in Windows Presentation Foundation</Hyperlink>
</Span>
<Span><Run>Shows how to host a Windows Forms composite control (consisting of System.Windows.Forms.TextBox controls and their corresponding System.Windows.Forms.Label controls) on a WPF page.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="0ac41286-4c1b-4b17-9196-d985cb844ce1.xaml">Walkthrough: Hosting a Windows Presentation Foundation Control in Windows Forms</Hyperlink>
</Span>
<Span><Run>Shows how to host a WPF page (consisting of a simple data-entry application packaged in a DLL) in a Windows Forms-based application.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="38ce284a-4303-46dd-b699-c9365b22a7dc.xaml">Walkthrough: Hosting Windows Presentation Foundation Content in a Win32 Application</Hyperlink>
</Span>
<Span><Run>Shows how to host a WPF page in a Win32 window.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="486369a9-606a-4a3b-b086-a06f2119c7b0.xaml">Walkthrough: Hosting a Windows Presentation Foundation Composite Control in Windows Forms</Hyperlink>
</Span>
<Span><Run>Shows how to host a WPF UserControl class that displays a three-dimensional (3-D) cone in Windows Forms.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="fbc0c54e-930a-4c13-8e9c-27b83665010a.xaml">Walkthrough: Localizing a Hybrid Application</Hyperlink>
</Span>
<Span><Run>Shows how to localize WPF elements in a Windows Forms-based hybrid application.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="1c6f3723-e77b-4dbd-9d95-942368c3fe3e.xaml">Walkthrough: Manually Adding a Windows Presentation Foundation Element to a Windows Forms Project</Hyperlink>
</Span>
<Span><Run>Shows how to use Visual Studio to add a WPF element to your Windows Forms project manually.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="08445997-c686-4139-b9df-df1042aaa05d.xaml">Walkthrough: Manually Creating a Windows Presentation Foundation Project Using Visual Studio</Hyperlink>
</Span>
<Span><Run>Shows how to use Visual Studio to create a WPF project manually.</Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="bccd6e0d-2272-4924-9107-ff8ed58b88aa.xaml">Walkthrough: Mapping Properties Using the ElementHost Control</Hyperlink>
</Span>
<Span><Run>Shows how to use the PropertyMap property to map Windows Forms properties to corresponding properties on a hosted WPF element. </Run>
</Span>

    </Paragraph>

    <Paragraph><Span><Hyperlink NavigateUri="74809167-bf8e-48b7-a2e7-b4ea08bc7d8c.xaml">Walkthrough: Mapping Properties Using the WindowsFormsHost Element</Hyperlink>
</Span>
<Span><Run>Shows how to use the PropertyMap property to map WPF properties to corresponding properties on a hosted Windows Forms control.</Run>
</Span>

    </Paragraph>

    <Paragraph FontSize="22">Reference
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Term 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Definition 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>WindowsFormsHost 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>An element that you can use to host a Windows Forms control on a WPF page. 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>ElementHost 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>A Windows Forms control that you can use to host a Windows Presentation Foundation (WPF) control. 
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Related Sections
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Term 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Definition 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Hyperlink NavigateUri="0ffbde0d-701d-45a3-a6fa-dd71f4d9772e.xaml">WPF and Win32 Interoperation Overview</Hyperlink>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Discusses interoperation between WPF and Win32-based components or applications.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Migration and Interoperability Samples 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Samples that show how to use the Windows Forms, Win32, and WPF technologies together in hybrid applications.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Migration and Interoperability How-to Topics to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

