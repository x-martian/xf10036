<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_3cc8644a_34f3_4082_9ddc_77623e4df2d8"
  Tag     ="Tutorial: Create a WPF Application Hosting Win32 Content"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Tutorial: Create a WPF Application Hosting Win32 Content</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Prerequisites</Run>

    </Paragraph>

    <Paragraph>See <Hyperlink NavigateUri="0ffbde0d-701d-45a3-a6fa-dd71f4d9772e.xaml">WPF and Win32 Interoperation Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22"><Run>A Walkthrough of Win32 Inside Windows Presentation Framework (HwndHost)</Run>

    </Paragraph>

    <Paragraph>To reuse Win32 content inside WPF applications, use HwndHost, which is a control that makes HWNDs look like WPF content. Like HwndSource, <Run FontWeight="Bold">HwndHost</Run>
 is straightforward to use: derive from <Run FontWeight="Bold">HwndHost</Run>
 and implement <Run>BuildWindowCore</Run>
 and <Run>DestroyWindowCore</Run>
 methods, then instantiate your <Run FontWeight="Bold">HwndHost</Run>
 derived class and place it inside your WPF application.
    </Paragraph>

    <Paragraph>If your Win32 logic is already packaged as a control, then your <Run>BuildWindowCore</Run>
 implementation is little more than a call to <Run>CreateWindow</Run>
. For example, to create a Win32 LISTBOX control in C++:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>virtual HandleRef BuildWindowCore(HandleRef hwndParent) override { HWND handle = CreateWindowEx(0, L"LISTBOX", L"this is a Win32 listbox", WS_CHILD | WS_VISIBLE | LBS_NOTIFY | WS_VSCROLL | WS_BORDER, 0, 0, // x, y 30, 70, // height, width (HWND) hwndParent.Handle.ToPointer(), // parent hwnd 0, // hmenu 0, // hinstance 0); 
// lparam return HandleRef(this, IntPtr(handle)); 
} virtual void DestroyWindowCore(HandleRef hwnd) override { // HwndHost will dispose the hwnd for us }</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>But suppose the Win32 code is not quite so self-contained? If so, you can create a Win32 dialog box and embed its contents into a larger WPF application. The sample shows this in Microsoft Visual Studio and C++, although it is also possible to do this in a different language or at the command line.
    </Paragraph>

    <Paragraph>Start with a simple dialog, which is compiled into a C++ DLL project.
    </Paragraph>

    <Paragraph>Next, introduce the dialog into the larger WPF application:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Compile the DLL as managed (<Run FontWeight="Bold">/clr</Run>
)
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Turn the dialog into a control
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Define the derived class of <Run FontWeight="Bold">HwndHost</Run>
 with <Run>BuildWindowCore</Run>
 and <Run>DestroyWindowCore</Run>
 methods
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Override <Run>TranslateAccelerator</Run>
 method to handle dialog keys
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Override <Run>TabInto</Run>
 method to support tabbing
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Override <Run>OnMnemonic</Run>
 method to support mnemonics
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Instantiate the <Run FontWeight="Bold">HwndHost</Run>
 subclass and put it under the right WPF element
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="18">Turn the Dialog Into a Control
    </Paragraph>

    <Paragraph>You can turn a dialog box into a child HWND using the WS_CHILD and DS_CONTROL styles. Go into the resource file (.rc) where the dialog is defined, and find the beginning of the definition of the dialog:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>IDD_DIALOG1 DIALOGEX 0, 0, 303, 121 STYLE DS_SETFONT | DS_MODALFRAME | DS_FIXEDSYS | WS_POPUP | WS_CAPTION | WS_SYSMENU</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Change the second line to:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>STYLE DS_SETFONT | WS_CHILD | WS_BORDER | DS_CONTROL</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This action does not fully package it into a self-contained control; 
you still need to call <Run>IsDialogMessage()</Run>
 so Win32 can process certain messages, but the control change does provide a straightforward way of putting those controls inside another HWND.
    </Paragraph>

    <Paragraph FontSize="22"><Run>Subclass HwndHost</Run>

    </Paragraph>

    <Paragraph>Import the following namespaces:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>namespace ManagedCpp { using namespace System; 
using namespace System::Windows; 
using namespace System::Windows::Interop; 
using namespace System::Windows::Input; 
using namespace System::Windows::Media; 
using namespace System::Runtime::InteropServices;</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Then create a derived class of <Run FontWeight="Bold">HwndHost</Run>
 and override the <Run>BuildWindowCore</Run>
 and <Run>DestroyWindowCore</Run>
 methods:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public ref class MyHwndHost : public HwndHost, IKeyboardInputSink { private: HWND dialog; 
protected: virtual HandleRef BuildWindowCore(HandleRef hwndParent) override { InitializeGlobals(); 
dialog = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), (HWND) hwndParent.Handle.ToPointer(), (DLGPROC) About); 
return HandleRef(this, IntPtr(dialog)); 
} virtual void DestroyWindowCore(HandleRef hwnd) override { // hwnd will be disposed for us }</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Here you use the <Run>CreateDialog</Run>
 to create the dialog box that is really a control. Since this is one of the first methods called inside the DLL, you should also do some standard Win32 initialization by calling a function you will define later, called <Run>InitializeGlobals()</Run>
:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>bool initialized = false; 
void InitializeGlobals() { if (initialized) return; 
initialized = true; 
// TODO: Place code here. MSG msg; 
HACCEL hAccelTable; 
// Initialize global strings LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING); 
LoadString(hInstance, IDC_TYPICALWIN32DIALOG, szWindowClass, MAX_LOADSTRING); 
MyRegisterClass(hInstance); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Override TranslateAccelerator Method to Handle Dialog Keys
    </Paragraph>

    <Paragraph>If you ran this sample now, you would get a dialog control that displays, but it would ignore all of the keyboard processing that makes a dialog box a functional dialog box. You should now override the <Run>TranslateAccelerator</Run>
 implementation (which comes from <Run>IKeyboardInputSink</Run>
, an interface that <Run FontWeight="Bold">HwndHost</Run>
 implements). This method gets called when the application receives WM_KEYDOWN and WM_SYSKEYDOWN.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>#undef TranslateAccelerator virtual bool TranslateAccelerator(System::Windows::Interop::MSG% msg, ModifierKeys modifiers) override { ::MSG m = ConvertMessage(msg); 
// Win32's IsDialogMessage() will handle most of our tabbing, but doesn't know // what to do when it reaches the last tab stop if (m.message == WM_KEYDOWN &amp;&amp; 
m.wParam == VK_TAB) { HWND firstTabStop = GetDlgItem(dialog, IDC_EDIT1); 
HWND lastTabStop = GetDlgItem(dialog, IDCANCEL); 
TraversalRequest^ request = nullptr; 
if (GetKeyState(VK_SHIFT) &amp;&amp; 
GetFocus() == firstTabStop) { // this code should work, but there’s a bug with interop shift-tab in current builds request = gcnew TraversalRequest(FocusNavigationDirection::Last); 
} else if (!GetKeyState(VK_SHIFT) &amp;&amp; 
GetFocus() == lastTabStop) { request = gcnew TraversalRequest(FocusNavigationDirection::Next); 
} if (request != nullptr) return ((IKeyboardInputSink^) this)->KeyboardInputSite->OnNoMoreTabStops(request); 
} // Only call IsDialogMessage for keys it will do something with. if (msg.message == WM_SYSKEYDOWN || msg.message == WM_KEYDOWN) { switch (m.wParam) { case VK_TAB: case VK_LEFT: case VK_UP: case VK_RIGHT: case VK_DOWN: case VK_EXECUTE: case VK_RETURN: case VK_ESCAPE: case VK_CANCEL: IsDialogMessage(dialog, &amp;m); 
// IsDialogMessage should be called ProcessDialogMessage -- // it processes messages without ever really telling you // if it handled a specific message or not return true; 
} } return false; 
// not a key we handled }</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This is a lot of code in one piece, so it could use some more detailed explanations. First, the code using C++ and C++ macros; 
you need to be aware that there is already a macro named <Run>TranslateAccelerator</Run>
, which is defined in winuser.h:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>#define TranslateAccelerator TranslateAcceleratorW</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>So make sure to define a <Run>TranslateAccelerator</Run>
 method and not a <Run>TranslateAcceleratorW</Run>
 method.
    </Paragraph>

    <Paragraph>Similarly, there is both the unmanaged winuser.h MSG and the managed <Run>Microsoft::Win32::MSG</Run>
 struct. You can disambiguate between the two using the C++ <Run FontWeight="Bold">::</Run>
 operator.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>virtual bool TranslateAccelerator(System::Windows::Interop::MSG% msg, ModifierKeys modifiers) override { ::MSG m = ConvertMessage(msg);</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Both MSGs have the same data, but sometimes it is easier to work with the unmanaged definition, so in this sample you can define the obvious conversion routine:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>::MSG ConvertMessage(System::Windows::Interop::MSG% msg) { ::MSG m; 
m.hwnd = (HWND) msg.hwnd.ToPointer(); 
m.lParam = (LPARAM) msg.lParam.ToPointer(); 
m.message = msg.message; 
m.wParam = (WPARAM) msg.wParam.ToPointer(); 
m.time = msg.time; 
POINT pt; 
pt.x = msg.pt_x; 
pt.y = msg.pt_y; 
m.pt = pt; 
return m; 
}</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Back to <Run>TranslateAccelerator</Run>
. The basic principle is to call the Win32 function <Run>IsDialogMessage</Run>
 to do as much work as possible, but <Run>IsDialogMessage</Run>
 does not have access to anything outside the dialog. As a user tab around the dialog, when tabbing runs past the last control in our dialog, you need to set focus to the WPF portion by calling <Run>IKeyboardInputSite::OnNoMoreStops</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Win32's IsDialogMessage() will handle most of the tabbing, but doesn't know // what to do when it reaches the last tab stop if (m.message == WM_KEYDOWN &amp;&amp; 
m.wParam == VK_TAB) { HWND firstTabStop = GetDlgItem(dialog, IDC_EDIT1); 
HWND lastTabStop = GetDlgItem(dialog, IDCANCEL); 
TraversalRequest^ request = nullptr; 
if (GetKeyState(VK_SHIFT) &amp;&amp; 
GetFocus() == firstTabStop) { request = gcnew TraversalRequest(FocusNavigationDirection::Last); 
} else if (!GetKeyState(VK_SHIFT) &amp;&amp; 
GetFocus() == lastTabStop) { { request = gcnew TraversalRequest(FocusNavigationDirection::Next); 
} if (request != nullptr) return ((IKeyboardInputSink^) this)->KeyboardInputSite->OnNoMoreTabStops(request); 
}</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Finally, call <Run>IsDialogMessage</Run>
. But one of the responsibilities of a <Run>TranslateAccelerator</Run>
 method is telling WPF whether you handled the keystroke or not. If you did not handle it, the input event can tunnel and bubble through the rest of the application. Here, you will expose a quirk of keyboard messange handling and the nature of the input architecture in Win32. Unfortunately, <Run>IsDialogMessage</Run>
 does not return in any way whether it handles a particular keystroke. Even worse, it will call <Run>DispatchMessage()</Run>
 on keystrokes it should not handle! So you will have to reverse-engineer <Run>IsDialogMessage</Run>
, and only call it for the keys you know it will handle:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Only call IsDialogMessage for keys it will do something with. if (msg.message == WM_SYSKEYDOWN || msg.message == WM_KEYDOWN) { switch (m.wParam) { case VK_TAB: case VK_LEFT: case VK_UP: case VK_RIGHT: case VK_DOWN: case VK_EXECUTE: case VK_RETURN: case VK_ESCAPE: case VK_CANCEL: IsDialogMessage(dialog, &amp;m); 
// IsDialogMessage should be called ProcessDialogMessage -- // it processes messages without ever really telling you // if it handled a specific message or not return true; 
}</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Override TabInto Method to Support Tabbing
    </Paragraph>

    <Paragraph>Now that you have implemented <Run>TranslateAccelerator</Run>
, a user can tab around inside the dialog box and tab out of it into the greater WPF application. But a user cannot tab back into the dialog box. To solve that, you override <Run>TabInto</Run>
:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public: virtual bool TabInto(TraversalRequest^ request) override { if (request->FocusNavigationDirection == FocusNavigationDirection::Last) { HWND lastTabStop = GetDlgItem(dialog, IDCANCEL); 
SetFocus(lastTabStop); 
} else { HWND firstTabStop = GetDlgItem(dialog, IDC_EDIT1); 
SetFocus(firstTabStop); 
} return true; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run>TraversalRequest</Run>
 parameter tells you whether the tab action is a tab or shift tab.
    </Paragraph>

    <Paragraph FontSize="18">Override OnMnemonic Method to Support Mnemonics
    </Paragraph>

    <Paragraph>Keyboard handling is almost complete, but there is one thing missing – mnemonics do not work. If a user presses alt-F, focus doe not jump to the “First name:” edit box. So, you override the <Run>OnMnemonic</Run>
 method:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>virtual bool OnMnemonic(System::Windows::Interop::MSG% msg, ModifierKeys modifiers) override { ::MSG m = ConvertMessage(msg); 
// If it's one of our mnemonics, set focus to the appropriate hwnd if (msg.message == WM_SYSCHAR &amp;&amp; 
GetKeyState(VK_MENU /*alt*/)) { int dialogitem = 9999; 
switch (m.wParam) { case 's': dialogitem = IDOK; 
break; 
case 'c': dialogitem = IDCANCEL; 
break; 
case 'f': dialogitem = IDC_EDIT1; 
break; 
case 'l': dialogitem = IDC_EDIT2; 
break; 
case 'p': dialogitem = IDC_EDIT3; 
break; 
case 'a': dialogitem = IDC_EDIT4; 
break; 
case 'i': dialogitem = IDC_EDIT5; 
break; 
case 't': dialogitem = IDC_EDIT6; 
break; 
case 'z': dialogitem = IDC_EDIT7; 
break; 
} if (dialogitem != 9999) { HWND hwnd = GetDlgItem(dialog, dialogitem); 
SetFocus(hwnd); 
return true; 
} } return false; 
// key unhandled };</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Why not call <Run>IsDialogMessage</Run>
 here? You have the same issue as before--you need to be able to inform WPF code whether your code handled the keystroke or not, and <Run>IsDialogMessage</Run>
 cannot do that. There is also a second issue, because <Run>IsDialogMessage</Run>
 refuses to process the mnemonic if the focused HWND is not inside the dialog box.
    </Paragraph>

    <Paragraph FontSize="18">Instantiate the HwndHost Derived Class
    </Paragraph>

    <Paragraph>Finally, now that all the key and tab support is in place, you can put your <Run FontWeight="Bold">HwndHost</Run>
 into thelarger WPF application. If the main application is written in XAML, the easiest way to put it in the right place is to leave an empty Border element where you want to put the <Run FontWeight="Bold">HwndHost</Run>
. Here you create a <Run FontWeight="Bold">Border</Run>
 named <Run>insertHwndHostHere</Run>
:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Window x:Class="WPFApplication1.Window1" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Windows Presentation Framework Application" Loaded="Window1_Loaded" > 
&lt;StackPanel> 
&lt;Button Content="WPF button"/> 
&lt;Border Name="insertHwndHostHere" Height="200" Width="500"/> 
&lt;Button Content="WPF button"/> 
&lt;/StackPanel> 
&lt;/Window></Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Then all that remains is to find a good place in code sequence to instantiate the <Run FontWeight="Bold">HwndHost</Run>
 and connect it to the <Run FontWeight="Bold">Border</Run>
. In this example, you will put it inside the constructor for the Window derived class:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public partial class Window1 : Window { public Window1() { } void Window1_Loaded(object sender, RoutedEventArgs e) { HwndHost host = new ManagedCpp.MyHwndHost(); 
insertHwndHostHere.Child = host; 
} }</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Which gives you:
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="0ffbde0d-701d-45a3-a6fa-dd71f4d9772e.xaml">WPF and Win32 Interoperation Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Tutorial: Create a WPF Application Hosting Win32 Content to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

