<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_39abfac5_2313_44ce_93ff_e2f42243685f"
  Tag     ="Get and Set Application-Scope Properties"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Get and Set Application-Scope Properties</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to both get and set application-scope properties using Properties.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>Application exposes an application-scope data store for shared properties: <Run FontWeight="Bold">Properties</Run>
. Data stored in <Run FontWeight="Bold">Properties</Run>
 is available from any code that executes within the scope of an application's <Run FontWeight="Bold">Application</Run>
 object (ie code that can access Current).
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Properties</Run>
 is a dictionary of key/value pairs, and can be used like so:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Set an application-scope property Application.Current.Properties["MyApplicationScopeProperty"] = "myApplicationScopePropertyValue"; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Get an application-scope property // NOTE: Need to convert since Application.Properties is a dictionary of System.Object string myApplicationScopeProperty = (string)Application.Current.Properties["MyApplicationScopeProperty"]; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>There are two considerations to make when using <Run FontWeight="Bold">Properties</Run>
. First, the dictionary <Run FontStyle="italic">key</Run>
 is an object, so you need to use exactly the same object instance when both setting and getting a property value (note that the key is case-sensitive when using a string key). Second, the dictionary <Run FontStyle="italic">value</Run>
 is an object, so you will need to convert the value to the desired type when getting a property value.
    </Paragraph>

    <Paragraph>Because the dictionary value is an object, you can just as easily use custom types as simple types, like so:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Set an application-scope property with a custom type CustomType customType = new CustomType(); 
Application.Current.Properties["CustomType"] = customType; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Get an application-scope property // NOTE: Need to convert since Application.Properties is a dictionary of System.Object CustomType customType = (CustomType)Application.Current.Properties["CustomType"]; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>IDictionary
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Get and Set Application-Scope Properties to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

