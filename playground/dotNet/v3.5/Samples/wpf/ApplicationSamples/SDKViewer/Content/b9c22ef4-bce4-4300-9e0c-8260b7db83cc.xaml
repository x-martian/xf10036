<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_b9c22ef4_bce4_4300_9e0c_8260b7db83cc"
  Tag     ="Apply Stretch Properties to the Contents of a Viewbox"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Apply Stretch Properties to the Contents of a Viewbox</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>This example shows how to change the value of the StretchDirection and Stretch properties of a Viewbox.
    </Paragraph>

    <Paragraph>The first example uses Extensible Application Markup Language (XAML) to define a Viewbox element. It assigns a MaxWidth and MaxHeight of 400. The example nests an Image element within the Viewbox. Buttons that correspond to the property values for the Stretch and StretchDirection enumerations manipulate the stretching behavior of the nested Image.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;StackPanel Margin="0,0,0,10" HorizontalAlignment="Center" Orientation="Horizontal" DockPanel.Dock="Top"> 
&lt;Button Name="btn1" Click="stretchNone">Stretch="None"
&lt;/Button> 
&lt;Button Name="btn2" Click="stretchFill">Stretch="Fill"
&lt;/Button> 
&lt;Button Name="btn3" Click="stretchUni">Stretch="Uniform"
&lt;/Button> 
&lt;Button Name="btn4" Click="stretchUniFill">Stretch="UniformToFill"
&lt;/Button> 
&lt;/StackPanel> 
&lt;StackPanel Margin="0,0,0,10" HorizontalAlignment="Center" Orientation="Horizontal" DockPanel.Dock="Top"> 
&lt;Button Name="btn5" Click="sdUpOnly">StretchDirection="UpOnly"
&lt;/Button> 
&lt;Button Name="btn6" Click="sdDownOnly">StretchDirection="DownOnly"
&lt;/Button> 
&lt;Button Name="btn7" Click="sdBoth">StretchDirection="Both"
&lt;/Button> 
&lt;/StackPanel> 
&lt;TextBlock DockPanel.Dock="Top" Name="txt1" /> 
&lt;TextBlock DockPanel.Dock="Top" Name="txt2" /> 
&lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"> 
&lt;Viewbox MaxWidth="500" MaxHeight="500" Name="vb1"> 
&lt;Image Source="tulip_farm.jpg"/> 
&lt;/Viewbox> 
&lt;/StackPanel> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following code-behind file handles the Button Click events that the previous XAML example defines.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public void stretchNone(object sender, RoutedEventArgs e) { vb1.Stretch = System.Windows.Media.Stretch.None; 
txt1.Text = "Stretch is now set to None."; 
} public void stretchFill(object sender, RoutedEventArgs e) { vb1.Stretch = System.Windows.Media.Stretch.Fill; 
txt1.Text = "Stretch is now set to Fill."; 
} public void stretchUni(object sender, RoutedEventArgs e) { vb1.Stretch = System.Windows.Media.Stretch.Uniform; 
txt1.Text = "Stretch is now set to Uniform."; 
} public void stretchUniFill(object sender, RoutedEventArgs e) { vb1.Stretch = System.Windows.Media.Stretch.UniformToFill; 
txt1.Text = "Stretch is now set to UniformToFill."; 
} public void sdUpOnly(object sender, RoutedEventArgs e) { vb1.StretchDirection = System.Windows.Controls.StretchDirection.UpOnly; 
txt2.Text = "StretchDirection is now UpOnly."; 
} public void sdDownOnly(object sender, RoutedEventArgs e) { vb1.StretchDirection = System.Windows.Controls.StretchDirection.DownOnly; 
txt2.Text = "StretchDirection is now DownOnly."; 
} public void sdBoth(object sender, RoutedEventArgs e) { vb1.StretchDirection = System.Windows.Controls.StretchDirection.Both; 
txt2.Text = "StretchDirection is now Both."; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Public Sub stretchNone(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.Stretch = System.Windows.Media.Stretch.None txt1.Text = "Stretch is now set to None." End Sub Public Sub stretchFill(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.Stretch = System.Windows.Media.Stretch.Fill txt1.Text = "Stretch is now set to Fill." End Sub Public Sub stretchUni(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.Stretch = System.Windows.Media.Stretch.Uniform txt1.Text = "Stretch is now set to Uniform." End Sub Public Sub stretchUniFill(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.Stretch = System.Windows.Media.Stretch.UniformToFill txt1.Text = "Stretch is now set to UniformToFill." End Sub Public Sub sdUpOnly(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.StretchDirection = System.Windows.Controls.StretchDirection.UpOnly txt2.Text = "StretchDirection is now UpOnly." End Sub Public Sub sdDownOnly(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.StretchDirection = System.Windows.Controls.StretchDirection.DownOnly txt2.Text = "StretchDirection is now DownOnly." End Sub Public Sub sdBoth(ByVal sender As Object, ByVal args As RoutedEventArgs) vb1.StretchDirection = System.Windows.Controls.StretchDirection.Both txt2.Text = "StretchDirection is now Both." End Sub </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Viewbox
      <LineBreak/>Stretch
      <LineBreak/>StretchDirection
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Apply Stretch Properties to the Contents of a Viewbox to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

