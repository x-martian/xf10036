<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_32d88853_395b_4855_9685_51a482a3b421"
  Tag     ="Chain BitmapSource Objects Together"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Chain BitmapSource Objects Together</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow/>
      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how you can apply a variety of effects to an image source by chaining multiple BitmapSource derived objects together. 
    </Paragraph>

    <Paragraph>The following example uses chaining to flip and change the pixel format of the source of an image. 
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"> 
&lt;Page.Resources> 
&lt;!-- This resource defines a BitmapImage with a source and a DecodePixelWidth of 200. This property is set to the same value as the desired width of the image to save on memory use. This BitmapImage is used as the base for the other BitmapSource resources. --> 
&lt;BitmapImage x:Key="masterImage" DecodePixelWidth="200" UriSource="C:\Documents and Settings\All Users\Documents\My Pictures\Sample Pictures\Water Lilies.jpg"/> 
&lt;!-- This TransformedBitmap uses the BitmapImage defined above and flips it 90 degrees. --> 
&lt;TransformedBitmap x:Key="rotatedImage" Source="{StaticResource masterImage}"> 
&lt;TransformedBitmap.Transform> 
&lt;RotateTransform Angle="90" /> 
&lt;/TransformedBitmap.Transform> 
&lt;/TransformedBitmap> 
&lt;!-- This FormatConvertedBitmap uses the TransformedBitmap defined above and changes the format to Gray32 (grayscale). --> 
&lt;FormatConvertedBitmap x:Key="convertFormatImage" Source="{StaticResource rotatedImage}" DestinationFormat="Gray32" /> 
&lt;/Page.Resources> 
&lt;StackPanel> 
&lt;!-- Apply the "convertFormatImage" resource defined above to this image. The resource is a combination of all three BitmapSource objects which renders this image with DecodePixelWidth set to 200, fliped 90 degrees and converted to grayscale. --> 
&lt;Image Width="200" Source="{StaticResource convertFormatImage}" /> 
&lt;/StackPanel> 
&lt;/Page> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>//This is a list of commonly used namespaces for a pane. using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Media.Imaging; 
namespace SDKSample { public partial class ChainedBitmapSourcesExample : Page { public ChainedBitmapSourcesExample() { ///// Create a BitmapImage and set it's DecodePixelWidth to 200. Use ///// ///// this BitmapImage as a source for other BitmapSource objects. ///// BitmapImage myBitmapImage = new BitmapImage(); 
// BitmapSource objects like BitmapImage can only have their properties // changed within a BeginInit/EndInit block. myBitmapImage.BeginInit(); 
myBitmapImage.UriSource = new Uri("sampleImages/WaterLilies.jpg",UriKind.Relative); 
// To save significant application memory, set the DecodePixelWidth or // DecodePixelHeight of the BitmapImage value of the image source to the desired // height or width of the rendered image. If you don't do this, the application will // cache the image as though it were rendered as its normal size rather then just // the size that is displayed. // Note: In order to preserve aspect ratio, set DecodePixelWidth // or DecodePixelHeight but not both. myBitmapImage.DecodePixelWidth = 200; 
myBitmapImage.EndInit(); 
/////////////////// Create a BitmapSource that Rotates the image ////////////////////// // Use the BitmapImage created above as the source for a new BitmapSource object // that will be scaled to a different size. Create a new BitmapSource by // scaling the original one. // Note: New BitmapSource does not cache. It is always pulled when required. // Create the new BitmapSource that will be used to scale the size of the source. TransformedBitmap myRotatedBitmapSource = new TransformedBitmap(); 
// BitmapSource objects like TransformedBitmap can only have their properties // changed within a BeginInit/EndInit block. myRotatedBitmapSource.BeginInit(); 
// Use the BitmapSource object defined above as the source for this BitmapSource. // This creates a "chain" of BitmapSource objects which essentially inherit from each other. myRotatedBitmapSource.Source = myBitmapImage; 
// Multiply the size of the X and Y axis of the source by 3. myRotatedBitmapSource.Transform = new RotateTransform(90); 
myRotatedBitmapSource.EndInit(); 
// Create a new BitmapSource using a different format than the original one. FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap(); 
// BitmapSource objects like FormatConvertedBitmap can only have their properties // changed within a BeginInit/EndInit block. newFormatedBitmapSource.BeginInit(); 
newFormatedBitmapSource.Source = myRotatedBitmapSource; 
newFormatedBitmapSource.DestinationFormat = PixelFormats.Gray32Float; 
newFormatedBitmapSource.EndInit(); 
// Create Image Element Image myImage = new Image(); 
myImage.Width = 200; 
//set image source myImage.Source = newFormatedBitmapSource; 
// Add Image to the UI StackPanel myStackPanel = new StackPanel(); 
myStackPanel.Children.Add(myImage); 
this.Content = myStackPanel; 
} public void PageLoaded(object sender, RoutedEventArgs args) { } } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Chain BitmapSource Objects Together to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

