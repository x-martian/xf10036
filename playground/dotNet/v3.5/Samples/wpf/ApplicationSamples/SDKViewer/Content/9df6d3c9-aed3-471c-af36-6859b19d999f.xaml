<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_9df6d3c9_aed3_471c_af36_6859b19d999f"
  Tag     ="Code-Behind and XAML"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Code-Behind and XAML</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Code-behind is a term used to describe the code that is joined with the code that is created by a XAML loader when a XAML page is compiled into an application. This topic describes requirements for code-behind as well as an alternative inline code mechanism for code in XAML.
    </Paragraph>

    <Paragraph FontSize="22">Prerequisites
    </Paragraph>

    <Paragraph>This topic assumes that you have read the <Hyperlink NavigateUri="a80db4cd-dd0f-479f-a45f-3740017c22e4.xaml">XAML Overview</Hyperlink>
 and have some basic knowledge of the CLR and object-oriented programming.
    </Paragraph>

    <Paragraph FontSize="22">Code-behind, Event Handler, and Partial Class Requirements
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>The partial class must derive from the type of the class that was used as the root element. You can leave the derivation blank in the partial class definition in code-behind, but the compiled result will assume the page root to be the base class for the partial class even if it not specified (because the markup half of the partial class did specify the page root as base). 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The event handlers you write must be instance methods defined by the partial class within the namespace identified by <Run FontWeight="Bold">x:Class</Run>
. You cannot qualify the name of an event handler to instruct a XAML loader to look for that handler in a different class scope. You also cannot use static methods as an event handler.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>The handler must match the delegate for the appropriate event.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>For the Microsoft Visual Basic .NET language specifically, you can use the language-specific <Run FontWeight="Bold">Handles</Run>
 keyword to associate handlers with instances and events in the handler declaration, instead of attaching handlers with attributes in XAML. However, this technique does have some limitations because <Run FontWeight="Bold">Handles</Run>
 cannot support all of the specific features of the WPF event system,such as certain routed event scenarios or attached events. For details, see <Hyperlink NavigateUri="ad4eb9aa-3afc-4a71-8cf6-add3fbea54a1.xaml">Visual Basic and WPF Event Handling</Hyperlink>
.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">x:Code
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">x:Code</Run>
 is a directive element defined in XAML that can contain inline programming code. The code that is defined inline can interact with the XAML on the same page. The following example illustrates inline C# code. Notice that the code is inside the <Run FontWeight="Bold">x:Code</Run>
 element and that the code must be surrounded by <Run FontWeight="Bold">
&lt;CDATA[</Run>
...<Run FontWeight="Bold">]]&gt;</Run>
 to escape it for XML, so that a XAML reader (interpreting either the XAML schema or the WPF schema) will not try to interpret the code literally.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="MyNamespace.MyCanvasCodeInline" > 
&lt;Button Name="button1" Click="Clicked">Click Me!
&lt;/Button> 
&lt;x:Code>
&lt;![CDATA[ void Clicked(object sender, RoutedEventArgs e) { button1.Content = "Hello World"; 
} ]]&gt;
&lt;/x:Code> 
&lt;/Page> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Inline Code Limitations
    </Paragraph>

    <Paragraph>You should consider avoiding or limiting the use of inline code for a XAML based application. In terms of architecture and coding philosophy, keeping markup and code-behind separated also keeps the designer and developer roles much more distinct. On a more technical level, the code that you put inline can be awkward to write, because you are always writing into the XAML page's generated partial class, and can only use the default namespace mappings. Because you cannot add <Run FontWeight="Bold">using</Run>
 statements, you must fully qualify many of the API calls that you make. The default WPF mappings include most but not all CLR namespaces that are present in the WPF assemblies; 
you will have to fully qualify calls to APIs contained within the other namespaces. You also cannot define multiple classes in the inline code, and all code entities must exist as a member or variable within the generated partial class. Other language specific programming features, such as <Run FontWeight="Bold">#ifdef</Run>
 against global variables or build variables, are also not available. For more information, see <Hyperlink NavigateUri="87986b13-1a2e-4830-ae36-15f9dc5629e8.xaml">x:Code XAML Directive Element</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="87986b13-1a2e-4830-ae36-15f9dc5629e8.xaml">x:Code XAML Directive Element</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="a80db4cd-dd0f-479f-a45f-3740017c22e4.xaml">XAML Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="a58696fd-bdad-4b55-9759-136dfdf8b91c.xaml">Building a Windows Presentation Foundation Application</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="67cce290-ca26-4c41-a797-b68aabc45479.xaml">XAML Syntax Terminology</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Code-Behind and XAML to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

