<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_941ace29_29c4_4c26_b75b_ea7d06aa0d69"
  Tag     ="Store Multiple Data Formats in a Data Object"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Store Multiple Data Formats in a Data Object</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph>The following example shows how to use the SetData method to add data to a data object in multiple formats.
    </Paragraph>

    <Paragraph/>
    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph/>
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>DataObject dataObject = new DataObject(); 
string sourceData = "Some string data to store..."; 
// Encode the source string into Unicode byte arrays. byte[] unicodeText = Encoding.Unicode.GetBytes(sourceData); 
// UTF-16 byte[] utf8Text = Encoding.UTF8.GetBytes(sourceData); 
byte[] utf32Text = Encoding.UTF32.GetBytes(sourceData); 
// The DataFormats class does not provide data format fields for denoting // UTF-32 and UTF-8, which are seldom used in practice; 
the following strings // will be used to identify these "custom" data formats. string utf32DataFormat = "UTF-32"; 
string utf8DataFormat = "UTF-8"; 
// Store the text in the data object, letting the data object choose // the data format (which will be DataFormats.Text in this case). dataObject.SetData(sourceData); 
// Store the Unicode text in the data object. Text data can be automatically // converted to Unicode (UTF-16 / UCS-2) format on extraction from the data object; 
// Therefore, explicitly converting the source text to Unicode is generally unnecessary, and // is done here as an exercise only. dataObject.SetData(DataFormats.UnicodeText, unicodeText); 
// Store the UTF-8 text in the data object... dataObject.SetData(utf8DataFormat, utf8Text); 
// Store the UTF-32 text in the data object... dataObject.SetData(utf32DataFormat, utf32Text); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>IDataObject
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="1a5b27b0-0ac5-4cdf-86c0-86ac0271fa64.xaml">Drag and Drop Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Drag and Drop Samples
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Store Multiple Data Formats in a Data Object to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

