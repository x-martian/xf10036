<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_e76a58d9_ef0e_461e_9cb7_4adebdca71a1"
  Tag     ="ComboBox Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>ComboBox Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The ComboBox class represents a control that encapsulates other controls. Controls that encapsulate other controls are called <Run FontStyle="italic">composite controls</Run>
. For example, the <Run FontWeight="Bold">ComboBox</Run>
 contains a Button that enables you to show and hide the items in a Popup and a TextBox that displays the selected item. This topic introduces you to the <Run FontWeight="Bold">ComboBox</Run>
 in Windows Presentation Foundation (WPF) and illustrates how to use it in Extensible Application Markup Language (XAML) and in C#.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="combobox_control">ComboBox Control</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="elements_contained_in_combobox">Elements Contained in a ComboBox</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="creating_comboboxes">Creating ComboBoxes</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="combobox_styling">ComboBox Styling</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">ComboBox Control
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">ComboBox</Run>
 is a user interface (UI) item that presents users with a list of options. The contents can be shown and hidden as the control expands and collapses. In its default state, the list is collapsed, displaying only one choice. The user clicks a button to see the complete list of options.
    </Paragraph>

    <Paragraph>The following graphic shows the appearance of a combo box in different states.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Collapsed and expanded DropDownList</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="22">Elements Contained in a ComboBox
    </Paragraph>

    <Paragraph>The following table lists the elements that make up a combo box.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Element Name 
            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Description 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">TextBox</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Displays the selection. If it is editable, this is where the user enters text.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Button</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Shows or hides the combo box items. This element is always visible.
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph><Run FontWeight="Bold">Popup</Run>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>Holds the items of the <Run FontWeight="Bold">ComboBox</Run>
 element.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Creating ComboBoxes
    </Paragraph>

    <Paragraph>In the following example, the <Run FontWeight="Bold">ComboBox</Run>
 contains three ComboBoxItem elements. The control collapses, displaying only the first item or no items, until the user clicks the button on the right side of the control.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;ComboBox Text="Is not open"> 
&lt;ComboBoxItem MouseMove="OnHover" Name="cbi1">Item1
&lt;/ComboBoxItem> 
&lt;ComboBoxItem MouseMove="OnHover" Name="cbi2">Item2
&lt;/ComboBoxItem> 
&lt;ComboBoxItem MouseMove="OnHover" Name="cbi3">Item3
&lt;/ComboBoxItem> 
&lt;/ComboBox> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example also demonstrates how to generate a <Run FontWeight="Bold">ComboBox</Run>
. The example creates a combo box (<Run FontStyle="italic">cbox</Run>
), adds <Run FontWeight="Bold">ComboBoxItem</Run>
 (<Run FontStyle="italic">cboxitem</Run>
) elements, and then adds the <Run FontWeight="Bold">ComboBox</Run>
 as a child of a Canvas element (<Run FontStyle="italic">cv2</Run>
).
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>cbox = new ComboBox(); 
cbox.Background = Brushes.LightBlue; 
cboxitem = new ComboBoxItem(); 
cboxitem.Content = "Created with C#"; 
cbox.Items.Add(cboxitem); 
cboxitem2 = new ComboBoxItem(); 
cboxitem2.Content = "Item 2"; 
cbox.Items.Add(cboxitem2); 
cboxitem3 = new ComboBoxItem(); 
cboxitem3.Content = "Item 3"; 
cbox.Items.Add(cboxitem3); 
cv2.Children.Add(cbox); 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Dim cbox As System.Windows.Controls.ComboBox Dim cboxitem As System.Windows.Controls.ComboBoxItem Dim cboxitem2 As System.Windows.Controls.ComboBoxItem Dim cboxitem3 As System.Windows.Controls.ComboBoxItem cbox = New ComboBox() cbox.Background = Brushes.LightBlue cboxitem = New ComboBoxItem() cboxitem.Content = "Created with Visual Basic." cbox.Items.Add(cboxitem) cboxitem2 = New ComboBoxItem() cboxitem2.Content = "Item 2" cbox.Items.Add(cboxitem2) cboxitem3 = New ComboBoxItem() cboxitem3.Content = "Item 3" cbox.Items.Add(cboxitem3) cv2.Children.Add(cbox) </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample see ComboBox Sample.
    </Paragraph>

    <Paragraph FontSize="22">ComboBox Styling
    </Paragraph>

    <Paragraph>With control styling you can dramatically change the appearance and behavior of <Run FontWeight="Bold">ComboBox</Run>
 controls and <Run FontWeight="Bold">ComboBoxItem</Run>
 controls without having to write a custom control. In addition to setting visual properties, you can also apply styles to individual parts of a control, change the behavior of parts of the control through properties, add parts, or change the layout of a control. The following examples demonstrate several ways to add styles to <Run FontWeight="Bold">ComboBox</Run>
 controls. 
    </Paragraph>

    <Paragraph>The first example defines a style called <Run FontStyle="italic">SimpleComboBoxItem</Run>
 that changes the Background, Foreground, and FontSize of the <Run FontWeight="Bold">ComboBoxItem</Run>
 controls.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Style x:Key="SimpleComboBoxItem" TargetType="{x:Type ComboBoxItem}"> 
&lt;Setter Property = "FontSize" Value="14"/> 
&lt;Setter Property = "Background" Value="Pink"/> 
&lt;Setter Property = "Foreground" Value="Purple"/> 
&lt;/Style> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example uses Trigger elements that enable you to change the appearance of a <Run FontWeight="Bold">ComboBoxItem</Run>
 in response to an event raised on the item. When you move the mouse over a <Run FontWeight="Bold">ComboBoxItem</Run>
 the <Run FontWeight="Bold">Foreground</Run>
, <Run FontWeight="Bold">FontSize</Run>
, and FontFamily change.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Style x:Key="Triggers" TargetType="{x:Type ComboBoxItem}"> 
&lt;Style.Triggers> 
&lt;Trigger Property="ComboBoxItem.IsMouseOver" Value="true"> 
&lt;Setter Property = "Foreground" Value="Red"/> 
&lt;Setter Property = "FontSize" Value="20"/> 
&lt;Setter Property = "FontFamily" Value="Arial Bold"/> 
&lt;/Trigger> 
&lt;/Style.Triggers> 
&lt;/Style> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete sample see ComboBox Styles Sample.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>CheckBox
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="b0662fa1-16d7-4320-b26b-c1804e565a44.xaml">ComboBox ControlTemplate Example</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="fe0c2f62-fec2-4c41-a37e-5773d284170c.xaml">ComboBox</Hyperlink>

      <LineBreak/>WPF Controls Gallery Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about ComboBox Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

