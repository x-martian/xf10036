<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_09576b1a_291f_435c_980e_dee32d899ae1"
  Tag     ="Get UI Automation Element Properties"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Get UI Automation Element Properties</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic shows how to retrieve properties of a Microsoft UI Automation element.
    </Paragraph>

    <Paragraph FontSize="22">Get a Current Property Value
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Obtain the AutomationElement whose property you wish to get.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Call GetCurrentPropertyValue, or retrieve the Current property structure and get the value from one of its members.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Get a Cached Property Value
    </Paragraph>

    <List MarkerStyle="Decimal">
      <ListItem>
        <Paragraph>Obtain the <Run FontWeight="Bold">AutomationElement</Run>
 whose property you wish to get. The property must have been specified in the CacheRequest.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Call GetCachedPropertyValue, or retrieve the Cached property structure and get the value from one of its members.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following example shows various ways to retrieve current properties of an <Run FontWeight="Bold">AutomationElement</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>void PropertyCallsExample(AutomationElement elementList) { // The following two calls are equivalent. string name = elementList.Current.Name; 
name = elementList.GetCurrentPropertyValue(AutomationElement.NameProperty) as string; 
// The following shows how to ignore the default property, which // would probably be an empty string if the property is not supported. // Passing "false" as the second parameter is equivalent to using the overload // that does not have this parameter. object help = elementList.GetCurrentPropertyValue(AutomationElement.HelpTextProperty, true); 
if (help == AutomationElement.NotSupported) { help = "No help available"; 
} string helpText = (string)help; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Sub PropertyCallsExample(ByVal elementList As AutomationElement) ' The following two calls are equivalent. Dim name As String = elementList.Current.Name name = CStr(elementList.GetCurrentPropertyValue(AutomationElement.NameProperty)) ' The following shows how to ignore the default property, which ' would probably be an empty string if the property is not supported. ' Passing "false" as the second parameter is equivalent to using the overload ' that does not have this parameter. Dim help As Object = elementList.GetCurrentPropertyValue(AutomationElement.HelpTextProperty, True) If help Is AutomationElement.NotSupported Then help = "No help available" End If Dim helpText As String = CStr(help) End Sub 'PropertyCallsExample </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="ec722dff-6009-4279-b86a-e18d3fa94ebf.xaml">Use Caching in UI Automation</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="255905af-0b17-485c-93d4-8a2db2a6524b.xaml">UI Automation Properties for Clients</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="94c15031-4975-43cc-bcd5-c9439ed21c9c.xaml">Caching in UI Automation Clients</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Get UI Automation Element Properties to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

