<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_98c5594d_a40a_4f23_b736_0183ad4c5ab5"
  Tag     ="Create a Beveled Visual Effect"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Create a Beveled Visual Effect</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The BevelBitmapEffect can be used to create an inner bevel which raises the surface of a visible object according to a specified curve (set by the EdgeProfile property). Below are a series of examples that show the following:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>How to use simple markup to apply the effect to an object
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>How to use a Style to apply the effect to one or more objects
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>How to use code to apply the effect to an object
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>How to use an animation to animate the properties of an effect applied to an object
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph><Run FontWeight="Bold">Note:</Run>
 All of the examples below apply only a single effect to an object. To apply multiple effects, you can use BitmapEffectGroup. See <Hyperlink NavigateUri="451ebe11-47e1-422f-ab5e-464490e8063a.xaml">How to: Create Multiple Visual Effects</Hyperlink>
 for examples.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following example shows how to use a <Run FontWeight="Bold">BevelBitmapEffect</Run>
 to create a bevel inside of a Button. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_98c5594d_a40a_4f23_b736_0183ad4c5ab5_0">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"> 
&lt;StackPanel> 
&lt;Button Width="200" Height="80" Margin="50"> Bevelled Button 
&lt;Button.BitmapEffect> 
&lt;!-- 
&lt;BitmapEffectGroup> would go here if you wanted to apply more then one effect to the TextBox. However, in this example only one effect is being applied so BitmapEffectGroup does not need to be included. --> 
&lt;!-- The BevelBitmapEffect has several important properties that determine characteristics of the bevel effect: - BevelWidth: Specifies how wide the bevel is (size of the bevel). In this example, the bevel is fairly wide at 15 (default is 5). - EdgeProfile: Specifies the curve of the bevel. The default is "Linear". - LightAngle: Specifies in what direction the "virtual light" is coming from that create the shadows of the bevel. It is an angle between 0 and 360 with 0 starting on the right hand side and moving counter-clockwise around the object. The shadows of the bevel are on the opposite side of where the light is cast. The value of 320 in this example casts the light on the lower right hand side of the bevel and shadow on the upper left. - Relief: Specifies the height of the relief of the bevel. Range is between 0 and 1 with 1 having the most relief (darkest shadows). The default is 0.3. - Smoothness: Specifies how smooth the shadows are. The range is between 0 and 1 with 1 being the softest. Default is 0.5. --> 
&lt;BevelBitmapEffect BevelWidth="15" EdgeProfile="CurvedIn" LightAngle="320" Relief="0.4" Smoothness="0.4" /> 
&lt;/Button.BitmapEffect> 
&lt;/Button> 
&lt;/StackPanel> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following illustration shows the effect created in the previous example.
    </Paragraph>

    <Paragraph>The following example shows how to use a <Run FontWeight="Bold">Style</Run>
 to apply a <Run FontWeight="Bold">BevelBitmapEffect</Run>
 to any <Run FontWeight="Bold">Button</Run>
 on the page when the mouse pointer moves over it. In addition, when the button is pressed, another <Run FontWeight="Bold">BevelBitmapEffect</Run>
 is applied with a different BevelWidth value which makes the button look like it is being pushed down.
    </Paragraph>

    <Paragraph/>
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_98c5594d_a40a_4f23_b736_0183ad4c5ab5_1">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"> 
&lt;!-- Resources define Styles for the entire page. --> 
&lt;Page.Resources> 
&lt;!-- This style applies to any Button on the page. --> 
&lt;Style TargetType="{x:Type Button}"> 
&lt;Style.Triggers> 
&lt;!-- When the mouse pointer moves over the button, apply a bevel with a wide BevelWidth. --> 
&lt;Trigger Property="IsMouseOver" Value="true"> 
&lt;Setter Property="BitmapEffect" > 
&lt;Setter.Value> 
&lt;BevelBitmapEffect BevelWidth="15" /> 
&lt;/Setter.Value> 
&lt;/Setter> 
&lt;/Trigger> 
&lt;!-- When the mouse pointer is pressed, apply a bevel with a narrower BevelWidth to make the button appear to get pressed. --> 
&lt;Trigger Property="IsPressed" Value="true"> 
&lt;Setter Property="BitmapEffect" > 
&lt;Setter.Value> 
&lt;BevelBitmapEffect BevelWidth="5" /> 
&lt;/Setter.Value> 
&lt;/Setter> 
&lt;/Trigger> 
&lt;/Style.Triggers> 
&lt;/Style> 
&lt;/Page.Resources> 
&lt;StackPanel> 
&lt;!-- The Style defined above applies to this Button which makes the Button become beveled while it is pressed. --> 
&lt;Button Width="200" Height="80" Margin="50">Press to Bevel
&lt;/Button> 
&lt;/StackPanel> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows how to use code to apply a <Run FontWeight="Bold">BevelBitmapEffect</Run>
 to a <Run FontWeight="Bold">Button</Run>
 when the mouse pointer moves over it.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="SDKSample.BevelExample" > 
&lt;StackPanel> 
&lt;Button MouseEnter="OnMouseOverBevelButton" Width="200" Height="80" Margin="50"> MouseOver to Bevel! 
&lt;/Button> 
&lt;/StackPanel> 
&lt;/Page> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following code handles the event from the preceding markup.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System; 
using System.Windows; 
using System.Windows.Controls; 
using System.Windows.Media; 
using System.Windows.Input; 
using System.Windows.Media.Effects; 
namespace SDKSample { public partial class BevelExample : Page { // Add Bevel effect. void OnMouseOverBevelButton(object sender, RoutedEventArgs args) { // Get a reference to the Button. Button myButton = (Button)sender; 
// Initialize a new BevelBitmapEffect that will be applied // to the Button. BevelBitmapEffect myBevelEffect = new BevelBitmapEffect(); 
// Set the BevelWidth. The default for BevelWidth is 5. myBevelEffect.BevelWidth = 15; 
// Set the EdgeProfile. The default value is Linear. myBevelEffect.EdgeProfile = EdgeProfile.CurvedIn; 
// Set the LightAngle (direction where light is coming from) to 320 degrees. myBevelEffect.LightAngle = 320; 
// Set the Relief to an intermediate value of 0.5. Relief specifies the relief // between light and shadow for the bevel. The default value is 0.3. myBevelEffect.Relief = 0.4; 
// Set the Smoothness. The default value is 0.5. This example sets // the property to the maximum value which is 1. myBevelEffect.Smoothness = 0.4; 
// Apply the bitmap effect to the Button. myButton.BitmapEffect = myBevelEffect; 
} } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows how to animate the <Run FontWeight="Bold">BevelWidth</Run>
 and LightAngle properties of the <Run FontWeight="Bold">BevelBitmapEffect</Run>
 so that when the mouse pointer moves over the <Run FontWeight="Bold">Button</Run>
, the inner level of the bevel increases while the artificial light source used for the bevel revolves around the <Run FontWeight="Bold">Button</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_98c5594d_a40a_4f23_b736_0183ad4c5ab5_3">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" > 
&lt;StackPanel> 
&lt;Button Width="200" Height="80" Margin="50"> MouseOver ME! 
&lt;Button.BitmapEffect> 
&lt;!-- This BitmapEffect is targeted by the animation. --> 
&lt;BevelBitmapEffect x:Name="myBevelBitmapEffect" BevelWidth="0" EdgeProfile="CurvedIn" /> 
&lt;/Button.BitmapEffect> 
&lt;Button.Triggers> 
&lt;EventTrigger RoutedEvent="Button.MouseEnter"> 
&lt;BeginStoryboard> 
&lt;Storyboard> 
&lt;!-- Animate the BevelWidth from 0 to 15. --> 
&lt;DoubleAnimation Storyboard.TargetName="myBevelBitmapEffect" Storyboard.TargetProperty="BevelWidth" From="0" To="15" Duration="0:0:0.5" AutoReverse="True" /> 
&lt;!-- Animate the LightAngle so that the light source and corresponding bevel shadows move around the button. --> 
&lt;DoubleAnimation Storyboard.TargetName="myBevelBitmapEffect" Storyboard.TargetProperty="LightAngle" From="360" To="0" Duration="0:0:0.5" AutoReverse="True" /> 
&lt;/Storyboard> 
&lt;/BeginStoryboard> 
&lt;/EventTrigger> 
&lt;/Button.Triggers> 
&lt;/Button> 
&lt;/StackPanel> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="19661f77-b252-4704-a068-5f71ac14e563.xaml">How to: Create a Blur Visual Effect</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="e5189fc2-a4c7-4a2a-b5fd-fccd4983956b.xaml">How to: Create a Drop Shadow Visual Effect</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="b47c9fa9-1991-4a97-b763-375a59cedbff.xaml">How to: Create an Embossed Visual Effect</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="451ebe11-47e1-422f-ab5e-464490e8063a.xaml">How to: Create Multiple Visual Effects</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="12a6e0d6-26df-4cab-85fd-99c7cc61845b.xaml">How to: Animate Multiple Visual Effects</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="23cb338e-4b59-4b52-b294-96431f9c9568.xaml">Bitmap Effects Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Create a Beveled Visual Effect to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

