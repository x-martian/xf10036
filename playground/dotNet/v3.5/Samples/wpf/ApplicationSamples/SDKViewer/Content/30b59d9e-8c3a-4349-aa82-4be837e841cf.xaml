<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_30b59d9e_8c3a_4349_aa82_4be837e841cf"
  Tag     ="Implement Property Change Notification"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Implement Property Change Notification</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To support OneWay or TwoWay binding to enable your <Run>binding target</Run>
 properties to automatically reflect the dynamic changes of the <Run>binding source</Run>
 (for example, to have the preview pane updated automatically when the user edits a form), your class needs to provide the proper property changed notifications. This example shows how to create a class that implements INotifyPropertyChanged.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>To implement <Run FontWeight="Bold">INotifyPropertyChanged</Run>
 you need to declare the PropertyChanged event and create the <Run FontWeight="Bold">OnPropertyChanged</Run>
 method. Then for each property you want change notifications for, you call <Run FontWeight="Bold">OnPropertyChanged</Run>
 whenever the property is updated.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>using System.ComponentModel; 
namespace SDKSample { // This class implements INotifyPropertyChanged // to support one-way and two-way bindings // (such that the UI element updates when the source // has been changed dynamically) public class Person : INotifyPropertyChanged { private string name; 
// Declare the event public event PropertyChangedEventHandler PropertyChanged; 
public Person() { } public Person(string value) { this.name = value; 
} public string PersonName { get { return name; 
} set { name = value; 
// Call OnPropertyChanged whenever the property is updated OnPropertyChanged("PersonName"); 
} } // Create the OnPropertyChanged method to raise the event protected void OnPropertyChanged(string name) { PropertyChangedEventHandler handler = PropertyChanged; 
if (handler != null) { handler(this, new PropertyChangedEventArgs(name)); 
} } } } </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Imports System.ComponentModel ' This class implements INotifyPropertyChanged ' to support one-way and two-way bindings ' (such that the UI element updates when the source ' has been changed dynamically) Public Class Person Implements INotifyPropertyChanged Private personName As String Sub New() End Sub Sub New(ByVal Name As String) Me.personName = Name End Sub ' Declare the event Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Public Property Name() As String Get Return personName End Get Set(ByVal value As String) personName = value ' Call OnPropertyChanged whenever the property is updated OnPropertyChanged("Name") End Set End Property ' Create the OnPropertyChanged method to raise the event Protected Sub OnPropertyChanged(ByVal name As String) RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(name)) End Sub End Class </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To see an example of how the <Run>Person</Run>
 class can be used to support <Run FontWeight="Bold">TwoWay</Run>
 binding, see <Hyperlink NavigateUri="ffb7b96a-351d-4c68-81e7-054033781c64.xaml">How to: Control When the TextBox Text Updates the Source</Hyperlink>
.
    </Paragraph>

    <Paragraph>For the complete sample, see Simple Binding Sample.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="2df2cd11-6aac-4bdf-ab7b-ea5f464cd5ca.xaml">Binding Sources Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Data Binding Overviews
      <LineBreak/>Data Binding Samples
      <LineBreak/><Hyperlink NavigateUri="a3b2563e-d879-41a7-9dfd-ac56b27fdcad.xaml">Data Binding How-to Topics</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Implement Property Change Notification to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

