<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_8579c10b_76ab_4c52_9691_195ce02333c8"
  Tag     ="Architecture"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>WPF Architecture</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Chris Anderson
    </Paragraph>

    <Paragraph>Software Architect
    </Paragraph>

    <Paragraph>Microsoft Corporation
    </Paragraph>

    <Paragraph>April 2006
    </Paragraph>

    <Paragraph>There are many ways to analyze the architecture of a system. Each view into the system tells a different story. The following article provides a guided tour of the Windows Presentation Foundation (WPF) class hierarchy. It covers most of the major sub-systems of WPF, and describes how they interact. It also details some of the architectural decisions made along the way.
    </Paragraph>

    <Paragraph/>
    <Paragraph>This topic contains the following sections.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Object">System.Object</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Threading_DispatcherObject">System.Threading.DispatcherObject</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Windows_DependencyObject">System.Windows.DependencyObject</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Windows_Media_Visual">System.Windows.Media.Visual</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Windows_UIElement">System.Windows.UIElement</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Windows_FrameworkElement">System.Windows.FrameworkElement</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="System_Windows_Controls_Control">System.Windows.Controls.Control</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="Summary">Summary</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">System.Object
    </Paragraph>

    <Paragraph>The primary WPF programming model is exposed in managed code, which means plugging into the Common language runtime (CLR). Early in the design of WPF there were a lot of debates about where the line should be drawn between the managed components of the system and the unmanaged ones. The CLR provides a number of features that make development more productive and robust (including memory management, error handling, common type system, etc.) but they come at a cost.
    </Paragraph>

    <Paragraph>The major components of WPF are illustrated in the figure below. The red sections of the diagram (PresentationFramework, PresentationCore, and milcore) are the major code portions of WPF. Of these, only one is an unmanaged component – milcore. The reason that milcore is written in unmanaged code is two-fold. First, the decision was driven by a desire for tight integration with DirectX. All display in WPF is done through the DirectX engine, allowing for efficient hardware and software rendering. The second driver was the need for fine control over memory and execution. The composition engine in milcore is extremely performance sensitive, and required us to give up many of the advantages of the CLR to gain performance.
    </Paragraph>

    <Paragraph>We will cover how the communication between the managed and unmanaged portions of WPF works later in this topic. First, we will describe the rest of the managed programming model.
    </Paragraph>

    <Paragraph FontSize="22">System.Threading.DispatcherObject
    </Paragraph>

    <Paragraph>Most objects in WPF derive from DispatcherObject, which provides the basic constructs for dealing with concurrency and threading. WPF is based on a messaging system implemented by the dispatcher. This works much like the familiar Win32 message pump, in fact the WPF dispatcher uses User32 messages for performing cross thread calls.
    </Paragraph>

    <Paragraph>There are really two core concepts to understand when discussing concurrency in WPF – the dispatcher and thread affinity. 
    </Paragraph>

    <Paragraph>During the design phase of WPF, the goal was to move to a single thread of execution, but a non-thread "affinitized" model. Thread affinity happens when a component uses the identity of the executing thread to store some type of state. Probably the most common form of this is to use the thread local store (TLS) to store state. Thread affinity isn’t a bad thing per se, but it does require that each logical thread of execution be owned by one and only one physical thread in the operating system, which can become memory intensive. In the end, we decided to keep WPF’s threading model in sync with the existing User32 threading model of single threaded execution with thread affinity. The primary reason for this was interoperability – systems like OLE 2.0, the clipboard, and Internet Explorer all require single thread affinity (STA) execution.
    </Paragraph>

    <Paragraph>Given that you have objects with STA threading, you need a way to communicate between threads, and validate that you are on the correct thread. Herein lies the role of the dispatcher. The dispatcher is a basic message dispatching system, with multiple prioritized queues. Examples of messages include raw input notifications (mouse moved), framework functions (layout), or user commands (execute this method).
    </Paragraph>

    <Paragraph>By deriving from <Run FontWeight="Bold">DispatcherObject</Run>
 you are really saying that you want to create a CLR object that has STA behavior, and will be given a pointer to a dispatcher at creation time.
    </Paragraph>

    <Paragraph FontSize="22">System.Windows.DependencyObject
    </Paragraph>

    <Paragraph>One of the primary architectural philosophies we used in building WPF was a preference for properties over methods or events. The basic idea is that properties are declarative and allow you to more easily specify intent instead of action. We also wanted to create a model driven, or data driven, system for displaying user interface content. This philosophy had the intended effect of the creation of more properties that you could data bind to, in order to better control the behavior of an application.
    </Paragraph>

    <Paragraph>In order to have more of the system driven by properties we needed them to be much richer than typical CLR properties. A simple example of this richness would be change notification. In order to enable two way binding, you need both sides of the bind to support change notification. In order to have behavior tied to property values, you need to be notified when the property value changes. In .NET today there is an interface, <Run FontWeight="Bold">INotifyPropertyChange</Run>
, that allows an object to publish change notifications, however it is optional.
    </Paragraph>

    <Paragraph>WPF provides a richer property system, derived from the DependencyObject type. The property system is really a "dependency" property system in that it tracks dependencies between property expressions and automatically revalidates property values when dependencies change. For example, if you have a property that inherits (like FontSize), the system is automatically updated if the property changes on a parent of an element that is inheriting the value.
    </Paragraph>

    <Paragraph>The foundation of the WPF property system is the concept of a property expression. In this first release of WPF, the property expression system is closed, and the expressions are all provided as part of the framework. The notion of expressions is why the property system doesn’t have data binding, styling, or inheritance hard coded, but rather provided by the later layers of the framework.
    </Paragraph>

    <Paragraph>The property system also provides for sparse storage of property values. Because we expected objects to have dozens (if not hundreds) of properties, and we expected most of the values to be in their default state (inherited, set by styles, etc.), we didn’t want to have every instance of an object have the full weight of every property.
    </Paragraph>

    <Paragraph>The final key feature of the property system is the notion of <Run>attached properties</Run>
. WPF elements are built on the principle of composition and component reuse. It is often the case that some containing element (like a Grid layout panel) needs additional data on child elements to control its behavior (like the Row/Column information). Instead of associating all of these properties with every element, we instead allow any object to provide property definitions for any other object. This is similar to the "expando" features of JavaScript.
    </Paragraph>

    <Paragraph FontSize="22">System.Windows.Media.Visual
    </Paragraph>

    <Paragraph>With a system defined, the next step is to actually get some pixels drawn to the screen. Visual provides for building a tree of visual objects, with each optionally containing drawing instructions and metadata about how to render those instructions (clipping, transformation, etc.). <Run FontWeight="Bold">Visual</Run>
 is designed to be extremely lightweight and flexible, so most of the features have no public API exposure and rely heavily on protected callback functions.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Visual</Run>
 is really the entry point to the WPF composition system. I mentioned before about milcore, and how it is an unmanaged component that we talk to from our managed API. <Run FontWeight="Bold">Visual</Run>
 is the point of connection between these two sub-systems.
    </Paragraph>

    <Paragraph>WPF displays data by traversing the unmanaged data structures managed by the milcore. These structures, called composition nodes, represent a hierarchical display tree with rendering instructions at each node. This tree, illustrated on the right hand side of the figure below, is only accessible through a messaging protocol.
    </Paragraph>

    <Paragraph>When programming WPF you create <Run FontWeight="Bold">Visual</Run>
 elements, and derived types, which internally communicate to the composition tree through this messaging protocol. Each <Run FontWeight="Bold">Visual</Run>
 in WPF may create one, none, or several composition nodes. 
    </Paragraph>

    <Paragraph>There is a very important architectural detail to notice here – the entire tree of visuals and drawing instructions is cached. In graphics terms, WPF uses a retained rendering system. This enables the system to repaint at high refresh rates without the composition system blocking on callbacks to user code. This helps prevent the appearance of an unresponsive application.
    </Paragraph>

    <Paragraph>Another important detail that isn’t really noticeable in the diagram is how the system actually performs the composition. 
    </Paragraph>

    <Paragraph>In User32 and GDI, the system worked on an immediate mode clipping system. When a component needed to be rendered, the system would establish a clipping bounds outside of which the component wasn’t allowed to touch the pixels, and then the component was asked to paint pixels in that box. This system works very well in memory constrained systems because when something changes you only have to touch the affected component – no two components ever contribute to the color of a single pixel. 
    </Paragraph>

    <Paragraph>We’ve already talked about WPF using a retained model for rendering, but it also does uses a "painters algorithm" painting model. This means that instead of clipping each component, each component is asked to render from the back to the front of the display. This allows each component to paint over the previous components display. The advantage of this model is that you can have complex partially transparent shapes. With today’s modern graphics hardware, this model is relatively fast (which wasn’t the case when User32/ GDI).
    </Paragraph>

    <Paragraph>As mentioned previously, a core philosophy of WPF was to move to a more declarative, "property centric" model for programming. In the visual system this shows up in a couple interesting places. 
    </Paragraph>

    <Paragraph>First, if you think about the retained mode graphic system, this is really moving away from an imperative DrawLine/DrawLine type model, to a data oriented model – new Line()/new Line(). This move to data driven rendering allows complex operations on the drawing instructions to be expressed using properties. The types deriving from Drawing are effectively the object model for rendering.
    </Paragraph>

    <Paragraph>Second, if you look at the animation system, it is completely declarative. Instead of requiring a developer to compute the next location, or next color, you can express animations as a set of properties on an animation object. These animations can then express the intent of the developer or designer (move this button from here to there in 5 seconds), and the system can determine the most efficient way to accomplish that.
    </Paragraph>

    <Paragraph FontSize="22">System.Windows.UIElement
    </Paragraph>

    <Paragraph>UIElement defines core platform services including Layout, Input, Focus, and Events – which we refer to as "LIFE". This breaks down into three interesting sub-systems in WPF – Layout, Input, and Events.
    </Paragraph>

    <Paragraph>Layout is a core concept in WPF. In many systems there is either a fixed set of layout models (HTML supports three models for layout; 
flow, absolute, and tables) or no model for layout (User32 really only supports absolute positioning). WPF started with the assumption that we wanted a flexible, extensible layout model, that could be driven by property values rather than imperative logic. At the <Run FontWeight="Bold">UIElement</Run>
 level, the basic contract for layout is introduced – a two phase model with Measure and Arrange passes.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Measure</Run>
 allows a component to determine how much size it would like to take. This is a separate phase from <Run FontWeight="Bold">Arrange</Run>
 because there are many situations where a parent element will ask a child to measure several times to determine its optimal position and size. The fact that parent elements ask child elements to measure demonstrates another key philosophy of WPF – size to content. All controls in WPF support the ability to size to the natural size of their content. This makes localization much easier, and allows for dynamic layout of elements as things resize. The <Run FontWeight="Bold">Arrange</Run>
 phase allows a parent to position and determine the final size of each child.
    </Paragraph>

    <Paragraph>A lot of time is often spent talking about the output side of WPF – <Run FontWeight="Bold">Visual</Run>
 and related objects. However there is a tremendous amount of innovation on the input side as well. Probably the most fundamental change in the input model for WPF is the move to a single consistent model for how input events are routed through the system. 
    </Paragraph>

    <Paragraph>Input originates as a signal on some kernel mode device driver and gets routed to the correct process and thread through an intricate dance between the Windows kernel and User32. Once the User32 message corresponding to the input is routed to WPF, it is converted into a WPF raw input message and sent to the dispatcher. WPF allows for raw input events to be converted to multiple actual events, enabling features like "MouseEnter" to be implemented at a low level of the system with guaranteed delivery.
    </Paragraph>

    <Paragraph>Each input event is converted to at least two events – a "preview" event and the actual event. All events in WPF have a notion of routing through the element tree. Events are said to "bubble" if they traverse from a target up the tree to the root, and are said to "tunnel" if that start at the root and traverse down to a target. Input preview events tunnel, enabling any element in the tree an opportunity to filter or take action on the event. The regular (non-preview) events then bubble from the target up to the root.
    </Paragraph>

    <Paragraph>This split between the tunnel and bubble phase makes implementation of features like keyboard accelerators work in a consistent fashion in a composite world. In User32 you would implement keyboard accelerators by having a single global table containing all the accelerators you wanted to support (Ctrl+N mapping to "New"). In the dispatcher for your application you would call <Run FontWeight="Bold">TranslateAccelerator</Run>
 which would sniff the input messages in User32 and determine if any matched a registered accelerator. In WPF this wouldn’t work because we wanted the system to be fully "composable" – any element should be able to handle and use any keyboard accelerator. Having this two phase model for input allows for components to implement their own "TranslateAccelerator".
    </Paragraph>

    <Paragraph>To take this one step further, <Run FontWeight="Bold">UIElement</Run>
 also introduces the notion of CommandBindings. The WPF command system allows for developers to define functionality in terms of a command end point – something that implements ICommand. Command bindings enable an element to define a mapping between an input gesture (Ctrl+N) and a command (New). Both the input gestures and command definitions are extensible, and can be wired together at usage time. This makes it trivial, for example, to allow an end user to customize the key bindings that they want to use within an application.
    </Paragraph>

    <Paragraph>Up to this point we've discussed "core" features of WPF – features implemented in the PresentationCore assembly. When building WPF we wanted a clean separation between foundational pieces (like the contract for layout with <Run FontWeight="Bold">Measure</Run>
 and <Run FontWeight="Bold">Arrange</Run>
) and framework pieces (like the implementation of a specific layout like <Run FontWeight="Bold">Grid</Run>
). The goal was to provide an extensibility point low in the stack that would allow external developers to create their own frameworks if needed.
    </Paragraph>

    <Paragraph FontSize="22">System.Windows.FrameworkElement
    </Paragraph>

    <Paragraph>FrameworkElement can be looked at in two different ways. It introduces a set of policies and customizations on the sub-systems introduced in lower layers of WPF. It also introduces a set of new sub-systems.
    </Paragraph>

    <Paragraph>The primary policy introduced by <Run FontWeight="Bold">FrameworkElement</Run>
 is around application layout. <Run FontWeight="Bold">FrameworkElement</Run>
 builds on the basic layout contract introduced by <Run FontWeight="Bold">UIElement</Run>
 and adds the notion of a layout "slot" that makes it easier for layout authors to have a consistent set of property driven layout semantics. Properties like HorizontalAlignment, VerticalAlignment, MinWidth, and Margin (to name a few) give all components derived from <Run FontWeight="Bold">FrameworkElement</Run>
 consistent behavior inside of layout containers.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">FrameworkElement</Run>
 also provides easier API exposure to many features found in the core layers of WPF. For example, <Run FontWeight="Bold">FrameworkElement</Run>
 provides direct access to animation through the BeginStoryboard method. A Storyboard provides a way to script multiple animations against a set of properties.
    </Paragraph>

    <Paragraph>Probably the two most critical things that <Run FontWeight="Bold">FrameworkElement</Run>
 introduces to the platform are data binding and styles.
    </Paragraph>

    <Paragraph>The data binding sub-system in WPF should be relatively familiar to anyone that has used Windows Forms or ASP.NET for creating application user interface (UI). In each of these systems, there is a simple way to express that you want one or more properties from a given element to be bound to a piece of data. WPF has full support for property binding, transformation, and list binding.
    </Paragraph>

    <Paragraph>The most interesting part of data binding in WPF is the introduction of data templates. Data templates allows you to declaratively specify how a piece of data should be visualized. Instead of creating a custom user interface that can be bound to data, you can instead turn the problem around and let the data determine the display that will be created.
    </Paragraph>

    <Paragraph>Styling is really a lightweight form of data binding. Using styling you can bind a set of properties from a shared definition to one or more instances of an element. Styles get applied to an element either by explicit reference (by setting the Style property) or implicitly by associating a style with the CLR type of the element.
    </Paragraph>

    <Paragraph FontSize="22">System.Windows.Controls.Control
    </Paragraph>

    <Paragraph>Control’s most significant feature is templating. If you think about WPF’s composition system as a retained mode rendering system, templating allows a control to describe it’s rendering in a parameterized, declarative manner. A ControlTemplate is really nothing more than a script to create a set of child elements, with bindings to properties offered by the control.
    </Paragraph>

    <Paragraph>Control provides a set of stock properties; 
Foreground, Background, Padding, etc.; 
which template authors can then use to customize the display of a control. The implementation of a control provides a data model and interaction model. The interaction model defines a set of commands (like Close for a window) and bindings to input gestures (like clicking the red X in the upper corner of the window). The data model provides a set of properties to either customize the interaction model or customize the display (determined by the template).
    </Paragraph>

    <Paragraph>This split between the data model (properties), interaction model (commands and events), and display model (templates) enables complete customization of a control’s look and behavior.
    </Paragraph>

    <Paragraph>A common aspect of the data model of controls is the content model. If you look at a control like Button, you will see that it has a property "Content" of type Object. In Windows Forms and ASP.NET this property would typically be a string – however that limits the type of content you can put in a button. Content for a button can either be a simple string, or a complex data object, or an entire element tree. In the case of a data object, the data template is used to construct a display.
    </Paragraph>

    <Paragraph FontSize="22">Summary
    </Paragraph>

    <Paragraph>You may have noticed a common theme throughout the description of the system architecture – properties, data binding, and content models. WPF fundamentally is designed to allow you to create dynamic, data driven presentation systems. Every part of the system is designed to create objects through property sets that drive behavior. Data binding is a fundamental part of the system, and is integrated at every layer.
    </Paragraph>

    <Paragraph>If you think about this, traditional applications would create a display and then bind to some data. In WPF, everything about the control, every aspect of the display, is generated by some type of data binding. The way that the text of a button is displayed is actually by creating a composed control inside of the button and binding its display to the button’s content property.
    </Paragraph>

    <Paragraph>When you first start developing WPF based applications, it should feel very familiar. You can set properties, use objects, and data bind in much the same way that you can by using Windows Forms or ASP.NET. That is a good thing. With a deeper investigation into the architecture of WPF, you'll find that there is the possibility for creating much richer applications that fundamentally treat data as the core driver of the application. 
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Visual
      <LineBreak/>UIElement
      <LineBreak/>ICommand
      <LineBreak/>FrameworkElement
      <LineBreak/>DispatcherObject
      <LineBreak/>CommandBinding
      <LineBreak/>Control
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="3eecdced-3623-403a-a077-7595453a9221.xaml">The Layout System</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="bd9ce563-725d-4385-87c9-d7ee38cf79ea.xaml">Animation Overview</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about WPF Architecture to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

