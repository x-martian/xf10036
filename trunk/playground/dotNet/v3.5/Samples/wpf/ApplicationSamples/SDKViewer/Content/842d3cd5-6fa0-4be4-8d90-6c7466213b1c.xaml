<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_842d3cd5_6fa0_4be4_8d90_6c7466213b1c"
  Tag     ="Use a Custom Context Menu with a TextBox"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Use a Custom Context Menu with a TextBox</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow/>
      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to define and implement a simple custom context menu for a TextBox.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following Extensible Application Markup Language (XAML) example defines a <Run FontWeight="Bold">TextBox</Run>
 control that includes a custom context menu. 
    </Paragraph>

    <Paragraph>The context menu is defined using a ContextMenu element. The context menu itself consists of a series of MenuItem elements and Separator elements. Each <Run FontWeight="Bold">MenuItem</Run>
 element defines a command in the context menu; 
the Header attribute defines the display text for the menu command, and the Click attribute specifies a handler method for each menu item. The <Run FontWeight="Bold">Separator</Run>
 element simply causes a separating line to be rendered between the previous and subsequent menu items.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBox Name="cxmTextBox" Grid.Row="1" AcceptsReturn="True" AcceptsTab="True" VerticalScrollBarVisibility="Visible" TextWrapping="Wrap" > 
&lt;TextBox.ContextMenu> 
&lt;ContextMenu Name="cxm" Opened="CxmOpened" > 
&lt;MenuItem Header="Cut" Name="cxmItemCut" Click="ClickCut" /> 
&lt;MenuItem Header="Copy" Name="cxmItemCopy" Click="ClickCopy" /> 
&lt;MenuItem Header="Paste" Name="cxmItemPaste" Click="ClickPaste" /> 
&lt;Separator/> 
&lt;MenuItem Header="Select All" Name="cxmItemSelectAll" Click="ClickSelectAll" /> 
&lt;MenuItem Header="Select Current Line" Name="cxmItemSelectLine" Click="ClickSelectLine" /> 
&lt;Separator/> 
&lt;MenuItem Header="Undo Last Action" Name="cxmItemUndo" Click="ClickUndo" /> 
&lt;MenuItem Header="Redo Last Action" Name="cxmItemRedo" Click="ClickRedo" /> 
&lt;Separator/> 
&lt;MenuItem Header="Clear All Text" Name="cxmItemClear" Click="ClickClear" /> 
&lt;/ContextMenu> 
&lt;/TextBox.ContextMenu> This TextBox uses a simple custom context menu. The context menu can be disabled by checking the CheckBox above, which simply sets the TextBox.ContextMenu property to null. 
&lt;/TextBox> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The following example shows the implementation code for the context menu defined above, as well as the code that enables and disables the context menu. The Opened event is used to dynamically enable or disable certain commands depending on the current state of the <Run FontWeight="Bold">TextBox</Run>
.
    </Paragraph>

    <Paragraph>To restore the default context menu use the ClearValue method to clear the value of the ContextMenu property. To disable the context menu altogether, set the <Run FontWeight="Bold">ContextMenu</Run>
 property to <Run FontWeight="Bold">null</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>void MenuChange(Object sender, RoutedEventArgs ags) { RadioButton rb = sender as RadioButton; 
if (rb == null || cxm == null) return; 
switch (rb.Name) { case "rbCustom": cxmTextBox.ContextMenu = cxm; 
break; 
case "rbDefault": // Clearing the value of the ContextMenu property // restores the default TextBox context menu. cxmTextBox.ClearValue(ContextMenuProperty); 
break; 
case "rbDisabled": // Setting the ContextMenu propety to // null disables the context menu. cxmTextBox.ContextMenu = null; 
break; 
default: break; 
} } void ClickPaste(Object sender, RoutedEventArgs args) { cxmTextBox.Paste(); 
} void ClickCopy(Object sender, RoutedEventArgs args) { cxmTextBox.Copy(); 
} void ClickCut(Object sender, RoutedEventArgs args) { cxmTextBox.Cut(); 
} void ClickSelectAll(Object sender, RoutedEventArgs args) { cxmTextBox.SelectAll(); 
} void ClickClear(Object sender, RoutedEventArgs args) { cxmTextBox.Clear(); 
} void ClickUndo(Object sender, RoutedEventArgs args) { cxmTextBox.Undo(); 
} void ClickRedo(Object sender, RoutedEventArgs args) { cxmTextBox.Redo(); 
} void ClickSelectLine(Object sender, RoutedEventArgs args) { int lineIndex = cxmTextBox.GetLineIndexFromCharacterIndex(cxmTextBox.CaretIndex); 
int lineStartingCharIndex = cxmTextBox.GetCharacterIndexFromLineIndex(lineIndex); 
int lineLength = cxmTextBox.GetLineLength(lineIndex); 
cxmTextBox.Select(lineStartingCharIndex, lineLength); 
} void CxmOpened(Object sender, RoutedEventArgs args) { // Only allow copy/cut if something is selected to copy/cut. if (cxmTextBox.SelectedText == "") cxmItemCopy.IsEnabled = cxmItemCut.IsEnabled = false; 
else cxmItemCopy.IsEnabled = cxmItemCut.IsEnabled = true; 
// Only allow paste if there is text on the clipboard to paste. if (Clipboard.ContainsText()) cxmItemPaste.IsEnabled = true; 
else cxmItemPaste.IsEnabled = false; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Public Sub MenuChange(ByVal sender As Object, ByVal args As RoutedEventArgs) Dim rb As RadioButton = CType(sender, RadioButton) If myGrid.Children.Contains(cxmTextBox) Then Select Case rb.Name Case "rbCustom" cxmTextBox.ContextMenu = cxm Case "rbDefault" 'Clearing the value of the ContextMenu property 'restores the default TextBox context menu. cxmTextBox.ClearValue(ContextMenuProperty) Case "rbDisabled" 'Setting the ContextMenu propety to 'null disables the context menu. cxmTextBox.ContextMenu = Nothing End Select Else : Return End If End Sub Public Sub ClickPaste(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Paste() End Sub Public Sub ClickCopy(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Copy() End Sub Public Sub ClickCut(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Cut() End Sub Public Sub ClickSelectAll(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.SelectAll() End Sub Public Sub ClickClear(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Clear() End Sub Public Sub ClickUndo(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Undo() End Sub Public Sub ClickRedo(ByVal sender As Object, ByVal args As RoutedEventArgs) cxmTextBox.Redo() End Sub Public Sub ClickSelectLine(ByVal sender As Object, ByVal args As RoutedEventArgs) Dim lineIndex As Integer = cxmTextBox.GetLineIndexFromCharacterIndex(cxmTextBox.CaretIndex) Dim lineStartingCharIndex As Integer = cxmTextBox.GetCharacterIndexFromLineIndex(lineIndex) Dim lineLength As Integer = cxmTextBox.GetLineLength(lineIndex) cxmTextBox.Select(lineStartingCharIndex, lineLength) End Sub Public Sub CxmOpened(ByVal sender As Object, ByVal args As RoutedEventArgs) 'Only allow copy/cut if something is selected to copy/cut. If cxmTextBox.SelectedText = "" Then cxmItemCopy.IsEnabled = cxmItemCut.IsEnabled = False Else cxmItemCopy.IsEnabled = cxmItemCut.IsEnabled = True 'Only allow paste if there is text on the clipboard to paste. If Clipboard.ContainsText() Then cxmItemPaste.IsEnabled = True Else cxmItemPaste.IsEnabled = False End If End If End Sub </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Use a Custom Context Menu with a TextBox to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

