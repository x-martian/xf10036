<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_701246cd_66b7_4d69_ada9_17b3b433d95d"
  Tag     ="Render on a Per Frame Interval Using CompositionTarget"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Render on a Per Frame Interval Using CompositionTarget</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The WPF animation engine provides many features for creating frame-based animation. However, there are application scenarios in which you need finer-grained control over rendering on a per frame basis. The CompositionTarget object provides the ability to create custom animations based on a per-frame callback.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">CompositionTarget</Run>
 is a static class which represents the display surface on which your application is being drawn. The Rendering event is raised each time the application's scene is drawn. The rendering frame rate is the number of times the scene is drawn per second.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>For a complete code sample using <Run FontWeight="Bold">CompositionTarget</Run>
, see Using the CompositionTarget Sample.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">Rendering</Run>
 event fires during the WPF rendering process. The following example shows how you register an EventHandler delegate to the static <Run FontWeight="Bold">Rendering</Run>
 method on <Run FontWeight="Bold">CompositionTarget</Run>
.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Add an event handler to update canvas background color just before it is rendered. CompositionTarget.Rendering += UpdateColor; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>You can use your rendering event handler method to create custom drawing content. This event handler method gets called once per frame. Each time that WPF marshals the persisted rendering data in the <Run>visual tree</Run>
 across to the composition scene graph, your event handler method is called. In addition, if changes to the visual tree force updates to the composition scene graph, your event handler method is also called. Note that your event handler method is called after layout has been computed. However, you can modify layout in your event handler method, which means that layout will be computed once more before rendering.
    </Paragraph>

    <Paragraph>The following example shows how you can provide custom drawing in a <Run FontWeight="Bold">CompositionTarget</Run>
 event handler method. In this case, the background color of the Canvas is drawn with a color value based on the coordinate position of the mouse. If you move the mouse inside the <Run FontWeight="Bold">Canvas</Run>
, its background color changes. In addition, the average frame rate is calculated, based on the current elapsed time and the total number of rendered frames.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>// Called just before frame is rendered to allow custom drawing. protected void UpdateColor(object sender, EventArgs e) { if (_frameCounter++ == 0) { // Starting timing. _stopwatch.Start(); 
} // Determine frame rate in fps (frames per second). long frameRate = (long)(_frameCounter / this._stopwatch.Elapsed.TotalSeconds); 
if (frameRate > 0) { // Update elapsed time, number of frames, and frame rate. myStopwatchLabel.Content = _stopwatch.Elapsed.ToString(); 
myFrameCounterLabel.Content = _frameCounter.ToString(); 
myFrameRateLabel.Content = frameRate.ToString(); 
} // Update the background of the canvas by converting MouseMove info to RGB info. byte redColor = (byte)(_pt.X / 3.0); 
byte blueColor = (byte)(_pt.Y / 2.0); 
myCanvas.Background = new SolidColorBrush(Color.FromRgb(redColor, 0x0, blueColor)); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>You may discover that your custom drawing runs at different speeds on different computers. This is because your custom drawing is not frame-rate independent. Depending on the system you are running and the workload of that system, the <Run FontWeight="Bold">Rendering</Run>
 event may be called a different number of times per second. For information on determining the graphics hardware capability and performance for a device that runs a WPF application, see <Hyperlink NavigateUri="08dd1606-02a2-4122-9351-c0afd2ec3a70.xaml">Graphics Rendering Tiers</Hyperlink>
.
    </Paragraph>

    <Paragraph>Adding or removing a rendering <Run FontWeight="Bold">EventHandler</Run>
 delegate while the event is firing will be delayed until after the event is finished firing. This is consistent with how MulticastDelegate-based events are handled in the Common Language Runtime (CLR). Also note that rendering events are not guaranteed to be called in any particular order. If you have multiple <Run FontWeight="Bold">EventHandler</Run>
 delegates that rely on a particular order, you should register a single <Run FontWeight="Bold">Rendering</Run>
 event and multiplex the delegates in the correct order yourself.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="6dec9657-4d8c-4e46-8c54-40fb80008265.xaml">Windows Presentation Foundation Graphics Rendering Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Perforator
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Render on a Per Frame Interval Using CompositionTarget to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

