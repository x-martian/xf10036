<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_3ddb3b7b_1d6b_4dba_8678_5a68e868aadb"
  Tag     ="Traverse Text Using UI Automation"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Traverse Text Using UI Automation</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic shows how to use Microsoft UI Automation to traverse the textual content of a document by TextUnit increments.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following code example demonstrates how to traverse the content of a <Run>UI Automation text provider</Run>
. The Move method moves the Start and End endpoints of a TextPatternRange. This text range is typically a degenerate range representing the text insertion point.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Each embedded object, such as hyperlink text or image, is counted as a single Word.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>''' ------------------------------------------------------------------- ''' 
&lt;summary> ''' Starts the target application and returns the automation element ''' obtained from the targets window handle. ''' 
&lt;/summary> ''' 
&lt;param name="exe"> ''' The target application. ''' 
&lt;/param> ''' 
&lt;param name="filename"> ''' The text file to be opened in the target application ''' 
&lt;/param> ''' 
&lt;returns> ''' An automation element representing the target application. ''' 
&lt;/returns> ''' ------------------------------------------------------------------- Private Function StartTarget( _ ByVal exe As String, ByVal filename As String) As AutomationElement ' Start text editor and load with a text file. Dim p As Process = Process.Start(exe, filename) ' targetApp --> the root automation element Dim targetApp As AutomationElement targetApp = AutomationElement.FromHandle(p.MainWindowHandle) Return targetApp End Function ... ''' ------------------------------------------------------------------- ''' 
&lt;summary> ''' Obtain the text control of interest from the target application. ''' 
&lt;/summary> ''' 
&lt;param name="targetApp"> ''' The target application. ''' 
&lt;/param> ''' 
&lt;returns> ''' An automation element representing a text control. ''' 
&lt;/returns> ''' ------------------------------------------------------------------- Private Function GetTextElement(ByVal targetApp As AutomationElement) As AutomationElement ' The control type we're looking for; 
in this case 'Document' Dim cond1 As PropertyCondition = _ New PropertyCondition( _ AutomationElement.ControlTypeProperty, _ ControlType.Document) ' The control pattern of interest; 
in this case 'TextPattern'. Dim cond2 As PropertyCondition = _ New PropertyCondition( _ AutomationElement.IsTextPatternAvailableProperty, _ True) Dim textCondition As AndCondition = New AndCondition(cond1, cond2) Dim targetTextElement As AutomationElement = _ targetApp.FindFirst(TreeScope.Descendants, textCondition) ' If targetText is null then a suitable text control was not found. Return targetTextElement End Function ... ''' ------------------------------------------------------------------- ''' 
&lt;summary> ''' Moves a text range a specified number of text units. ''' 
&lt;/summary> ''' 
&lt;param name="targetTextElement"> ''' The automation element representing a text control. ''' 
&lt;/param> ''' 
&lt;param name="textUnit"> ''' The text unit value. ''' 
&lt;/param> ''' 
&lt;param name="units"> ''' The number of text units to move. ''' 
&lt;/param> ''' 
&lt;param name="direction"> ''' Direction to move the text range. Valid values are -1, 0, 1. ''' 
&lt;/param> ''' 
&lt;returns> ''' The number of text units actually moved. This can be less than the ''' number requested if either of the new text range endpoints is ''' greater than or less than the DocumentRange endpoints. ''' 
&lt;/returns> ''' 
&lt;remarks> ''' Moving the text range does not modify the text source in any way. ''' Only the text range starting and ending endpoints are modified. ''' 
&lt;/remarks> ''' ------------------------------------------------------------------- Private Function MoveSelection( _ ByVal targetTextElement As AutomationElement, _ ByVal textUnit As TextUnit, _ ByVal units As Integer, _ ByVal direction As Integer) As Integer Dim textPattern As TextPattern = _ DirectCast( _ targetTextElement.GetCurrentPattern(textPattern.Pattern), _ TextPattern) If (textPattern Is Nothing) Then ' Target control doesn't support TextPattern. Return -1 End If Dim currentSelection As TextPatternRange() = _ textPattern.GetSelection() If (currentSelection.Length > 1) Then ' For this example, we cannot move more than one text range. Return -1 End If Return currentSelection(0).Move(textUnit, Math.Sign(direction) * units) End Function </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>/// ------------------------------------------------------------------- /// 
&lt;summary> /// Starts the target application and returns the automation element /// obtained from the targets window handle. /// 
&lt;/summary> /// 
&lt;param name="exe"> /// The target application. /// 
&lt;/param> /// 
&lt;param name="filename"> /// The text file to be opened in the target application /// 
&lt;/param> /// 
&lt;returns> /// An automation element representing the target application. /// 
&lt;/returns> /// ------------------------------------------------------------------- private AutomationElement StartTarget(string exe, string filename) { // Start text editor and load with a text file. Process p = Process.Start(exe, filename); 
// targetApp --> the root automation element AutomationElement targetApp = AutomationElement.FromHandle(p.MainWindowHandle); 
return targetApp; 
} ... /// ------------------------------------------------------------------- /// 
&lt;summary> /// Obtain the text control of interest from the target application. /// 
&lt;/summary> /// 
&lt;param name="targetApp"> /// The target application. /// 
&lt;/param> /// 
&lt;returns> /// An automation element representing a text control. /// 
&lt;/returns> /// ------------------------------------------------------------------- private AutomationElement GetTextElement(AutomationElement targetApp) { // The control type we're looking for; 
in this case 'Document' PropertyCondition cond1 = new PropertyCondition( AutomationElement.ControlTypeProperty, ControlType.Document); 
// The control pattern of interest; 
in this case 'TextPattern'. PropertyCondition cond2 = new PropertyCondition( AutomationElement.IsTextPatternAvailableProperty, true); 
AndCondition textCondition = new AndCondition(cond1, cond2); 
AutomationElement targetTextElement = targetApp.FindFirst(TreeScope.Descendants, textCondition); 
// If targetText is null then a suitable text control was not found. return targetTextElement; 
} ... /// ------------------------------------------------------------------- /// 
&lt;summary> /// Moves a text range a specified number of text units. The text range /// is the current selection. /// 
&lt;/summary> /// 
&lt;param name="targetTextElement"> /// The automation element representing a text control. /// 
&lt;/param> /// 
&lt;param name="textUnit"> /// The text unit value. /// 
&lt;/param> /// 
&lt;param name="units"> /// The number of text units to move. /// 
&lt;/param> /// 
&lt;param name="direction"> /// Direction to move the text range. Valid values are -1, 0, 1. /// 
&lt;/param> /// 
&lt;returns> /// The number of text units actually moved. This can be less than the /// number requested if either of the new text range endpoints is /// greater than or less than the DocumentRange endpoints. /// 
&lt;/returns> /// 
&lt;remarks> /// Moving the text range does not modify the text source in any way. /// Only the text range starting and ending endpoints are modified. /// 
&lt;/remarks> /// ------------------------------------------------------------------- private Int32 MoveSelection( AutomationElement targetTextElement, TextUnit textUnit, int units, int direction) { TextPattern textPattern = targetTextElement.GetCurrentPattern(TextPattern.Pattern) as TextPattern; 
if (textPattern == null) { // Target control doesn't support TextPattern. return -1; 
} TextPatternRange[] currentSelection = textPattern.GetSelection(); 
if (currentSelection.Length > 1) { // For this example, we cannot move more than one text range. return -1; 
} return currentSelection[0].Move(textUnit, Math.Sign(direction) * units); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Any method using <Run FontWeight="Bold">TextUnit</Run>
 will deprecate up to the next supported <Run FontWeight="Bold">TextUnit</Run>
 if the given <Run FontWeight="Bold">TextUnit</Run>
 is not supported by the control.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="8bdd1a73-1ecb-4a05-a891-a7827ebb767f.xaml">Add Content to a Text Box Using UI Automation</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="b77693f5-87bb-4b29-a297-05ff882e2044.xaml">Find and Highlight Text Using UI Automation</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="41787927-df1f-4f4a-aba3-641662854fc4.xaml">UI Automation TextPattern Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="cc229b33-234b-469b-ad60-f0254f32d45d.xaml">UI Automation Control Patterns Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="571561d8-5f49-43a9-a054-87735194e013.xaml">UI Automation Control Patterns for Clients</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Traverse Text Using UI Automation to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

