<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_89c71692_4f43_4057_b611_67c6a8a863a2"
  Tag     ="Freezable Objects Overview"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Freezable Objects Overview</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This topic describes how to effectively use and create Freezable objects, which provide special features that can help improve application performance. Examples of freezable objects include brushes, pens, transformations, geometries, and animations. 
    </Paragraph>

    <Paragraph>This topic contains the following sections:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Hyperlink TargetName="whatisafreezable">What is a Freezable?</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="frozenfreezables">Using Freezables</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="createyourownfreezableclass">Creating Your Own Freezable Class</Hyperlink>

        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Hyperlink TargetName="seeAlsoSection">Related Topics</Hyperlink>

        </Paragraph>

      </ListItem>

    </List>

    <Paragraph FontSize="22">What is a Freezable?
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">Freezable</Run>
 is a special type of object that has two states: unfrozen and frozen. When unfrozen, a <Run FontWeight="Bold">Freezable</Run>
 appears to behave like any other object. When frozen, a <Run FontWeight="Bold">Freezable</Run>
 can no longer be modified. 
    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">Freezable</Run>
 provides a Changed event to notify observers of any modifications to the object. Freezing a <Run FontWeight="Bold">Freezable</Run>
 can improve its performance, because it no longer needs to spend resources on change notifications. A frozen <Run FontWeight="Bold">Freezable</Run>
 can also be shared across threads, while an unfrozen <Run FontWeight="Bold">Freezable</Run>
 cannot.
    </Paragraph>

    <Paragraph>Although the <Run FontWeight="Bold">Freezable</Run>
 class has many applications, most <Run FontWeight="Bold">Freezable</Run>
 objects in Windows Presentation Foundation (WPF) are related to the graphics sub-system.
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">Freezable</Run>
 class makes it easier to use certain graphics system objects and can help improve application performance. Examples of types that inherit from <Run FontWeight="Bold">Freezable</Run>
 include the Brush, Transform, and Geometry classes. Because they contain unmanaged resources, the system must monitor these objects for modifications, and then update their corresponding unmanaged resources when there is a change to the original object. Even if you don't actually modify a graphics system object, the system must still spend some of its resources monitoring the object, in case you do change it. 
    </Paragraph>

    <Paragraph>For example, suppose you create a SolidColorBrush brush and use it to paint the background of a button.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
SolidColorBrush myBrush = new SolidColorBrush(Colors.Yellow); 
myButton.Background = myBrush; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>When the button is rendered, the WPF graphics sub-system uses the information you provided to paint a group of pixels to create the appearance of a button. Although you used a solid color brush to describe how the button should be painted, your solid color brush doesn't actually do the painting. The graphics system generates fast, low-level objects for the button and the brush, and it is those objects that actually appear on the screen. 
    </Paragraph>

    <Paragraph>If you were to modify the brush, those low-level objects would have to be regenerated. The freezable class is what gives a brush the ability to find its corresponding generated, low-level objects and to update them when it changes. When this ability is enabled, the brush is said to be "unfrozen."
    </Paragraph>

    <Paragraph>A freezable's Freeze method enables you to disable this self-updating ability. You can use this method to make the brush become "frozen," or unmodifiable.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Not every Freezable object can be frozen. To avoid throwing an InvalidOperationException, check the value of the Freezable object's CanFreeze property to determine whether it can be frozen before attempting to freeze it.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>if (myBrush.CanFreeze) { // Makes the brush unmodifiable. myBrush.Freeze(); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>When you no longer need to modify a freezable, freezing it provides performance benefits. If you were to freeze the brush in this example, the graphics system would no longer need to monitor it for changes. The graphics system can also make other optimizations, because it knows the brush won't change. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>For convenience, freezable objects remain unfrozen unless you explicitly freeze them.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Using Freezables
    </Paragraph>

    <Paragraph>Using an unfrozen freezable is like using any other type of object. In the following example, the color of a <Run FontWeight="Bold">SolidColorBrush</Run>
 is changed from yellow to red after it's used to paint the background of a button. The graphics system works behind the scenes to automatically change the button from yellow to red the next time the screen is refreshed. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
SolidColorBrush myBrush = new SolidColorBrush(Colors.Yellow); 
myButton.Background = myBrush; 
// Changes the button's background to red. myBrush.Color = Colors.Red; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="18">Freezing a Freezable
    </Paragraph>

    <Paragraph>To make a <Run FontWeight="Bold">Freezable</Run>
 unmodifiable, you call its <Run FontWeight="Bold">Freeze</Run>
 method. When you freeze an object that contains freezable objects, those objects are frozen as well. For example, if you freeze a PathGeometry, the figures and segments it contains would be frozen too.
    </Paragraph>

    <Paragraph>A Freezable <Run FontWeight="Bold">can't</Run>
 be frozen if any of the following are true:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>It has animated or data bound properties. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It has properties set by a dynamic resource. (See the <Hyperlink NavigateUri="91580b89-a0a8-4889-aecb-fddf8e63175f.xaml">Resources Overview</Hyperlink>
 for more information about dynamic resources.)
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>It contains <Run FontWeight="Bold">Freezable</Run>
 sub-objects that can't be frozen. 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>If these conditions are false, and you don't intend to modify the <Run FontWeight="Bold">Freezable</Run>
, then you should freeze it to gain the performance benefits described earlier.
    </Paragraph>

    <Paragraph>Once you call a freezable's <Run FontWeight="Bold">Freeze</Run>
 method, it can no longer be modified. Attempting to modify a frozen object causes an InvalidOperationException to be thrown. The following code throws an exception, because we attempt to modify the brush after it's been frozen.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
SolidColorBrush myBrush = new SolidColorBrush(Colors.Yellow); 
if (myBrush.CanFreeze) { // Makes the brush unmodifiable. myBrush.Freeze(); 
} myButton.Background = myBrush; 
try { // Throws an InvalidOperationException, because the brush is frozen. myBrush.Color = Colors.Red; 
}catch(InvalidOperationException ex) { MessageBox.Show("Invalid operation: " + ex.ToString()); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To avoid throwing this exception, you can use the IsFrozen method to determine whether a <Run FontWeight="Bold">Freezable</Run>
 is frozen.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
SolidColorBrush myBrush = new SolidColorBrush(Colors.Yellow); 
if (myBrush.CanFreeze) { // Makes the brush unmodifiable. myBrush.Freeze(); 
} myButton.Background = myBrush; 
if (myBrush.IsFrozen) // Evaluates to true. { // If the brush is frozen, create a clone and // modify the clone. SolidColorBrush myBrushClone = myBrush.Clone(); 
myBrushClone.Color = Colors.Red; 
myButton.Background = myBrushClone; 
} else { // If the brush is not frozen, // it can be modified directly. myBrush.Color = Colors.Red; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>In the preceding code example, a modifiable copy was made of a frozen object using the Clone method. The next section discusses cloning in more detail.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Note</Run>
   Because a frozen freezable cannot be animated, the animation system will automatically create modifiable clones of frozen <Run FontWeight="Bold">Freezable</Run>
 objects when you try to animate them with a Storyboard. To eliminate the performance overhead caused by cloning, leave an object unfrozen if you intend to animate it. For more information about animating with storyboards, see the <Hyperlink NavigateUri="1a698c3c-30f1-4b30-ae56-57e8a39811bd.xaml">Storyboards Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="18">Freezing from Markup
    </Paragraph>

    <Paragraph>To freeze a <Run FontWeight="Bold">Freezable</Run>
 object declared in markup, you use the <Run>PresentationOptions:Freeze</Run>
 attribute. In the following example, a <Run FontWeight="Bold">SolidColorBrush</Run>
 is declared as a page resource and frozen. It is then used to set the background of a button. 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_89c71692_4f43_4057_b611_67c6a8a863a2_0">
                <cc:SnippetViewer.SnippetText>
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="PresentationOptions"> 
&lt;Page.Resources> 
&lt;!-- This resource is frozen. --> 
&lt;SolidColorBrush x:Key="MyBrush" PresentationOptions:Freeze="True" Color="Red" /> 
&lt;/Page.Resources> 
&lt;StackPanel> 
&lt;Button Content="A Button" Background="{StaticResource MyBrush}"> 
&lt;/Button> 
&lt;/StackPanel> 
&lt;/Page> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>To use the <Run>Freeze</Run>
 attribute, you must map to the presentation options namespace: <Run>http://schemas.microsoft.com/winfx/2006/xaml/presentation/options</Run>
. <Run>PresentationOptions</Run>
 is the recommended prefix for mapping this namespace:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Because not all XAML readers recognize this attribute, it's recommended that you use the <Hyperlink NavigateUri="acd9a6ef-b7ca-4146-abb6-60f3b366e9ec.xaml">mc:Ignorable Attribute</Hyperlink>
 to mark the <Run>Presentation:Freeze</Run>
 attribute as ignorable: 
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="PresentationOptions"</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For more information, see the <Hyperlink NavigateUri="acd9a6ef-b7ca-4146-abb6-60f3b366e9ec.xaml">mc:Ignorable Attribute</Hyperlink>
 page.
    </Paragraph>

    <Paragraph FontSize="18">"Unfreezing" a Freezable
    </Paragraph>

    <Paragraph>Once frozen, a <Run FontWeight="Bold">Freezable</Run>
 can never be modified or unfrozen; 
however, you can create an unfrozen clone using the <Run FontWeight="Bold">Clone</Run>
 or CloneCurrentValue method.
    </Paragraph>

    <Paragraph>In the following example, the button's background is set with a brush and that brush is then frozen. An unfrozen copy is made of the brush using the <Run FontWeight="Bold">Clone</Run>
 method. The clone is modified and used to change the button's background from yellow to red.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Button myButton = new Button(); 
SolidColorBrush myBrush = new SolidColorBrush(Colors.Yellow); 
// Freezing a Freezable before it provides // performance improvements if you don't // intend on modifying it. if (myBrush.CanFreeze) { // Makes the brush unmodifiable. myBrush.Freeze(); 
} myButton.Background = myBrush; 
// If you need to modify a frozen brush, // the Clone method can be used to // create a modifiable copy. SolidColorBrush myBrushClone = myBrush.Clone(); 
// Changing myBrushClone does not change // the color of myButton, because its // background is still set by myBrush. myBrushClone.Color = Colors.Red; 
// Replacing myBrush with myBrushClone // makes the button change to red. myButton.Background = myBrushClone; 
</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>Regardless of which clone method you use, animations are never copied to the new <Run FontWeight="Bold">Freezable</Run>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The <Run FontWeight="Bold">Clone</Run>
 and <Run FontWeight="Bold">CloneCurrentValue</Run>
 methods produce deep copies of the freezable. If the freezable contains other frozen freezable objects, they are also cloned and made modifiable. For example, if you clone a frozen <Run FontWeight="Bold">PathGeometry</Run>
 to make it modifiable, the figures and segments it contains are also copied and made modifiable. 
    </Paragraph>

    <Paragraph FontSize="22">Creating Your Own Freezable Class
    </Paragraph>

    <Paragraph>A class that derives from <Run FontWeight="Bold">Freezable</Run>
 gains the following features.
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>Special states: a read-only (frozen) and a writable state.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Thread safety: a frozen <Run FontWeight="Bold">Freezable</Run>
 can be shared across threads.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Detailed change notification: Unlike other DependencyObjects, Freezable objects provide change notifications when sub-property values change. 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Easy cloning: the Freezable class has already implemented several methods that produce deep clones.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>A <Run FontWeight="Bold">Freezable</Run>
 is a type of <Run FontWeight="Bold">DependencyObject</Run>
, and therefore uses the dependency property system. Your class properties don't have to be dependency properties, but using dependency properties will reduce the amount of code you have to write, because the <Run FontWeight="Bold">Freezable</Run>
 class was designed with dependency properties in mind. For more information about the dependency property system, see the <Hyperlink NavigateUri="d119d00c-3afb-48d6-87a0-c4da4f83dee5.xaml">Dependency Properties Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph>Every <Run FontWeight="Bold">Freezable</Run>
 subclass must override the CreateInstanceCore method. If your class uses dependency properties for all its data, you're finished.
    </Paragraph>

    <Paragraph>If your class contains non-dependency property data members, you must also override the following methods:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>CloneCore 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>CloneCurrentValueCore 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>GetAsFrozenCoree
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>GetCurrentValueAsFrozenCore 
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>FreezeCore 
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>You must also observe the following rules for accessing and writing to data members that are not dependency properties: 
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph>At the beginning of any API that reads non-dependency property data members, call the ReadPreamble method.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>At the beginning of any API that writes non-dependency property data members, call the WritePreamble method. (Once you've called <Run FontWeight="Bold">WritePreamble</Run>
 in an API, you don't need to make an additional call to <Run FontWeight="Bold">ReadPreamble</Run>
 if you also read non-dependency property data members.)
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph>Immediately after writing to non-dependency property data members, call the WritePostscript method.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>If your class contains non-dependency-property data members that are <Run FontWeight="Bold">DependencyObject</Run>
 objects, you must also call the OnFreezablePropertyChanged method each time you change on of their values, even if you're setting the member to <Run FontWeight="Bold">null</Run>
. 
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">Note</Run>
   It's very important that you begin each <Run FontWeight="Bold">Freezable</Run>
 method you override with a call to the base implementation.
    </Paragraph>

    <Paragraph>For an example of a custom <Run FontWeight="Bold">Freezable</Run>
 class, see the Custom Animation Sample. 
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>Freezable
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="d119d00c-3afb-48d6-87a0-c4da4f83dee5.xaml">Dependency Properties Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="e6bfcfac-b10d-4f58-9f77-a864c2a2938f.xaml">Custom Dependency Properties</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Custom Animation Sample
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about Freezable Objects Overview to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

