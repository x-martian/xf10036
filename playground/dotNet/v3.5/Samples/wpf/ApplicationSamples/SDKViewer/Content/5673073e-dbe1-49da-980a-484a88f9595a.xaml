<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_5673073e_dbe1_49da_980a_484a88f9595a"
  Tag     ="Set Up Notification of Binding Updates"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Set Up Notification of Binding Updates</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to set up to be notified when the <Run>binding target</Run>
 (target) or the <Run>binding source</Run>
 (source) property of a binding has been updated.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>Windows Presentation Foundation (WPF) raises a data update event each time that the binding source or target has been updated. Internally, this event is used to inform the user interface (UI) that it should update, because the bound data has changed. Note that for these events to work, and also for one-way or two-way binding to work properly, you need to implement your data class using the INotifyPropertyChanged interface. For more information, see <Hyperlink NavigateUri="30b59d9e-8c3a-4349-aa82-4be837e841cf.xaml">How to: Implement Property Change Notification</Hyperlink>
.
    </Paragraph>

    <Paragraph>Set the NotifyOnTargetUpdated or NotifyOnSourceUpdated property (or both) to <Run FontWeight="Bold">true</Run>
 in the binding. The handler you provide to listen for this event must be attached directly to the element where you want to be informed of changes, or to the overall data context if you want to be aware that anything in the context has changed.
    </Paragraph>

    <Paragraph>For the complete sample, see Binding Modes Sample.
    </Paragraph>

    <Paragraph>Here is an example that shows how to set up for notification when a target property has been updated.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock Grid.Row="1" Grid.Column="1" Name="RentText" Text="{Binding Path=Rent, Mode=OneWay, NotifyOnTargetUpdated=True}" TargetUpdated="OnTargetUpdated"/> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>You can then assign a handler based on the EventHandler
&lt;T> delegate, <Run FontStyle="italic">OnTargetUpdated</Run>
 in this example, to handle the event:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public void OnTargetUpdated(Object sender, DataTransferEventArgs args) { FrameworkElement fe = sender as FrameworkElement; 
infoText.Text = ""; 
infoText.Text += args.Property.Name + " property of a " + args.Property.OwnerType.Name; 
infoText.Text += " element ("; 
infoText.Text += fe.Name; 
infoText.Text += ") updated..."; 
infoText.Text += System.DateTime.Now.ToLongDateString(); 
infoText.Text += " at "; 
infoText.Text += System.DateTime.Now.ToLongTimeString(); 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Parameters of the event can be used to determine details about the property that changed (such as the type or the specific element if the same handler is attached to more than one element), which can be useful if there are multiple bound properties on a single element.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Data Binding Overviews
      <LineBreak/>Data Binding Samples
      <LineBreak/><Hyperlink NavigateUri="a3b2563e-d879-41a7-9dfd-ac56b27fdcad.xaml">Data Binding How-to Topics</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Set Up Notification of Binding Updates to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

