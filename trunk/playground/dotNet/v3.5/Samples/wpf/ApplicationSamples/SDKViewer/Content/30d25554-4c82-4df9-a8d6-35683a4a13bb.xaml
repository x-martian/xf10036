<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_30d25554_4c82_4df9_a8d6_35683a4a13bb"
  Tag     ="Change the TextWrapping Property Programmatically"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Change the TextWrapping Property Programmatically</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>The following code example shows how to change the value of the TextWrapping property programmatically using Microsoft Visual Basic .NET.
    </Paragraph>

    <Paragraph>Four Buttons are placed within a StackPanel element in Extensible Application Markup Language (XAML). Each Button's  Click event corresponds with a subprocedure defined in the Microsoft Visual Basic .NET code, below. After the TextWrapping value associated with each event is invoked, the TextBlock identified by the Name  <Run>txt2</Run>
 is updated to reflect the change in the property.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;StackPanel Orientation="Horizontal" Margin="0,0,0,20"> 
&lt;Button Name="btn1" Background="Silver" Width="100" Click="Wrap">Wrap
&lt;/Button> 
&lt;Button Name="btn2" Background="Silver" Width="100" Click="NoWrap">NoWrap
&lt;/Button> 
&lt;Button Name="btn4" Background="Silver" Width="100" Click="WrapWithOverflow">WrapWithOverflow
&lt;/Button> 
&lt;/StackPanel> 
&lt;TextBlock Name="txt2" TextWrapping="Wrap" Margin="0,0,0,20" Foreground="Black"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Lorem ipsum dolor sit aet, consectetuer adipiscing elit. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The events associated with the Button clicks defined above are handled in Microsoft Visual Basic .NET Sub procedures. Each Click changes the value of the TextWrapping property to the value specified in the procedure and updates the element <Run>txt1</Run>
 to reflect the change in the property.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>C# </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>public void Wrap(object sender, RoutedEventArgs e) { txt2.TextWrapping = System.Windows.TextWrapping.Wrap; 
txt1.Text = "The TextWrap property is currently set to Wrap."; 
} public void NoWrap(object sender, RoutedEventArgs e) { txt2.TextWrapping = System.Windows.TextWrapping.NoWrap; 
txt1.Text = "The TextWrap property is currently set to NoWrap."; 
} public void WrapWithOverflow(object sender, RoutedEventArgs e) { txt2.TextWrapping = System.Windows.TextWrapping.WrapWithOverflow; 
txt1.Text = "The TextWrap property is currently set to WrapWithOverflow."; 
} </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>Visual Basic </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>Sub Wrap(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) txt2.TextWrapping = System.Windows.TextWrapping.Wrap txt1.Text = "The TextWrap property is currently set to Wrap." End Sub Sub NoWrap(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) txt2.TextWrapping = System.Windows.TextWrapping.NoWrap txt1.Text = "The TextWrap property is currently set to NoWrap." End Sub Sub WrapWithOverflow(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) txt2.TextWrapping = System.Windows.TextWrapping.WrapWithOverflow txt1.Text = "The TextWrap property is currently set to WrapWithOverflow." End Sub </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>TextWrapping
      <LineBreak/>TextWrapping
      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Change the TextWrapping Property Programmatically to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

