<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_7dcd018f_16aa_4870_8e47_c1b4ea31e574"
  Tag     ="Bind to XML Data Using an XMLDataProvider and XPath Queries"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>How to: Bind to XML Data Using an XMLDataProvider and XPath Queries</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>This example shows how to bind to XML data using an XmlDataProvider.
    </Paragraph>

    <Paragraph>With an <Run FontWeight="Bold">XmlDataProvider</Run>
, the underlying data that can be accessed through data binding in your application can be any tree of XML nodes. In other words, an <Run FontWeight="Bold">XmlDataProvider</Run>
 provides a convenient way to use any tree of XML nodes as a <Run>binding source</Run>
.
    </Paragraph>

    <Paragraph FontSize="22">Example
    </Paragraph>

    <Paragraph>In the following example, the data is embedded directly as an XML <Run FontStyle="italic">data island</Run>
 within the Resources section. An XML data island must be wrapped in <Run>
&lt;x:XData></Run>
 tags and always have a single root node, which is <Run FontStyle="italic">Inventory</Run>
 in this example.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Note: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>The root node of the XML data has an <Run FontWeight="Bold">xmlns</Run>
 attribute that sets the XML namespace to an empty string. This is a requirement for applying XPath queries to a data island that is inline within the XAML page. In this inline case, the XAML, and thus the data island, inherits the System.Windows namespace. Because of this, you need to set the namespace blank to keep XPath queries from being qualified by the System.Windows namespace, which would misdirect the queries.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <BlockUIContainer>
              <cc:SnippetViewer Name="_7dcd018f_16aa_4870_8e47_c1b4ea31e574_1">
                <cc:SnippetViewer.SnippetText>
&lt;StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Background="Cornsilk"> 
&lt;StackPanel.Resources> 
&lt;XmlDataProvider x:Key="InventoryData" XPath="Inventory/Books"> 
&lt;x:XData> 
&lt;Inventory xmlns=""> 
&lt;Books> 
&lt;Book ISBN="0-7356-0562-9" Stock="in" Number="9"> 
&lt;Title>XML in Action
&lt;/Title> 
&lt;Summary>XML Web Technology
&lt;/Summary> 
&lt;/Book> 
&lt;Book ISBN="0-7356-1370-2" Stock="in" Number="8"> 
&lt;Title>Programming Microsoft Windows With C#
&lt;/Title> 
&lt;Summary>C# Programming using the .NET Framework
&lt;/Summary> 
&lt;/Book> 
&lt;Book ISBN="0-7356-1288-9" Stock="out" Number="7"> 
&lt;Title>Inside C#
&lt;/Title> 
&lt;Summary>C# Language Programming
&lt;/Summary> 
&lt;/Book> 
&lt;Book ISBN="0-7356-1377-X" Stock="in" Number="5"> 
&lt;Title>Introducing Microsoft .NET
&lt;/Title> 
&lt;Summary>Overview of .NET Technology
&lt;/Summary> 
&lt;/Book> 
&lt;Book ISBN="0-7356-1448-2" Stock="out" Number="4"> 
&lt;Title>Microsoft C# Language Specifications
&lt;/Title> 
&lt;Summary>The C# language definition
&lt;/Summary> 
&lt;/Book> 
&lt;/Books> 
&lt;CDs> 
&lt;CD Stock="in" Number="3"> 
&lt;Title>Classical Collection
&lt;/Title> 
&lt;Summary>Classical Music
&lt;/Summary> 
&lt;/CD> 
&lt;CD Stock="out" Number="9"> 
&lt;Title>Jazz Collection
&lt;/Title> 
&lt;Summary>Jazz Music
&lt;/Summary> 
&lt;/CD> 
&lt;/CDs> 
&lt;/Inventory> 
&lt;/x:XData> 
&lt;/XmlDataProvider> 
&lt;/StackPanel.Resources> 
&lt;TextBlock FontSize="18" FontWeight="Bold" Margin="10" HorizontalAlignment="Center">XML Data Source Sample
&lt;/TextBlock> 
&lt;ListBox Width="400" Height="300" Background="Honeydew"> 
&lt;ListBox.ItemsSource> 
&lt;Binding Source="{StaticResource InventoryData}" XPath="*[@Stock='out'] | *[@Number>=8 or @Number=3]"/> 
&lt;/ListBox.ItemsSource> 
&lt;!--Alternatively, you can do the following. --> 
&lt;!--
&lt;ListBox Width="400" Height="300" Background="Honeydew" ItemsSource="{Binding Source={StaticResource InventoryData}, XPath=*[@Stock\=\'out\'] | *[@Number>\=8 or @Number\=3]}">--> 
&lt;ListBox.ItemTemplate> 
&lt;DataTemplate> 
&lt;TextBlock FontSize="12" Foreground="Red"> 
&lt;TextBlock.Text> 
&lt;Binding XPath="Title"/> 
&lt;/TextBlock.Text> 
&lt;/TextBlock> 
&lt;/DataTemplate> 
&lt;/ListBox.ItemTemplate> 
&lt;/ListBox> 
&lt;/StackPanel> 
                </cc:SnippetViewer.SnippetText>
              </cc:SnippetViewer>

            </BlockUIContainer>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>As shown in this example, to create the same binding declaration in attribute syntax you must escape the special characters properly. For more information, see <Hyperlink NavigateUri="6896d0ce-74f7-420a-9ab4-de9bbf390e8d.xaml">&amp; 
and Related Character Entities</Hyperlink>
.
    </Paragraph>

    <Paragraph>The ListBox will show the following items when this example is run. These are the <Run FontStyle="italic">Title</Run>
s of all of the elements under <Run FontStyle="italic">Books</Run>
 with either a <Run FontStyle="italic">Stock</Run>
 value of "<Run FontStyle="italic">out</Run>
" or a <Run FontStyle="italic">Number</Run>
 value of 3 or greater than or equals to 8. Notice that no <Run FontStyle="italic">CD</Run>
 items are returned because the XPath value set on the <Run FontWeight="Bold">XmlDataProvider</Run>
 indicates that only the <Run FontStyle="italic">Books</Run>
 elements should be exposed (essentially setting a filter).
    </Paragraph>

    <Paragraph>In this example, the book titles are displayed because the XPath of the TextBlock binding in the DataTemplate is set to "<Run FontStyle="italic">Title</Run>
". If you want to display the value of an attribute, such as the <Run FontStyle="italic">ISBN</Run>
, you would set that <Run FontWeight="Bold">XPath</Run>
 value to "<Run>@ISBN</Run>
".
    </Paragraph>

    <Paragraph>The <Run FontWeight="Bold">XPath</Run>
 properties in WPF are handled by the XmlNode.SelectNodes method. You can modify the <Run FontWeight="Bold">XPath</Run>
 queries to get different results. Here are some examples for the <Run FontWeight="Bold">XPath</Run>
 query on the bound <Run FontWeight="Bold">ListBox</Run>
 from the previous example:
    </Paragraph>

    <List MarkerStyle="Disc">
      <ListItem>
        <Paragraph><Run>XPath="Book[1]"</Run>
 will return the first book element ("XML in Action"). Note that <Run FontWeight="Bold">XPath</Run>
 indexes are based on 1, not 0.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>XPath="Book[@*]"</Run>
 will return all book elements with any attributes.
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>XPath="Book[last()-1]"</Run>
 will return the second to last book element ("Introducing Microsoft .NET").
        </Paragraph>

      </ListItem>

      <ListItem>
        <Paragraph><Run>XPath="*[position()>3]"</Run>
 will return all of the book elements except for the first 3.
        </Paragraph>

      </ListItem>

    </List>

    <Paragraph>When you run an <Run FontWeight="Bold">XPath</Run>
 query, it returns an XmlNode or a list of XmlNodes. XmlNode is a common language runtime (CLR) object, which means you can use the Path property to bind to the common language runtime (CLR) properties. Consider the previous example again. If the rest of the example stays the same and you change the <Run FontWeight="Bold">TextBlock</Run>
 binding to the following, you will see the names of the returned XmlNodes in the <Run FontWeight="Bold">ListBox</Run>
. In this case, the name of all the returned nodes is "<Run FontStyle="italic">Book</Run>
".
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;TextBlock FontSize="12" Foreground="Red"> 
&lt;TextBlock.Text> 
&lt;Binding Path="Name"/> 
&lt;/TextBlock.Text> 
&lt;/TextBlock> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete code sample, see XML Data Source Sample.
    </Paragraph>

    <Paragraph>In some applications, embedding the XML as a data island within the source of the XAML page can be inconvenient because the exact content of the data must be known at compile time. Therefore, obtaining the data from an external XML file is also supported, as in the following example:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>XAML </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;XmlDataProvider x:Key="BookData" Source="data\bookdata.xml" XPath="Books"/> </Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>For the complete code sample, see XML Data Source with Embedded Data File Sample.
    </Paragraph>

    <Paragraph>If the XML data resides in a remote XML file, you would define access to the data by assigning an appropriate URL to the Source attribute as follows:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Run>
&lt;XmlDataProvider x:Key="BookData" Source="http://MyUrl" XPath="Books"/></Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Tasks
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="eb8dbdd8-5871-42bb-a16b-04e655fea677.xaml">How to: Implement the Master-Detail Scenario with XML Data</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph>ObjectDataProvider
      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="2df2cd11-6aac-4bdf-ab7b-ea5f464cd5ca.xaml">Binding Sources Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="c707c95f-7811-401d-956e-2fffd019a211.xaml">Data Binding Overview</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Other Resources
    </Paragraph>

    <Paragraph>Data Binding Overviews
      <LineBreak/>Data Binding Samples
      <LineBreak/><Hyperlink NavigateUri="a3b2563e-d879-41a7-9dfd-ac56b27fdcad.xaml">Data Binding How-to Topics</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Bind to XML Data Using an XMLDataProvider and XPath Queries to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

