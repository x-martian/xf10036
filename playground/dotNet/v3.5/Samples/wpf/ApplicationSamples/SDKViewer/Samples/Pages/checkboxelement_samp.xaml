<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Sample Title" x:Class="checkboxelement.Page1" Loaded="OnLoaded">
    <Page.Resources>
        <Style x:Key="itemHeaderStyler">
            <Setter Property="ListBoxItem.Margin" Value="0,2,0,5" />
            <Setter Property="ListBoxItem.Padding" Value="2" />
            <Setter Property="ListBoxItem.FontFamily" Value="Verdana" />
            <Setter Property="ListBoxItem.FontWeight" Value="Bold" />
            <Setter Property="ListBoxItem.FontSize" Value="12" />
        </Style>
        <Style x:Key="imageStyler">
            <Setter Property="TextBlock.Margin" Value="15" />
        </Style>
        <Style x:Key="HeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="TabStyle">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabStyle2">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="TabItem.Foreground" Value="Black" />
        </Style>
        <Style x:Key="SubHeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="16" />
            <Setter Property="TextBlock.Foreground" Value="DarkSlateBlue" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="DisStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="8" />
            <Setter Property="TextBlock.Foreground" Value="Gray" />
            <Setter Property="TextBlock.Margin" Value="5,0,5,0" />
        </Style>
        <Style x:Key="mainContentStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="5,10,5,10" />
        </Style>
        <Style x:Key="tocStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.Margin" Value="0" />
        </Style>
        <Style x:Key="CodeSnippetParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Courier New" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10,0,10,0" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="noteParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="TCStyle">
            <Setter Property="TabControl.Margin" Value="10" />
        </Style>
    </Page.Resources>
    <TabControl MinHeight="500" MaxHeight="700" MinWidth="400" Style="{StaticResource TCStyle}">
        <TabItem Style="{StaticResource TabStyle}" Header="Check Box Elements Sample" IsSelected="true">
            <StackPanel>
                <TextBlock Style="{StaticResource HeaderStyle}">Check Box Elements</TextBlock>
                <TextBlock Style="{StaticResource mainContentStyle}">The CheckBox control is used to accept input and can be used in a variety of different user interface scenarios.</TextBlock>
            </StackPanel>
        </TabItem>
        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
 
&lt;StackPanel  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="Checkbox2.Pane1"
    Height="900"
    &gt;
  &lt;Grid ShowGridLines ="false" Background ="White"&gt;
    &lt;ColumnDefinition Width="300px"/&gt;
    &lt;ColumnDefinition Width="250px"/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;
    &lt;RowDefinition/&gt;

    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="0" FontSize="20"&gt;Check Boxes&lt;/TextBlock&gt;
    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" FontSize="14"&gt;The following check box examples demonstrate:&lt;/TextBlock&gt;
    &lt;CheckBox Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="2" Name="cb1" FontSize="12" IsCheckedChanged="HandleChange"&gt;Check Box&lt;/CheckBox&gt;
    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Single check box. Clicking the box toggles its state from checked to unchecked.&lt;/TextBlock&gt;
    &lt;DockPanel Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="3" Grid.RowSpan="2"&gt;
      &lt;CheckBox Name="cb2" FontSize="12" DockPanel.Dock="Top"&gt;Yes&lt;/CheckBox&gt;
      &lt;CheckBox Name="cb3" FontSize="12" DockPanel.Dock="Top"&gt;No&lt;/CheckBox&gt;
      &lt;CheckBox Name="cb4" FontSize="12" DockPanel.Dock="Top"&gt;Maybe&lt;/CheckBox&gt;
      &lt;CheckBox Name="cb5" FontSize="12" DockPanel.Dock="Top"&gt;I have no opinion.&lt;/CheckBox&gt;  
    &lt;/DockPanel&gt;
    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="3" Grid.RowSpan="2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Group of check boxes. You may choose as many items as you wish in a group of check boxes.&lt;/TextBlock&gt; 
    &lt;DockPanel Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="5"&gt;
      &lt;CheckBox Name="cb6" IsCheckedChanged="HandleChange1"&gt;
        &lt;Image Source="data\flower.jpg" Height="30" Width="30"/&gt;
      &lt;/CheckBox&gt;
      &lt;TextBlock Name="txt" VerticalAlignment="Center"&gt;Click the check box.&lt;/TextBlock&gt;
    &lt;/DockPanel&gt;
    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="5" Name="txt2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Check box with an image.&lt;/TextBlock&gt; 
    &lt;CheckBox  Name="cb7" IsCheckedChanged="HandleChange2" Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="6" FontSize="12"&gt;
      &lt;DockPanel&gt;
        &lt;Image Source="data\flower.jpg" Height="30" Width="30"/&gt;
        &lt;TextBlock Name="txt3" VerticalAlignment="Center"&gt;Click the check box.&lt;/TextBlock&gt;
      &lt;/DockPanel&gt;
    &lt;/CheckBox&gt;
    &lt;TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="6" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap"&gt;Check box with complex content, the check box contains a DockPanel with an image and some text.&lt;/TextBlock&gt; 
  &lt;/Grid&gt;
 
&lt;/StackPanel&gt;
            
                
            </TextBlock>
                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="C#">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Data;
using System.Windows.Media;

namespace Checkbox2
{
	/// &lt;summary&gt;
	/// Interaction logic for Pane1.xaml
	/// &lt;/summary&gt;

	public partial class Pane1 : StackPanel
	{
		// To use PaneLoaded put Loaded="PaneLoaded" in root element of .xaml file.
		// private void PaneLoaded(object sender, EventArgs e) {}
		// Sample event handler:  
		// private void ButtonClick(object sender, ClickEventArgs e) {}
		private void HandleChange(object sender, RoutedEventArgs e)
		{
			cb1.Content = "You clicked the check box";
		}

        private void HandleChange1(object sender, RoutedEventArgs e)
        {
            txt.FontSize = 16;
            txt.Text = "I took this photo yesterday.";
	    }
		private void HandleChange2(object sender, RoutedEventArgs e)
		{
			txt3.FontSize = 16;
			txt3.Text = "My favorite photo.";
		}
	}
}        
                
            </TextBox>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET">
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#">
        </TabItem>
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET">
        </TabItem>
        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++">
        </TabItem>
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">
            <!--IB: code-->
            <StackPanel>
                <!--  The namespace + class name in the codebehind file and the x:Class attribute in the root of this document, must stay identical.  You can change them, but you must keep them in sync. -->
                <Grid ShowGridLines="false" Background="White">
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="300px" />
                    <ColumnDefinition Width="250px" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="0" FontSize="20">Check Boxes</TextBlock>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" FontSize="14">The following check box examples demonstrate:</TextBlock>
                    <CheckBox Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="2" Name="cb1" FontSize="12" Checked="HandleChange">Check Box</CheckBox>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap">Single check box. Clicking the box toggles its state from checked to unchecked.</TextBlock>
                    <DockPanel Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="3" Grid.RowSpan="2">
                        <CheckBox Name="cb2" FontSize="12" DockPanel.Dock="Top">Yes</CheckBox>
                        <CheckBox Name="cb3" FontSize="12" DockPanel.Dock="Top">No</CheckBox>
                        <CheckBox Name="cb4" FontSize="12" DockPanel.Dock="Top">Maybe</CheckBox>
                        <CheckBox Name="cb5" FontSize="12" DockPanel.Dock="Top">I have no opinion.</CheckBox>
                    </DockPanel>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="3" Grid.RowSpan="2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap">Group of check boxes. You may choose as many items as you wish in a group of check boxes.</TextBlock>
                    <DockPanel Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="5">
                        <CheckBox Name="cb6" Checked="HandleChange1">
                            <Image Height="30" Width="30" Stretch="None">
                                <Image.Source>
                                    <BitmapImage UriSource="pack://application:,,,/samples;component/Images\flower.jpg" />
                                </Image.Source>
                            </Image>
                        </CheckBox>
                        <TextBlock Name="txt" VerticalAlignment="Center">Click the check box.</TextBlock>
                    </DockPanel>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="5" Name="txt2" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap">Check box with an image.</TextBlock>
                    <CheckBox Name="cb7" Checked="HandleChange2" Margin="10, 10, 3, 3" Grid.Column="0" Grid.Row="6" FontSize="12">
                        <DockPanel>
                            <Image Height="30" Width="30" Stretch="None">
                                <Image.Source>
                                    <BitmapImage UriSource="pack://application:,,,/samples;component/Images\flower.jpg" />
                                </Image.Source>
                            </Image>
                            <TextBlock Name="txt3" VerticalAlignment="Center">Click the check box.</TextBlock>
                        </DockPanel>
                    </CheckBox>
                    <TextBlock Margin="10, 10, 3, 3" Grid.Column="1" Grid.Row="6" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap">Check box with complex content, the check box contains a DockPanel with an image and some text.</TextBlock>
                </Grid>
            </StackPanel>
            <!--IB: code-->
        </TabItem>
    </TabControl>
</Page>