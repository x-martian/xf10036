<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_df5fbd51_1c60_43b1_a614_fdb2a6affa25"
  Tag     ="How to: Set Control Properties"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <!--///////////////////////////////////////////////////////////////////////////////// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.///////////////////////////////////////////////////////////////////////////////-->
  <cc:SdkSinglePageViewer
    Name    ="_df5fbd51_1c60_43b1_a614_fdb2a6affa25"
    Tag     ="How to: Set Control Properties"
    xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
    xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <Table>
        <TableRowGroup>
          <TableRow>
            <TableCell>
              <Paragraph FontSize="22"><Run>How to: Set Control Properties</Run>

              </Paragraph>

            </TableCell>

          </TableRow>

        </TableRowGroup>

      </Table>

      <Paragraph><Run Foreground="DarkGray">[The content included in this documentation is a sub-set of the Windows SDK, and may not be complete or current. Please see the online Windows SDK for current documentation.]</Run>

      </Paragraph>

      <Paragraph/>
      <Paragraph>This topic describes how to use a Control element's properties to change the appearance of Windows Presentation Foundation controls. <Run FontWeight="Bold">Control</Run>
 is the base class for all user-interactive elements therefore other elements can inherit its properties. Following is one such example that demonstrates how to set a button's inherited background property with Extensible Application Markup Language (XAML) and how to retrieve and set the property using procedural code.     
      </Paragraph>

      <Paragraph>For the complete sample that demonstrates how to use several <Run FontWeight="Bold">Control</Run>
 properties, see Setting Control Properties.     
      </Paragraph>

      <Paragraph FontSize="22">Example    
      </Paragraph>

      <Table>
        <TableRowGroup>
          <TableRow>
            <TableCell>
              <Paragraph FontSize="22"><Run>XAML </Run>

              </Paragraph>

            </TableCell>

          </TableRow>

          <TableRow>
            <TableCell>
              <Paragraph TextAlignment="Left" FontSize="8pt" FontFamily="Courier New" xml:space="preserve"><Run>
&lt;Button Name="btn" Background="Red" Click="ChangeBackground">Background
&lt;/Button> </Run>
            
              </Paragraph>

            </TableCell>

          </TableRow>

        </TableRowGroup>

      </Table>

      <Paragraph><Run/>
      </Paragraph>

      <Table>
        <TableRowGroup>
          <TableRow>
            <TableCell>
              <Paragraph FontSize="22"><Run>C# </Run>

              </Paragraph>

            </TableCell>

          </TableRow>

          <TableRow>
            <TableCell>
              <Paragraph TextAlignment="Left" FontSize="8pt" FontFamily="Courier New" xml:space="preserve"><Run>if (btn.Background == Brushes.Red){ btn.Background = new LinearGradientBrush(Colors.LightBlue, Colors.SlateBlue, 90); 
btn.Content = "Background";} else { btn.Background = Brushes.Red;btn.Content = "Control background changes from red to a blue gradient.";} </Run>
            
              </Paragraph>

            </TableCell>

          </TableRow>

        </TableRowGroup>

      </Table>

      <Paragraph><Run/>
      </Paragraph>

      <Table>
        <TableRowGroup>
          <TableRow>
            <TableCell>
              <Paragraph FontSize="22"><Run>Visual Basic </Run>

              </Paragraph>

            </TableCell>

          </TableRow>

          <TableRow>
            <TableCell>
              <Paragraph TextAlignment="Left" FontSize="8pt" FontFamily="Courier New" xml:space="preserve"><Run>If (Equals(btn.Background, Brushes.Red)) Then btn.Background = New LinearGradientBrush(Colors.LightBlue, Colors.SlateBlue, 90) btn.Content = "Background" Else btn.Background = Brushes.Red btn.Content = "Control background changes from red to a blue gradient." End If </Run>
            
              </Paragraph>

            </TableCell>

          </TableRow>

        </TableRowGroup>

      </Table>

      <Paragraph><Run/>
      </Paragraph>

      <Paragraph/>
      <Paragraph/>
      <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about How to: Set Control Properties  to Microsoft. </Span>

      </Paragraph>

    </FlowDocument>

  </cc:SdkSinglePageViewer>

</cc:SdkSinglePageViewer>

