<!--
/////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) Microsoft Corporation, 2006.  All rights reserved.
//
/////////////////////////////////////////////////////////////////////////////
-->


<cc:SdkSinglePageViewer
  Name    ="_7324f243_03af_4c2b_b0db_26ac6cdfcbe4"
  Tag     ="DynamicResource Markup Extension"
  xmlns:cc="clr-namespace:Microsoft.Windows.SdkViewer.Controls;assembly=SdkViewer"
  xmlns   ="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run>DynamicResource Markup Extension</Run>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Provides a value for any XAML property attribute by deferring that value to be a reference to a defined resource. Lookup behavior for that resource is analogous to run-time lookup. 
    </Paragraph>

    <Paragraph FontSize="22"><Run>Example Attribute Usage</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object</Run>
<Run FontStyle="italic">property</Run>
="{<Run FontWeight="Bold">DynamicResource</Run>
<Run FontStyle="italic">key</Run>
}" .../></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Example Property Element Usage</Run>

    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object</Run>
> 
&lt;<Run FontStyle="italic">object</Run>
.<Run FontStyle="italic">property</Run>
> 
&lt;<Run FontWeight="Bold">DynamicResource</Run>
 ResourceKey="<Run FontStyle="italic">key</Run>
" .../> 
&lt;/<Run FontStyle="italic">object</Run>
.<Run FontStyle="italic">property</Run>
> 
&lt;/<Run FontStyle="italic">object</Run>
></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>XAML Values</Run>

    </Paragraph>

    <Paragraph><Run FontWeight="Bold"/>
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph><Span FontWeight="Bold"><Run FontStyle="italic">key</Run>
</Span>

            </Paragraph>

          </TableCell>

          <TableCell>
            <Paragraph>The key for the requested resource. This key was initially assigned by the <Hyperlink NavigateUri="1985cd45-f197-42d5-b75e-886add64b248.xaml">x:Key Attribute</Hyperlink>
 if a resource was created in markup, or was provided as the <Run>key</Run>
 parameter when calling System.Windows.ResourceDictionary.Add(System.Object,System.Object) if the resource was created in code.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph FontSize="22"><Run>Remarks</Run>

    </Paragraph>

    <Paragraph>A <Run FontWeight="Bold">DynamicResource</Run>
 will create a temporary expression during the initial compilation and thus defer lookup for resources until the requested resource value is actually required in order to construct an object. This may potentially be after the XAML page is loaded. The resource value will be found based on key search against all active resource dictionaries starting from the current page scope, and is substituted for the placeholder expression from compilation.
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph>Important: 
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph>In terms of dependency property prededence, a <Run FontWeight="Bold">DynamicResource</Run>
 expression is equivalent to a locally set value. If you set a local value for a property that previously had a <Run FontWeight="Bold">DynamicResource</Run>
 expression, the <Run FontWeight="Bold">DynamicResource</Run>
 is completely removed. For details, see <Hyperlink NavigateUri="1fbada8e-4867-4ed1-8d97-62c07dad7ebc.xaml">Dependency Property Value Precedence</Hyperlink>
.
            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>Certain resource access scenarios are particularly appropriate for <Run FontWeight="Bold">DynamicResource</Run>
 as opposed to a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>
. See <Hyperlink NavigateUri="91580b89-a0a8-4889-aecb-fddf8e63175f.xaml">Resources Overview</Hyperlink>
 for a discussion about the relative merits and performance implications of <Run FontWeight="Bold">DynamicResource</Run>
 and <Run FontWeight="Bold">StaticResource</Run>
.
    </Paragraph>

    <Paragraph>The specified ResourceKey should correspond to an existing resource determined by <Hyperlink NavigateUri="1985cd45-f197-42d5-b75e-886add64b248.xaml">x:Key Attribute</Hyperlink>
 at some level in your page, application, the available control themes, or system resources, and the resource lookup will happen in that order. For more information about resource lookup for static and dynamic resources, see <Hyperlink NavigateUri="91580b89-a0a8-4889-aecb-fddf8e63175f.xaml">Resources Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph>A resource key may be any string defined in the <Hyperlink NavigateUri="11e4cada-41d2-494d-9531-0d3df4dfcbe3.xaml">XAMLName Grammar</Hyperlink>
. A resource key may also be other object types, such as a Type. A <Run FontWeight="Bold">Type</Run>
 key is fundamental to how controls can be styled by themes. For more information, see <Hyperlink NavigateUri="3d864748-cff0-4e63-9b23-d8e5a635b28f.xaml">Control Authoring Overview</Hyperlink>
.
    </Paragraph>

    <Paragraph>APIs for lookup of resource values, such as FindResource, follow the same resource lookup logic as used by <Run FontWeight="Bold">DynamicResource</Run>
.
    </Paragraph>

    <Paragraph>The alternative declarative means of referencing a resource is as a <Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>
.
    </Paragraph>

    <Paragraph>Attribute syntax is the most common syntax used with this markup extension. The string token provided after the <Run FontWeight="Bold">DynamicResource</Run>
 identifier string is assigned as the <Run FontWeight="Bold">ResourceKey</Run>
 value of the underlying DynamicResourceExtension extension class.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">DynamicResource</Run>
 can be used in object element syntax. In this case, specifying the value of the <Run FontWeight="Bold">ResourceKey</Run>
 property is required.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">DynamicResource</Run>
 can also be used in a verbose attribute usage that specifies the <Run FontWeight="Bold">ResourceKey</Run>
 property as a property=value pair:
    </Paragraph>

    <Table CellSpacing="5">
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontSize="22"><Run/>
            </Paragraph>

          </TableCell>

        </TableRow>

        <TableRow>
          <TableCell>
            <Paragraph xml:space="preserve" TextAlignment="Left" FontSize="8pt" FontFamily="Courier New"><Span>
&lt;<Run FontStyle="italic">object</Run>
<Run FontStyle="italic">property</Run>
="{<Run FontWeight="Bold">DynamicResource</Run>
 ResourceKey=<Run FontStyle="italic">key</Run>
}" .../></Span>

            </Paragraph>

          </TableCell>

        </TableRow>

      </TableRowGroup>

    </Table>

    <Paragraph>The verbose usage is often useful for extensions that have more than one settable property, or if some properties are optional. Because <Run FontWeight="Bold">DynamicResource</Run>
 has only one settable property, which is required, this verbose usage is not typical.
    </Paragraph>

    <Paragraph>In the WPF XAML reader implementation, the handling for this markup extension is defined by the <Run FontWeight="Bold">DynamicResourceExtension</Run>
 class.
    </Paragraph>

    <Paragraph><Run FontWeight="Bold">DynamicResource</Run>
 is a markup extension. Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties. All markup extensions in XAML use the { and } characters in their attribute syntax, which is the convention by which a XAML reader recognizes that a markup extension must process the attribute. For more information, see <Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>
.
    </Paragraph>

    <Paragraph FontSize="22"><Run>See Also</Run>

    </Paragraph>

    <Paragraph FontSize="16pt">Reference
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="1985cd45-f197-42d5-b75e-886add64b248.xaml">x:Key Attribute</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="97af044c-71f1-4617-9a94-9064b68185d2.xaml">StaticResource Markup Extension</Hyperlink>

      <LineBreak/>
    </Paragraph>

    <Paragraph FontSize="16pt">Concepts
    </Paragraph>

    <Paragraph><Hyperlink NavigateUri="91580b89-a0a8-4889-aecb-fddf8e63175f.xaml">Resources Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="c1cfcddb-e39c-41c8-a7f3-60984914dfae.xaml">Resources and Code</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="a80db4cd-dd0f-479f-a45f-3740017c22e4.xaml">XAML Overview</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>

      <LineBreak/><Hyperlink NavigateUri="618dc745-8b14-4886-833f-486d2254bb78.xaml">Markup Extensions and XAML</Hyperlink>

      <LineBreak/>
      <LineBreak/>
    </Paragraph>

    <Paragraph/>
    <Paragraph/>
    <Paragraph><Span><Hyperlink NavigateUri="mailto:wsdkfdb@microsoft.com?subject=Feedback">Send comments</Hyperlink>
 about DynamicResource Markup Extension to Microsoft. </Span>

    </Paragraph>

  </FlowDocument>

</cc:SdkSinglePageViewer>

