<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="ActualWidth Sample" x:Class="ActualWidth_Samp.Page1" Loaded="OnLoaded">
    <Page.Resources>
        <Style x:Key="itemHeaderStyler">
            <Setter Property="ListBoxItem.Margin" Value="0,2,0,5" />
            <Setter Property="ListBoxItem.Padding" Value="2" />
            <Setter Property="ListBoxItem.FontFamily" Value="Verdana" />
            <Setter Property="ListBoxItem.FontWeight" Value="Bold" />
            <Setter Property="ListBoxItem.FontSize" Value="12" />
        </Style>
        <Style x:Key="imageStyler">
            <Setter Property="TextBlock.Margin" Value="15" />
        </Style>
        <Style x:Key="HeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="20" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="TabStyle">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabStyle2">
            <Setter Property="TabItem.Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="LightGray" Offset="0" />
                                <GradientStop Color="White" Offset="1" />
                            </GradientStopCollection>
                        </GradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="TabItem.Foreground" Value="Black" />
        </Style>
        <Style x:Key="SubHeaderStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontWeight" Value="Bold" />
            <Setter Property="TextBlock.FontSize" Value="16" />
            <Setter Property="TextBlock.Foreground" Value="DarkSlateBlue" />
            <Setter Property="TextBlock.Margin" Value="10" />
        </Style>
        <Style x:Key="DisStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="8" />
            <Setter Property="TextBlock.Foreground" Value="Gray" />
            <Setter Property="TextBlock.Margin" Value="5,0,5,0" />
        </Style>
        <Style x:Key="mainContentStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="5,10,5,10" />
        </Style>
        <Style x:Key="tocStyle">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.Margin" Value="0" />
        </Style>
        <Style x:Key="CodeSnippetParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Courier New" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10,0,10,0" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="noteParagraph">
            <Setter Property="TextBlock.FontFamily" Value="Verdana" />
            <Setter Property="TextBlock.FontSize" Value="11" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="TextBlock.Margin" Value="10" />
            <Setter Property="TextBlock.Background" Value="LightGray" />
            <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="TCStyle">
            <Setter Property="TabControl.Margin" Value="10" />
        </Style>
    </Page.Resources>
    <TabControl MinHeight="500" MaxHeight="700" MinWidth="400" Style="{StaticResource TCStyle}">
        <TabItem Style="{StaticResource TabStyle}" Header="Width Properties Sample" IsSelected="true">
            <StackPanel>
                <TextBlock Style="{StaticResource HeaderStyle}">Width Properties Sample</TextBlock>
                <TextBlock Style="{StaticResource mainContentStyle}">Four properties are exposed on FrameworkElement that describe an element's Width characteristics. It is possible for these values to be in conflict. This example demonstrates how those conflicts between values are resolved.</TextBlock>
            </StackPanel>
        </TabItem>
        <TabItem Name="xaml" Style="{StaticResource TabStyle}" Header="XAML">
        </TabItem>
        <TabItem Name="xamlcsharp" Style="{StaticResource TabStyle}" Header="XAML + C#">
            <TabControl TabStripPlacement="Right" Height="500">
                <TabItem Name="xcsharpCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                    <ScrollViewer HorizontalScrollBarVisibility="Visible">
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Window  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="Width_MinWidth_MaxWidth.Window1"
    Title="Width Properties Sample"&gt;
    &lt;Border BorderBrush="Black" BorderThickness="2" Background="White"&gt;
	&lt;StackPanel Margin="10"&gt;
	
		&lt;TextBlock FontSize="20" DockPanel.Dock="Top"&gt;Width Properties Sample&lt;/TextBlock&gt;
        &lt;TextBlock TextWrapping="Wrap" Margin="0,0,0,10"&gt;Four properties are exposed on FrameworkElement that describe an element's Width characteristics. It is possible for these values to be in conflict. This example demonstrates how those conflicts between values are resolved.&lt;/TextBlock&gt;
        &lt;TextBlock TextWrapping="Wrap" Margin="0,0,0,10"&gt;If viewed on a continuum, MinWidth value takes precedence over MaxWidth value, which in turn takes precedence over the Width value. This is best demonstrated visually:&lt;/TextBlock&gt;
            &lt;Canvas Height="200" MinWidth="200" Background="#b0c4de" VerticalAlignment="Top"  HorizontalAlignment="Center" Name="myCanvas"&gt;
                &lt;Rectangle HorizontalAlignment="Center" Canvas.Top="50" Canvas.Left="50"  Name="rect1" Fill="#4682b4" Width="100" Height="100"/&gt;
            &lt;/Canvas&gt;
        &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt;
            &lt;Button Name="Button1" Click="clipRect" Margin="0,5,5,5"&gt;Canvas.ClipToBounds="True"&lt;/Button&gt;&lt;Button Name="Button2" Margin="0,5,5,5" Click="unclipRect"&gt;Canvas.ClipToBounds="False"&lt;/Button&gt;
        &lt;/StackPanel&gt;
            &lt;Grid&gt;
            &lt;RowDefinition/&gt;
            &lt;RowDefinition/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
            &lt;ColumnDefinition Width="Auto"/&gt;
    &lt;TextBlock Grid.Row="0" FontSize="14" FontWeight="Bold" Grid.ColumnSpan="6" HorizontalAlignment="Center" Margin="0,15,0,15" TextWrapping="Wrap"&gt;
            Use the ListBoxes below to manipulate the various Width related properties of the Rectangle above.&lt;/TextBlock&gt;
    &lt;TextBlock Grid.Row="1" Grid.Column="0" Margin="10,0,0,0" TextWrapping="Wrap"&gt;Set the Rectangle Width:&lt;/TextBlock&gt;
    &lt;ListBox Grid.Column="1" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeWidth"&gt;
      &lt;ListBoxItem&gt;25&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;50&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;75&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;100&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;125&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;150&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;175&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;200&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;225&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;250&lt;/ListBoxItem&gt;
    &lt;/ListBox&gt;

	&lt;TextBlock Grid.Row="1" Grid.Column="2" Margin="10,0,0,0" TextWrapping="Wrap"&gt;Set the Rectangle MinWidth:&lt;/TextBlock&gt;
    &lt;ListBox Grid.Column="3" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeMinWidth"&gt;
      &lt;ListBoxItem&gt;25&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;50&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;75&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;100&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;125&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;150&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;175&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;200&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;225&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;250&lt;/ListBoxItem&gt;
  &lt;/ListBox&gt;      
     
    &lt;TextBlock Grid.Row="1" Grid.Column="4" Margin="10,0,0,0" TextWrapping="Wrap"&gt;Set the Rectangle MaxWidth:&lt;/TextBlock&gt;
    &lt;ListBox Grid.Column="5" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeMaxWidth"&gt;
      &lt;ListBoxItem&gt;25&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;50&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;75&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;100&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;125&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;150&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;175&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;200&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;225&lt;/ListBoxItem&gt;
      &lt;ListBoxItem&gt;250&lt;/ListBoxItem&gt;  
    &lt;/ListBox&gt;
  	&lt;/Grid&gt;

	    &lt;TextBlock Name="txt1"/&gt;
        &lt;TextBlock Name="txt2"/&gt;
        &lt;TextBlock Name="txt3"/&gt;
        &lt;TextBlock Name="txt4"/&gt;
        &lt;TextBlock Name="txt5"/&gt;
	&lt;/StackPanel&gt;
	&lt;/Border&gt;	
&lt;/Window&gt;


            </TextBox>
                    </ScrollViewer>
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="C#">
                    <ScrollViewer>
                        <TextBox Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Controls;
using System.Windows.Documents;

namespace Width_MinWidth_MaxWidth
{
	public partial class Window1 : Window
    {
        public void changeWidth(object sender, RoutedEventArgs args)
        {
            ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
            Double sz1 = Double.Parse(li.Content.ToString());
            rect1.Width = sz1;
            rect1.UpdateLayout();
            txt1.Text = "ActualWidth is set to " + rect1.ActualWidth;
            txt2.Text = "Width is set to " + rect1.Width;
            txt3.Text = "MinWidth is set to " + rect1.MinWidth;
            txt4.Text = "MaxWidth is set to " + rect1.MaxWidth;
        }
        public void changeMinWidth(object sender, RoutedEventArgs args)
        {
            ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
            Double sz1 = Double.Parse(li.Content.ToString());
            rect1.MinWidth = sz1;
            rect1.UpdateLayout();
            txt1.Text = "ActualWidth is set to " + rect1.ActualWidth;
            txt2.Text = "Width is set to " + rect1.Width;
            txt3.Text = "MinWidth is set to " + rect1.MinWidth;
            txt4.Text = "MaxWidth is set to " + rect1.MaxWidth;
        }
        public void changeMaxWidth(object sender, RoutedEventArgs args)
        {
            ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
            Double sz1 = Double.Parse(li.Content.ToString());
            rect1.MaxWidth = sz1;
            rect1.UpdateLayout();
            txt1.Text = "ActualWidth is set to " + rect1.ActualWidth;
            txt2.Text = "Width is set to " + rect1.Width;
            txt3.Text = "MinWidth is set to " + rect1.MinWidth;
            txt4.Text = "MaxWidth is set to " + rect1.MaxWidth;
        }

        public void clipRect(object sender, RoutedEventArgs args)
        {
            myCanvas.ClipToBounds = true;
            txt5.Text = "Canvas.ClipToBounds is set to " + myCanvas.ClipToBounds;
        }
        public void unclipRect(object sender, RoutedEventArgs args)
        {
            myCanvas.ClipToBounds = false;
            txt5.Text = "Canvas.ClipToBounds is set to " + myCanvas.ClipToBounds;
        }
    }
}                
                
            </TextBox>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="xamlvb" Style="{StaticResource TabStyle}" Header="XAML + Visual Basic.NET">
            <TabControl TabStripPlacement="Right">
                <TabItem Name="xvbCheck" Style="{StaticResource TabStyle2}" Header="XAML">
                </TabItem>
                <TabItem Style="{StaticResource TabStyle2}" Header="VB.NET">
                </TabItem>
            </TabControl>
        </TabItem>
        <TabItem Name="csharp" Style="{StaticResource TabStyle}" Header="C#">
        </TabItem>
        <TabItem Name="vb" Style="{StaticResource TabStyle}" Header="Visual Basic.NET">
        </TabItem>
        <TabItem Name="managedcpp" Style="{StaticResource TabStyle}" Header="Managed C++">
        </TabItem>
        <TabItem Style="{StaticResource TabStyle}" Header="Preview Sample">
            <Border BorderBrush="Black" BorderThickness="2" Background="White">
                <StackPanel Margin="10">
                    <TextBlock FontSize="20" DockPanel.Dock="Top">Width Properties Sample</TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">Four properties are exposed on FrameworkElement that describe an element's Width characteristics. It is possible for these values to be in conflict. This example demonstrates how those conflicts between values are resolved.</TextBlock>
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">If viewed on a continuum, MinWidth value takes precedence over MaxWidth value, which in turn takes precedence over the Width value. This is best demonstrated visually:</TextBlock>
                    <Canvas Height="200" MinWidth="200" Background="#b0c4de" VerticalAlignment="Top" HorizontalAlignment="Center" Name="myCanvas">
                        <Rectangle HorizontalAlignment="Center" Canvas.Top="50" Canvas.Left="50" Name="rect1" Fill="#4682b4" Width="100" Height="100" />
                    </Canvas>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <Button Name="Button1" Click="clipRect" Margin="0,5,5,5">Canvas.ClipToBounds="True"</Button>
                        <Button Name="Button2" Margin="0,5,5,5" Click="unclipRect">Canvas.ClipToBounds="False"</Button>
                    </StackPanel>
                    <Grid>
                        <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" FontSize="14" FontWeight="Bold" Grid.ColumnSpan="6" HorizontalAlignment="Center" Margin="0,15,0,15" TextWrapping="Wrap">
            Use the ListBoxes below to manipulate the various Width related properties of the Rectangle above.</TextBlock>
                        <TextBlock Grid.Row="1" Grid.Column="0" Margin="10,0,0,0" TextWrapping="Wrap">Set the Rectangle Width:</TextBlock>
                        <ListBox Grid.Column="1" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeWidth">
                            <ListBoxItem>25</ListBoxItem>
                            <ListBoxItem>50</ListBoxItem>
                            <ListBoxItem>75</ListBoxItem>
                            <ListBoxItem>100</ListBoxItem>
                            <ListBoxItem>125</ListBoxItem>
                            <ListBoxItem>150</ListBoxItem>
                            <ListBoxItem>175</ListBoxItem>
                            <ListBoxItem>200</ListBoxItem>
                            <ListBoxItem>225</ListBoxItem>
                            <ListBoxItem>250</ListBoxItem>
                        </ListBox>
                        <TextBlock Grid.Row="1" Grid.Column="2" Margin="10,0,0,0" TextWrapping="Wrap">Set the Rectangle MinWidth:</TextBlock>
                        <ListBox Grid.Column="3" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeMinWidth">
                            <ListBoxItem>25</ListBoxItem>
                            <ListBoxItem>50</ListBoxItem>
                            <ListBoxItem>75</ListBoxItem>
                            <ListBoxItem>100</ListBoxItem>
                            <ListBoxItem>125</ListBoxItem>
                            <ListBoxItem>150</ListBoxItem>
                            <ListBoxItem>175</ListBoxItem>
                            <ListBoxItem>200</ListBoxItem>
                            <ListBoxItem>225</ListBoxItem>
                            <ListBoxItem>250</ListBoxItem>
                        </ListBox>
                        <TextBlock Grid.Row="1" Grid.Column="4" Margin="10,0,0,0" TextWrapping="Wrap">Set the Rectangle MaxWidth:</TextBlock>
                        <ListBox Grid.Column="5" Grid.Row="1" Margin="10,0,0,0" Width="50" Height="50" SelectionChanged="changeMaxWidth">
                            <ListBoxItem>25</ListBoxItem>
                            <ListBoxItem>50</ListBoxItem>
                            <ListBoxItem>75</ListBoxItem>
                            <ListBoxItem>100</ListBoxItem>
                            <ListBoxItem>125</ListBoxItem>
                            <ListBoxItem>150</ListBoxItem>
                            <ListBoxItem>175</ListBoxItem>
                            <ListBoxItem>200</ListBoxItem>
                            <ListBoxItem>225</ListBoxItem>
                            <ListBoxItem>250</ListBoxItem>
                        </ListBox>
                    </Grid>
                    <TextBlock Name="txt1" />
                    <TextBlock Name="txt2" />
                    <TextBlock Name="txt3" />
                    <TextBlock Name="txt4" />
                    <TextBlock Name="txt5" />
                </StackPanel>
            </Border>
        </TabItem>
    </TabControl>
</Page>